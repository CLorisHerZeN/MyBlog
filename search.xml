<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>复杂度分析与二分查找</title>
      <link href="/2024/10/05/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2024/10/05/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><p><strong>程序 &#x3D; 数据结构 + 算法</strong></p><ul><li>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。</li><li>数据结构（data structure）是一种数据组织、管理和存储格式，通常被选择用来高效访问数据</li></ul><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="思维导图"></p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><ul><li>比较不同算法的优劣，主要根据算法所占的<strong>空间</strong>和<strong>时间</strong>两个维度</li><li>假设每行语句执行时间一致，衡量时按<strong>最差</strong>执行情况计算，即执行代码行数最多</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><p>即算法的渐进时间复杂度，计算的是时间增长的趋势</p><p>用来衡量一个算法的执行，随数据规模增大，而增长的时间成本</p><p>公式：$T(n) &#x3D; O(f(n))$</p><ul><li>T(n)表示代码执行的时间；n表示数据规模的大小；f(n) 表示每行代码执行的次数总和</li><li>公式中的<strong>低阶、常量、系数</strong>三部分并不左右增长趋势，所以都可以忽略</li></ul><h3 id="常见的时间复杂度量级"><a href="#常见的时间复杂度量级" class="headerlink" title="常见的时间复杂度量级"></a>常见的时间复杂度量级</h3><ul><li><p>常数阶 O($1$)：不随着某个变量的增长而增长</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">++i;</span><br><span class="line">j++;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + j;</span><br></pre></td></tr></table></figure></li><li><p>对数阶 O($logN$)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line">    i = i * <span class="number">2</span>;<span class="comment">//2 的 x 次方等于n，x = log2^n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性阶 O($n$)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">   j = i;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性对数阶 O($nlogN$)：将时间复杂度为O(logn)的代码循环N遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>; m&lt;n; m++) &#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n) &#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>平方阶 O($n^2$)：把 O(n) 的代码再嵌套n循环</p></li><li><p>立方阶 O($n^3$)</p></li><li><p>K次方阶 O($n^k$)</p></li><li><p>指数阶 O($2^n$)：如，子集生成问题</p></li><li><p>阶乘 O($n!$)：如，旅行商问题（TSP）</p></li></ul><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95%E5%87%BD%E6%95%B0%E5%9B%BE.png" alt="大O表示法函数图"></p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ul><li><p>内存空间增长的趋势</p></li><li><p>常用量级： </p><ul><li><p>O($1$)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] m = <span class="keyword">new</span> <span class="title class_">int</span>[n]</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">   j = i;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>O($n$)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] m = <span class="keyword">new</span> <span class="title class_">int</span>[n]</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">   j = i;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>O($n^2$)：如，二维数组</p></li></ul></li></ul><h1 id="二分查找算法描述"><a href="#二分查找算法描述" class="headerlink" title="二分查找算法描述"></a>二分查找算法描述</h1><ul><li><p>二分查找：也称折半查找，输入一个<strong>有序</strong>的元素列表，分别设定左右端与中间（向下取整）三个指针</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png" alt="二分查找"></p></li><li><p>每次查找都将<strong>唯一的</strong>目标与中间对应值比较，如果中间元素正好是要查找的元素，则搜索过程结束；</p></li><li><p>如果目标大于或小于中间元素，则排除左边或右边的数，更新指针继续比较</p></li><li><p>以此类推，直到找到要查找的元素返回索引，或者剩下的半区域为空（左指针处于右指针右侧）返回 -1</p><table><thead><tr><th align="center">算法描述</th><th></th></tr></thead><tbody><tr><td align="center">前提</td><td>给定一个内含 $n$ 个元素的有序数组 $A$，满足 $A_{0}\leq A_{1}\leq A_{2}\leq \cdots \leq A_{n-1}$，一个待查值 $target$</td></tr><tr><td align="center">1</td><td>设置 $i&#x3D;0$，$j&#x3D;n-1$</td></tr><tr><td align="center">2</td><td>如果 $i \gt j$，结束查找，没找到</td></tr><tr><td align="center">3</td><td>设置 $m &#x3D; floor(\frac {i+j}{2})$ ，$m$ 为中间索引，$floor$ 是向下取整（$\leq \frac {i+j}{2}$ 的最小整数）</td></tr><tr><td align="center">4</td><td>如果 $target &lt; A_{m}$ 设置 $j &#x3D; m - 1$，跳到第2步</td></tr><tr><td align="center">5</td><td>如果 $A_{m} &lt; target$ 设置 $i &#x3D; m + 1$，跳到第2步</td></tr><tr><td align="center">6</td><td>如果 $A_{m} &#x3D; target$，结束查找，找到了</td></tr></tbody></table></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ul><li><strong>二分法最重要的两个点：</strong><ul><li>while循环中 left 和 right 的关系，到底是 left &lt;&#x3D; right 还是 left &lt; right</li><li>迭代过程中 middle 和 right 的关系，到底是 right &#x3D; middle - 1 还是 right &#x3D; middle</li></ul></li><li>左开右闭比较少用，此处不说明</li></ul><h2 id="左闭右闭"><a href="#左闭右闭" class="headerlink" title="左闭右闭"></a>左闭右闭</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BinarySearch</span> <span class="variable">bs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySearch</span>();</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">7</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">44</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">78</span>&#125;;</span><br><span class="line">        System.out.println(bs.binarySearchTest(arr, <span class="number">27</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearchTest</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>;<span class="comment">// 定义target在左闭右闭的区间里，[left, right]</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + (j - i) / <span class="number">2</span>;<span class="comment">// 防止溢出 等同于(left + right)/2</span></span><br><span class="line">            <span class="comment">//int m = (i + j) &gt;&gt;&gt; 1;也可</span></span><br><span class="line">            <span class="keyword">if</span> (arr[m] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[m] &lt; target) &#123;</span><br><span class="line">                i = m + <span class="number">1</span>;<span class="comment">//左闭右闭，为了不重复比对，排除m</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>while (i &lt;= j)</code>：不能不加等号——不然当i与j指向同一位置时，该数没有被比对，可能漏结果</li><li><code>int m = (i + j) &gt;&gt;&gt; 1;</code>：对于正整数来说，无符号右移一位等同于除以2并向下取整</li><li>用小于号：与数组递增顺序一致，方便思考</li></ul><h2 id="左闭右开"><a href="#左闭右开" class="headerlink" title="左闭右开"></a>左闭右开</h2><ul><li>此时j只是作为边界，指向的不是查找目标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BinarySearch</span> <span class="variable">bs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySearch</span>();</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">7</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">44</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">78</span>&#125;;</span><br><span class="line">        System.out.println(bs.binarySearchTest01(arr, <span class="number">78</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearchTest01</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length;<span class="comment">// 定义target在左闭右开的区间里，即：[left, right)</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;<span class="comment">// 左闭右开，i取得到，j取不到，相等是无效的</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + (j - i) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[m] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[m] &lt; target) &#123;</span><br><span class="line">                i = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j = m;<span class="comment">//  target 在左区间，左闭右开，这样m不被包括在比较范围内</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>while (i &lt; j)</code>加了等于号后，当查找数组内不存在的数时会出现死循环：i与j相等后，两个指针都不会再移动，但是比较仍然循环进行。</li></ul><h2 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该方法效率较上两种方法低，可以由<strong>事后统计法</strong>验证，但该方法依赖硬件环境与数据准备</li><li>时间复杂度：<ul><li>线性查找：O($n$)</li><li>二分查找：O($logN$)</li></ul></li></ul><h2 id="平衡版"><a href="#平衡版" class="headerlink" title="平衡版"></a>平衡版</h2><ul><li>按照以上左闭右闭和左闭右开方法，元素在最左与元素在最右的比较次数是不同的，运行时间也就不同</li><li>解决方案：(左闭右开)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">7</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">44</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">78</span>&#125;;</span><br><span class="line">        System.out.println(binarySearch(arr, <span class="number">78</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span> &lt; j - i) &#123;<span class="comment">// j - i表示待查找的元素个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + (j - i) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; arr[m]) &#123;</span><br><span class="line">                j = m;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">// 去除else if，减少了循环内比较次数，但是算法最好情况增加到O(logN)</span></span><br><span class="line">                i = m;<span class="comment">// 进入else，有可能target等于或大于中间值，必须将m纳入比较范围，i = m</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123;<span class="comment">// 在循环外对i指向的数字进行比较</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java方法实现"><a href="#Java方法实现" class="headerlink" title="Java方法实现"></a>Java方法实现</h2><ul><li>Java源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">long</span>[] a, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex, <span class="type">long</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> fromIndex;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> toIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">midVal</span> <span class="operator">=</span> a[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midVal &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found，low 左侧元素肯定都比 target 小，因此 low 即插入点</span></span><br><span class="line">    <span class="comment">// 表示该元素应该从哪里插入数组，插入点取负是为了与找到情况区分</span></span><br><span class="line">&#125;<span class="comment">// -1 是为了把索引 0 位置的插入点与找到的情况进行区分</span></span><br></pre></td></tr></table></figure><ul><li>方法应用，数组插入操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] a = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Arrays.binarySearch(a, target);<span class="comment">// -2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            i = Math.abs(i + <span class="number">1</span>);<span class="comment">// 1，为插入位置</span></span><br><span class="line">            <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[a.length + <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, i);<span class="comment">// [2, 0, 0, 0]</span></span><br><span class="line">            b[i] = target;<span class="comment">// [2, 4, 0, 0]</span></span><br><span class="line">            System.arraycopy(a, i, b, i + <span class="number">1</span>, a.length - i);<span class="comment">// [2, 4, 5, 8]</span></span><br><span class="line">            System.out.println(Arrays.toString(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理重复元素"><a href="#处理重复元素" class="headerlink" title="处理重复元素"></a>处理重复元素</h2><ul><li>若有重复元素，会返回第一个m对应下标，如何返回最左或最右的下标</li></ul><h3 id="LeftMost"><a href="#LeftMost" class="headerlink" title="LeftMost"></a>LeftMost</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">LeftMost</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//记录最左的候选者</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + (j - i) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[m] == target) &#123;</span><br><span class="line">            candidate m;<span class="comment">// 记录候选位置</span></span><br><span class="line">            j = m - <span class="number">1</span>;<span class="comment">// 继续向左查找，如果还有相等，继续更新candidate</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[m] &lt; target) &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进行改动,返回更有用的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchLeftmost</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= a[m]) &#123;<span class="comment">// 小于等于中间值，都要向左找</span></span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i; <span class="comment">// 返回&lt;target的元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RightMost"><a href="#RightMost" class="headerlink" title="RightMost"></a>RightMost</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">RightMost</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + (j - i) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[m] == target) &#123;</span><br><span class="line">            candidate m;</span><br><span class="line">            i = m + <span class="number">1</span>;<span class="comment">// 继续向右查找，如果还有相等，继续更新candidate</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[m] &lt; target) &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchRightmost</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;<span class="comment">// 大于等于中间值，都要向右找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i - <span class="number">1</span>;<span class="comment">// 返回&gt;target的元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E5%BA%94%E7%94%A8%E5%90%8D%E8%AF%8D.png" alt="二分应用名词"></p><ul><li><p><strong>范围查询</strong>：</p><ul><li>查询 $x \lt 4$，$0 至 leftmost(4) - 1$</li><li>查询 $x \leq 4$，$0 至 rightmost(4)$</li><li>查询 $4 \lt x$，$rightmost(4) + 1 至 \infty $</li><li>查询 $4 \leq x$， $leftmost(4) 至 \infty$</li><li>查询 $4 \leq x \leq 7$，$leftmost(4) 至 rightmost(7)$</li><li>查询 $4 \lt x \lt 7$，$rightmost(4)+1 至 leftmost(7)-1$</li></ul><p><strong>求排名</strong>：$leftmost(target) + 1$</p><ul><li>$target$ 可以不存在，如：$leftmost(5)+1 &#x3D; 6$</li><li>$target$ 也可以存在，如：$leftmost(4)+1 &#x3D; 3$</li></ul><p><strong>求前任（predecessor）</strong>：$leftmost(target) - 1$</p><ul><li>$leftmost(3) - 1 &#x3D; 1$，前任 $a_1 &#x3D; 2$</li><li>$leftmost(4) - 1 &#x3D; 1$，前任 $a_1 &#x3D; 2$</li></ul><p><strong>求后任（successor）</strong>：$rightmost(target)+1$</p><ul><li>$rightmost(5) + 1 &#x3D; 5$，后任 $a_5 &#x3D; 7$</li><li>$rightmost(4) + 1 &#x3D; 5$，后任 $a_5 &#x3D; 7$</li></ul><p><strong>求最近邻居</strong>：</p><ul><li>前任和后任距离更近者</li></ul></li><li><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）</a></p></li><li><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (leftAndRight(nums, target, <span class="number">0</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> leftAndRight(nums,target,<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> leftAndRight(nums,target,<span class="number">1</span>);</span><br><span class="line">            arr[<span class="number">0</span>] = left;</span><br><span class="line">            arr[<span class="number">1</span>] = right;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">leftAndRight</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> side)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + (j - i) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; nums[m]) &#123;</span><br><span class="line">                j = m - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[m] &lt; target) &#123;</span><br><span class="line">                i = m + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                candidate = m;</span><br><span class="line">                <span class="keyword">if</span> (side == <span class="number">0</span>) &#123;</span><br><span class="line">                    j = m - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (side == <span class="number">1</span>) &#123;</span><br><span class="line">                    i = m + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb开发·Maven</title>
      <link href="/2024/10/04/JavaWeb%E5%BC%80%E5%8F%91%C2%B7Maven/"/>
      <url>/2024/10/04/JavaWeb%E5%BC%80%E5%8F%91%C2%B7Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven概述"><a href="#Maven概述" class="headerlink" title="Maven概述"></a>Maven概述</h1><p><strong>Maven是什么</strong>：</p><ul><li>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供用于<strong>管理</strong>和<strong>构建</strong>项目支持的工具。</li><li>它基于项目对象模型(Project Object Model , 简称: POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。</li><li>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></li></ul><p><strong>Maven的作用</strong>：</p><ul><li><p>添加第三方jar包：以坐标的方式简单的引用，节约了存储空间，避免了重复文件太多而造成的混乱</p></li><li><p>依赖管理：管理项目依赖的资源(jar包)，避免版本冲突</p></li><li><p>统一项目结构：</p><p><img src="/img/JavaWeb/Maven%E7%BB%9F%E4%B8%80%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="Maven统一项目结构"></p></li><li><p>项目构建：提供了一套简单的命令来完成编译、测试、打包、发布</p></li></ul><p><strong>Maven模型：</strong></p><ul><li>构建生命周期&#x2F;阶段：通过插件完成项目标准化构建，不同阶段有不同文件产生</li><li>项目对象模型：通过pom文件中的信息描述Maven工程，即依赖的坐标——组织、模块名称、版本</li><li>依赖管理模型：查找仓库</li></ul><p><img src="/img/JavaWeb/Maven%E6%A8%A1%E5%9E%8B.png" alt="Maven模型"></p><ul><li><p>仓库：用于存储资源，管理各种jar包。</p><ul><li><p>本地仓库：自己计算机上的一个目录。如果我们本地项目需要某个jar包，优先去本地仓库去找依赖</p></li><li><p>远程仓库(私服)：一般由公司团队搭建的私有仓库，提高查找速度。如果本地仓库没有所需jar包，就去私服去找</p></li><li><p>中央仓库：由Maven团队维护的全球唯一的。 仓库地址：<a href="https://repo1.maven.org/maven2/%E7%A7%81%E6%9C%8D%E4%B8%8A%E4%B9%9F%E6%B2%A1%E6%9C%89%E5%B0%B1%E5%8E%BB%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%E5%8E%BB%E6%89%BE%E4%BE%9D%E8%B5%96">https://repo1.maven.org/maven2/私服上也没有就去中央仓库去找依赖</a></p></li></ul></li></ul><h1 id="Maven项目"><a href="#Maven项目" class="headerlink" title="Maven项目"></a>Maven项目</h1><h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><ul><li>POM (Project Object Model) ：指的是项目对象模型，用来描述当前的maven项目。</li></ul><p>pom.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- POM模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当前项目坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_project1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><project> ：pom文件的根标签，表示当前maven项目</li><li><modelVersion> ：声明项目描述遵循哪一个POM模型版本<ul><li>虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</li></ul></li><li>坐标 ：<groupId>、<artifactId>、<version><ul><li>定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</li></ul></li><li><packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</li></ul><h2 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h2><ul><li><p>坐标：资源的唯一标识 , 通过该坐标可以唯一定位资源位置，使用坐标来定义项目或引入项目中需要的依赖</p></li><li><p>Maven坐标主要组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul></li><li><p><strong>注意：</strong></p><ul><li><p>上面所说的资源可以是插件、依赖、当前项目。</p></li><li><p>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</p></li></ul></li></ul><h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><ul><li>A项目需要引用B项目中的类，那么A对B就产生了依赖</li></ul><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><ul><li><p>指当前项目运行所需要的jar包。一个项目中可以引入多个依赖</p></li><li><p>引入步骤：</p><ol><li><p>在pom.xml中编写<dependencies>标签</p></li><li><p>在<dependencies>标签中使用<dependency>引入坐标</p></li><li><p>定义坐标的 groupId、artifactId、version</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第1个依赖 : logback --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第2个依赖 : junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>点击刷新按钮，引入最新加入的坐标<ul><li>刷新依赖：保证每一次引入新的依赖，或者修改现有的依赖配置，都可以加入最新的坐标</li></ul></li></ol></li><li><p>注意事项：</p><ol><li><p>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 &#x2F; 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</p></li><li><p>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></p></li></ol></li></ul><h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><h3 id="依赖具有传递性"><a href="#依赖具有传递性" class="headerlink" title="依赖具有传递性"></a>依赖具有传递性</h3><p>依赖传递可以分为：</p><ol><li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p></li></ol><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><ul><li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">&lt;/dependen</span><br></pre></td></tr></table></figure><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><ul><li><p>在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。</p></li><li><p>作用范围：</p><ol><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包运行（package指令范围内）</p></li></ol></li><li><p>scope标签的取值范围：</p><table><thead><tr><th><strong>scope</strong>值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段</p></li><li><p>Maven中有3套相互独立的生命周期：</p><p><strong>clean</strong>：清理工作。</p><p><strong>default</strong>：核心工作，如：编译、测试、打包、安装、部署等。</p><p><strong>site</strong>：生成报告、发布站点等。</p><p>每套生命周期包含一些阶段（phase），阶段是有顺序的，后面的阶段依赖于前面的阶段。</p></li><li><p>主要需要关注的生命周期阶段有五个：</p><ul><li><p>clean清理：移除上一次构建生成的文件</p></li><li><p>compile编译：编译项目源代码</p></li><li><p>test测试：使用合适的单元测试框架运行测试(junit)</p></li><li><p>package打包：将编译后的文件打包，如：jar、war等</p></li><li><p>install安装：安装项目到本地仓库</p></li></ul></li></ul><p><img src="/img/JavaWeb/Maven%E7%94%9F%E5%91%BD%E9%98%B6%E6%AE%B5.png" alt="Maven生命阶段"></p><p>在同一套生命周期中，当运行后面的阶段时，前面的阶段都会运行。当执行生命阶段时，最终是由插件来执行</p><ul><li><p>执行指定生命周期的两种方式：</p><ul><li><p>在idea中，右侧的maven工具栏，选中对应的生命周期，双击执行。</p></li><li><p>在命令行中，通过命令执行。</p><p> mvn clean</p><p> mvn compile</p><p> mvn package</p><p> mvn test</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb开发·前端</title>
      <link href="/2024/10/04/JavaWeb%E5%BC%80%E5%8F%91%C2%B7%E5%89%8D%E7%AB%AF/"/>
      <url>/2024/10/04/JavaWeb%E5%BC%80%E5%8F%91%C2%B7%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><ul><li><p>Web：全球广域网，也称为万维网(www World Wide Web)，能够通过浏览器访问的网站</p></li><li><p>Web网站工作流程：</p><ul><li>前后端分离开发</li><li>混合开发</li></ul></li></ul><p><img src="/%5Cimg%5CJavaWeb%5CWeb%E7%BD%91%E7%AB%99%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Web网站工作流程"></p><ul><li><p><strong>Web标准</strong>也称为<strong>网页标准</strong>，由一系列的标准组成，大部分由W3C（ World Wide Web Consortium，万维网联盟）负责制定。由三个组成部分：</p><ul><li><p>HTML：负责网页的结构（页面元素和内容）。</p></li><li><p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）。</p></li><li><p>JavaScript：负责网页的行为（交互效果）</p></li></ul></li><li><p>略过前端三件套</p></li></ul><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><ul><li>用来替代JavaScript的DOM操作，是一套构建用户界面的 <strong>渐进式框架</strong>，提高开发效率。</li><li>一个完整的html页面包括了视图和数据，数据是通过请求 从后台获取的，需要将后台获取到的数据呈现到页面上，这就需要使用DOM操作。为这种开发流程，引入了一种叫做<strong>MVVM(Model-View-ViewModel)的前端开发思想</strong><ul><li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li><li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li><li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li></ul></li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li><p>第一步：在VS Code中创建名为12. Vue-快速入门.html的文件，并且在html文件同级创建js目录，将<strong>资料&#x2F;vue.js文件</strong>目录下得vue.js拷贝到js目录</p></li><li><p>第二步：然后编写&lt;script&gt;标签来引入vue.js文件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：在js代码区域定义vue对象,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在创建vue对象时，有几个常用的属性：</p><ul><li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li><li>data: 用来定义数据模型</li><li>methods: 用来定义函数。</li></ul></li><li><p>第四步：在html区域编写视图，其中<code>&#123;&#123;&#125;&#125;</code>是插值表达式，用来将vue对象中定义的model展示到页面上的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><ul><li><strong>指令：</strong>HTML 标签上带有 v- 前缀的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</li><li>在vue中，大量的指令来实现数据绑定到视图</li></ul><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-else-if</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><h3 id="v-bind和v-model"><a href="#v-bind和v-model" class="headerlink" title="v-bind和v-model"></a>v-bind和v-model</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-bind<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="comment">&lt;!-- 设置为接管区域 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要给a标签的href属性赋值，并且值应该来自于vue对象的数据模型中的url变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind指令是可以省略的，但是:不能省略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该表单输入的文本双向绑定url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>双向绑定的作用：可以获取表单的数据的值，然后提交给服务器</strong></p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li><p>v-on语法给标签的事件绑定的函数，必须是vue对象种声明的函数</p></li><li><p>v-on语法绑定事件时，事件名相比较js中的事件名，没有on，如：onclick ——&gt; v-on:click</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-on<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定单击事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-on也存在简写方式，即v-on: 可以替换成@ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//定义事件绑定时需要的handle()函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;你点我了一下...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-if与v-show<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 双向绑定到age属性，可以通过表单输入框来改变age的值 --&gt;</span></span><br><span class="line">        年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line">        <span class="comment">&lt;!-- 动态判断年龄的值，呈现对应的年龄的文字描述 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-show和v-if的作用效果是一样的，只是原理不一样 --&gt;</span></span><br><span class="line">        年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 60&quot;</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ul><li>这个指令是用来遍历的，需要循环那个标签，v-for 指令就写在那个标签上。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">v-for</span>=<span class="string">&quot;变量名 in 集合模型数据&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;变量名&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历需要使用索引时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">v-for</span>=<span class="string">&quot;(变量名,索引变量) in 集合模型数据&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--索引变量是从0开始，所以要表示序号的话，需要手动的加1--&gt;</span></span><br><span class="line">   &#123;&#123;索引变量 + 1&#125;&#125; &#123;&#123;变量名&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-for<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;addr in addrs&quot;</span>&gt;</span>&#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(addr,index) in addrs&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125; : &#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">addrs</span>:[<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;西安&quot;</span>, <span class="string">&quot;成都&quot;</span>, <span class="string">&quot;深圳&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><ul><li><p>全称Asynchronous JavaScript And XML，异步的JavaScript和XML</p></li><li><p>作用：</p><ul><li>与服务器进行数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</li><li>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术，如：搜索联想、用户名是否可用的校验等等。</li></ul></li><li><p>同步与异步：</p><ul><li>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后才能，浏览器页面才能继续做其他的操作。 </li><li>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</li></ul></li><li><p>原生Ajax代码编写起来比较繁琐</p></li></ul><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><ul><li>一门更加简单的发送Ajax请求的技术。Axios是对原生的AJAX进行封装，简化书写。</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li><p>引入Axios文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用Axios发送请求，并获取响应结果，官方提供的api很多，此处给出2种：</p><ul><li><p>发送 get 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>发送 post 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&quot;username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数：</p><ul><li><p>method属性：用来设置请求方式的。取值为 get 或者 post。</p></li><li><p>url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参数值&amp;参数名2&#x3D;参数值2。</p></li><li><p>data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。</p></li></ul></li></ul><ul><li>then() 需要传递一个匿名函数。我们将 then()中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 resp 参数是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据。</li></ul><h3 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h3><p>Axios还针对不同的请求，提供了别名方式的api,具体如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>axios.get(url [, config])</td><td>发送get请求</td></tr><tr><td>axios.delete(url [, config])</td><td>发送delete请求</td></tr><tr><td>axios.post(url [, data[, config]])</td><td>发送post请求</td></tr><tr><td>axios.put(url [, data[, config]])</td><td>发送put请求</td></tr></tbody></table><p>我们目前只关注get和post请求，所以在上述的入门案例中，我们可以将get请求代码改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post请求改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,<span class="string">&quot;id=1&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h1><p>后端开发功能的具体流程：</p><ol><li>需求分析：首先我们需要阅读需求文档，分析需求，理解需求。</li><li>接口定义：查询接口文档中关于需求的接口的定义，包括地址，参数，响应数据类型等等</li><li>前后台并行开发：各自按照接口文档进行开发，实现需求</li><li>测试：前后台开发完了，各自按照接口文档进行测试</li><li>前后段联调测试：前段工程请求后端工程，测试功能</li></ol><h2 id="YAPI"><a href="#YAPI" class="headerlink" title="YAPI"></a>YAPI</h2><p>YApi主要提供了2个功能：</p><ul><li>API接口管理：根据需求撰写接口，包括接口的地址，参数，响应等等信息。</li><li>Mock服务：模拟真实接口，生成接口的模拟测试数据，用于前端的测试。</li></ul><p>其官网地址：<a href="http://yapi.smart-xwork.cn/">http://yapi.smart-xwork.cn/</a></p><h1 id="前端开发工程化"><a href="#前端开发工程化" class="headerlink" title="前端开发工程化"></a>前端开发工程化</h1><p>企业开发中更加讲究前端工程化方式的开发，主要包括如下4个特点</p><ul><li>模块化：将js和css等，做成一个个可复用模块</li><li>组件化：我们将UI组件，css样式，js行为封装成一个个的组件，便于管理</li><li>规范化：我们提供一套标准的规范的目录接口和编码规范，所有开发人员遵循这套规范</li><li>自动化：项目的构建，测试，部署全部都是自动完成</li></ul><h2 id="Vue项目"><a href="#Vue项目" class="headerlink" title="Vue项目"></a>Vue项目</h2><p>Vue-cli提供了如下2种方式创建vue项目:</p><ul><li><p>命令行：直接通过命令行方式创建vue项目</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-project01</span><br></pre></td></tr></table></figure></li><li><p>图形化界面：通过命令先进入到图形化界面，然后再进行vue工程的创建</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure></li></ul><p>创建的Vue项目目录结构如下：</p><p><img src="/img/JavaWeb/vue%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="vue项目目录结构"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可</li></ul><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ul><li><p>index.html文件默认引入了入口函数main.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>上述代码中，包括如下几个关键点：</p><ul><li>import: 导入指定文件，并且重新起名。例如上述代码<code>import App from &#39;./App.vue&#39;</code>导入当前目录下得App.vue并且起名为App</li><li>new Vue(): 创建vue对象</li><li>$mount(‘#app’);将vue对象创建的dom对象挂在到id&#x3D;app的这个标签区域中，作用和之前学习的vue对象的le属性一致。</li><li>router:  路由，详细在后面的小节讲解</li><li>render: 主要使用视图的渲染的。</li></ul><p>vue的组件文件包含3个部分：</p><ul><li>template: 模板部分，主要是HTML代码，用来展示页面主体结构的</li><li>script: js代码区域，主要是通过js代码来控制模板的数据来源和行为的</li><li>style: css样式部分，主要通过css样式控制模板的页面效果得</li></ul><h1 id="Vue组件库Element"><a href="#Vue组件库Element" class="headerlink" title="Vue组件库Element"></a>Vue组件库Element</h1><ul><li>ElementUI是一款侧重于V开发的前端框架，主要用于开发美观的页面的。</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li><p>在当前工程目录下安装ElementUI组件库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui@2.15.3 </span><br></pre></td></tr></table></figure></li><li><p>在main.js这个入口js文件中引入ElementUI的组件库，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure></li><li><p>按照vue项目的开发规范，在<strong>src&#x2F;views</strong>目录下创建一个vue组件文件，注意组件名称后缀是.vue，并且在组件文件中编写之前介绍过的基本组件语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>去ElementUI的官网，找到组件库，抄写代码</p></li><li><p>在默认访问的根组件<strong>src&#x2F;App.vue</strong>中引入自定义组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span><br><span class="line">    &lt;element-view&gt;&lt;/element-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ElementView from &#x27;./views/Element/ElementView.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; ElementView &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &quot;message&quot;:&quot;hello world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h1><ul><li><p>前端路由：URL中的hash(#号之后的内容）与组件之间的对应关系</p></li><li><p>安装vue-router插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@3.5.1</span><br></pre></td></tr></table></figure><p><strong>若创建项目时，已勾选了路由功能，则不需要安装</strong></p></li><li><p>在<strong>src&#x2F;router&#x2F;index.js</strong>文件中定义路由表，根据其提供的模板代码进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span>  <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span>  <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/emp&#x27;</span>,  <span class="comment">//地址hash</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;emp&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/EmpView.vue&#x27;</span>)  <span class="comment">//对应的vue组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dept&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;dept&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/DeptView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意需要去掉没有引用的import模块。</p></li><li><p>设置&lt;router-link&gt;和&lt;router-view&gt;</p><ul><li>修改页面（EmpView.vue和DeptView.vue）我们左侧栏的2个按钮为router-link</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu-item index=&quot;1-1&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/dept&quot;&gt;部门管理&lt;/router-link&gt;</span><br><span class="line">&lt;/el-menu-item&gt;</span><br><span class="line">&lt;el-menu-item index=&quot;1-2&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/emp&quot;&gt;员工管理&lt;/router-link&gt;</span><br><span class="line">&lt;/el-menu-item&gt;</span><br></pre></td></tr></table></figure><ul><li>在内容展示区域即App.vue中定义route-view</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span><br><span class="line">    &lt;!-- &lt;element-view&gt;&lt;/element-view&gt; --&gt;</span><br><span class="line">    &lt;!-- &lt;emp-view&gt;&lt;/emp-view&gt; --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// import EmpView  &#x27;./views/tlias/EmpView.vue&#x27;</span><br><span class="line">// import ElementView  &#x27;./views/Element/ElementView.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &quot;message&quot;:&quot;hello world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在路由配置中&#x2F;对应的路由组件设置默认访问页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/emp&#x27;,</span><br><span class="line">    name: &#x27;emp&#x27;,</span><br><span class="line">    component:  () =&gt; import(&#x27;../views/tlias/EmpView.vue&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/dept&#x27;,</span><br><span class="line">    name: &#x27;dept&#x27;,</span><br><span class="line">    component: () =&gt; import(&#x27;../views/tlias/DeptView.vue&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    redirect:&#x27;/emp&#x27; //表示重定向到/emp即可</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h1 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h1><p>主要分为2步：</p><ol><li>前端工程打包</li><li>通过nginx服务器发布前端工程</li></ol><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ul><li>通过VS Code的NPM脚本中提供的build按钮来完成，会在工程目录下生成一个dist目录，用于存放需要发布的前端资源</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li>nginx: Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，在各大型互联网公司都有非常广泛的使用。</li><li>niginx在windows中的安装是比较方便的，将nginx-1.22.0.zip压缩文件拷贝到<strong>无中文的目录下</strong>，直接解压</li><li>如果要发布，直接将资源放入到html目录中</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript复习</title>
      <link href="/2024/10/03/JavaScript%E5%A4%8D%E4%B9%A0/"/>
      <url>/2024/10/03/JavaScript%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该内容属于后端为与前端交互，所需的一部分前端知识</p></blockquote><h1 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h1><p><strong>第一种方式：</strong>内部脚本，将JS代码定义在HTML页面中</p><ul><li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;</li><li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li></ul><p><strong>第二种方式：</strong>外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p><ul><li>外部JS文件中，只包含JS代码，不包含&amp;ltscript&gt;标签</li><li>引入外部js的&lt;script&gt;标签，必须是双标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><ul><li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p></li><li><p>每行结尾的分号可有可无</p></li><li><p>大括号表示代码块</p></li><li><p>注释：</p><ul><li><p>单行注释：&#x2F;&#x2F; 注释内容</p></li><li><p>多行注释：&#x2F;* 注释内容 *&#x2F;</p></li></ul></li></ul><h2 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h2><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td>window.alert()</td><td>警告框</td></tr><tr><td>document.write()</td><td>在HTML 输出内容</td></tr><tr><td>console.log()</td><td>写入浏览器控制台</td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><table><thead><tr><th>关键字</th><th>解释</th><th>注意</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td><td>声明的变量可以接受任何数据类型的值；作用域比较大, 全局变量；可以重复定义</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td><td>用法类似于 var，但是所声明的变量，只在 let关键字所在的代码块内有效，且不允许重复声明</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td><td></td></tr></tbody></table><ul><li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><h2 id="数据类型和运算符"><a href="#数据类型和运算符" class="headerlink" title="数据类型和运算符"></a>数据类型和运算符</h2><ul><li>js中的数据类型分为 ：原始类型 和 引用类型</li><li>typeof函数可以返回变量的数据类型</li></ul><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN(Not a Number)）</td></tr><tr><td>string</td><td>字符串，单双引皆可</td></tr><tr><td>boolean</td><td>布尔。true，false</td></tr><tr><td>null</td><td>对象为空</td></tr><tr><td>undefined</td><td>当声明的变量未初始化时，该变量的默认值是 undefined</td></tr></tbody></table><ul><li><p>js中的运算规则绝大多数和java中一致，这里只提示不同处</p></li><li><p>js中的=&#x3D;和&#x3D;&#x3D;&#x3D;是有区别的。</p><ul><li>=&#x3D;：只比较值是否相等，不区分数据类型，哪怕类型不一致，&#x3D;&#x3D;也会自动转换类型进行值得比较</li><li>&#x3D;&#x3D;&#x3D;：不光比较值，还要比较类型，如果类型不一致，直接返回false</li></ul></li><li><p>有时候涉及到数值计算，还是需要进行类型转换，parseInt()函数来进行将其他类型转换成数值类型</p></li><li><p>0,null,undefined,””,NaN理解成false,反之理解成true</p></li></ul><table><thead><tr><th>运算规则</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符</td><td>+ , - , * , &#x2F; , % , ++ , –</td></tr><tr><td>赋值运算符</td><td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td></tr><tr><td>比较运算符</td><td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; , || , !</td></tr><tr><td>三元运算符</td><td>条件表达式 ? true_value: false_value</td></tr></tbody></table><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><p>在java中为了提高代码的复用性，可以使用方法。同样，在JavaScript中可以使用函数来完成相同的事</p></li><li><p>定义方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数<span class="number">1</span>,参数<span class="number">2.</span>.)&#123;</span><br><span class="line">    <span class="comment">//要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="keyword">function</span> (<span class="params">参数<span class="number">1</span>,参数<span class="number">2.</span>.</span>)&#123;   </span><br><span class="line"><span class="comment">//要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>JavaScript对象主要可分为三大类：<ul><li>基本对象，主要学习Array和JSON和String</li><li>BOM对象，和浏览器相关的几个对象</li><li>DOM对象，JavaScript中将html的每一个标签都封装成一个对象</li></ul></li></ul><h2 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h2><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li><p>JavaScript中数组相当于java中的集合，数组的长度是可以变化的，数组中可以存储任意数据类型的值</p></li><li><p>定义方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">Array</span>(元素列表); </span><br></pre></td></tr></table></figure></li><li><p>定义方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = [ 元素列表 ]; </span><br></pre></td></tr></table></figure></li><li><p>通过索引来获取数组中的值:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义数组</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取数组中的值，索引从0开始计数</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Array对象属性与方法"><a href="#Array对象属性与方法" class="headerlink" title="Array对象属性与方法"></a>Array对象属性与方法</h3><p><strong>属性：</strong></p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设置或返回数组中元素的数量。</td></tr></tbody></table><p>遍历代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法：</strong></p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">forEach()</td><td align="left">遍历数组中的每个有值得元素，并调用一次传入的函数</td></tr><tr><td align="left">push()</td><td align="left">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="left">splice()</td><td align="left">从数组中删除元素</td></tr></tbody></table><p>forEach()函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e是形参，接受的是数组遍历时的值</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>splice()函数：</p><ul><li><p>函数中填入2个参数。</p><ul><li><p>参数1：表示从哪个索引位置删除</p></li><li><p>参数2：表示删除元素的个数</p></li></ul></li></ul><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;…&quot;</span>) ; <span class="comment">//方式一</span></span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="string">&quot;…&quot;</span> ; <span class="comment">//方式二</span></span><br></pre></td></tr></table></figure><h3 id="String对象属性与方法"><a href="#String对象属性与方法" class="headerlink" title="String对象属性与方法"></a>String对象属性与方法</h3><p><strong>属性：</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度。</td></tr></tbody></table><p><strong>方法：</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>str.charAt(num)</td><td>返回在指定位置的字符。</td></tr><tr><td>str.indexOf(“str”)</td><td>检索指定内容在字符串中的索引位置。</td></tr><tr><td>str.trim()</td><td>去除字符串两边的空格</td></tr><tr><td>str.substring(start, end)</td><td>提取字符串中两个指定的索引号之间的字符。[start, end)</td></tr></tbody></table><h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">    属性名<span class="number">1</span>: 属性值<span class="number">1</span>, </span><br><span class="line">    属性名<span class="number">2</span>: 属性值<span class="number">2</span>,</span><br><span class="line">    属性名<span class="number">3</span>: 属性值<span class="number">3</span>,</span><br><span class="line">    函数名称: <span class="keyword">function</span>(<span class="params">形参列表</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用属性</span></span><br><span class="line">对象名.属性名</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">对象名.函数名()</span><br></pre></td></tr></table></figure><h4 id="JSON对象-1"><a href="#JSON对象-1" class="headerlink" title="JSON对象"></a>JSON对象</h4><ul><li><strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>:value,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>:value,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>:value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key必须使用引号并且是双引号标记，value可以是任意数据类型</span></span><br></pre></td></tr></table></figure><ul><li><p>用来作为前后台交互的数据载体，描述java中的对象</p></li><li><p>定义：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="string">&#x27;&#123;&quot;key1&quot;:value1, &quot;key2&quot;:value2&#125;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> userStr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;Jerry&quot;,&quot;age&quot;:18, &quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">//value的数据类型为：</span></span><br><span class="line"><span class="comment">//数字（整数或浮点数）</span></span><br><span class="line"><span class="comment">//字符串（在双引号中）</span></span><br><span class="line"><span class="comment">//逻辑值（true或false）</span></span><br><span class="line"><span class="comment">//数组（在方括号中）</span></span><br><span class="line"><span class="comment">//对象（在花括号中）</span></span><br><span class="line"><span class="comment">//null</span></span><br></pre></td></tr></table></figure><ul><li>JSON字符串转化为JS对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(userStr);</span><br><span class="line"><span class="title function_">alert</span>(jsObj.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><ul><li>JS对象转为JSON字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsObj);</span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li>Browser Object Model,翻译过来是浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装成了对象。我们要操作浏览器的部分功能，可以通过操作BOM对象的相关属性或者函数来完成。</li></ul><p>BOM中提供了如下5个对象：</p><table><thead><tr><th align="left">对象名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Window</td><td align="left">浏览器窗口对象</td></tr><tr><td align="left">Navigator</td><td align="left">浏览器对象</td></tr><tr><td align="left">Screen</td><td align="left">屏幕对象</td></tr><tr><td align="left">History</td><td align="left">历史记录对象</td></tr><tr><td align="left">Location</td><td align="left">地址栏对象</td></tr></tbody></table><h4 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h4><p>获取：直接使用，对于window对象的方法和属性，我们可以省略window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>用于获取history对象</td></tr><tr><td>location</td><td>用于获取location对象</td></tr><tr><td>Navigator</td><td>用于获取Navigator对象</td></tr><tr><td>Screen</td><td>用于获取Screen对象</td></tr></tbody></table><p>方法：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td>comfirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><h4 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h4><ul><li>常用的是href属性，用于获取或者设置浏览器的地址信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取浏览器地址栏信息</span></span><br><span class="line"><span class="title function_">alert</span>(location.<span class="property">href</span>);</span><br><span class="line"><span class="comment">//设置浏览器地址栏信息</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;https://www.itcast.cn&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><ul><li><p>Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象</p></li><li><p>封装的对象分为</p><ul><li><p>Document：整个文档对象</p></li><li><p>Element：元素对象</p></li><li><p>Attribute：属性对象</p></li><li><p>Text：文本对象</p></li><li><p>Comment：注释对象</p></li></ul></li></ul><p>document对象提供的用于获取Element元素对象的api如下表所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementsByTagName()</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName()</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li><p>方式1：通过html标签中的事件属性进行绑定onclick&#x3D;”on()”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>方式2：通过DOM中Element元素获取事件属性进行绑定id&#x3D;”btn2”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;按钮2被点击了...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h2><p>比较常用的事件属性：</p><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库·基础</title>
      <link href="/2024/10/03/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/03/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对之前的MySQL知识进行速览</p><p>请配合之前的<a href="https://cloris.zeabur.app/2024/09/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7MySQL/">相关笔记</a>使用</p></blockquote><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><table><thead><tr><th>名称</th><th>全称</th><th>简称</th></tr></thead><tbody><tr><td>数据库</td><td>存储数据的仓库，将数据有组织第进行存储</td><td>DataBase（DB）</td></tr><tr><td>数据库管理系统</td><td>操纵和管理数据的大型软件</td><td>DataBase  Management  System（DBMS）</br> 即，MySQL数据库</td></tr><tr><td>SQL</td><td>操作<strong>关系型数据库</strong>的编程语言，定义了操作的统一标准</td><td>Structured Query Language（SQL）</td></tr></tbody></table><ul><li><p>SQL  —操作—&gt;  DBMS  —操作—&gt;  DB</p></li><li><p>关系型数据库：</p><ul><li>建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库</li></ul></li><li><p>MySQL数据库数据模型：</p></li></ul><p><img src="/img/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.jpg" alt="数据模型"></p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ol><li>SQL语句可以单行或多行书写，以分号结尾。</li><li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</li><li>注释：<br>单行注释：<code>--</code> 注释内容 或 <code>#</code>注释内容<br>多行注释：<code>/* 注释内容 */</code></li></ol><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><ul><li>DDL：数据定义语句，用以定义数据库对象（create 表，库，字段…）</li><li>DML：数据操作语句，对数据库表中的数据进行增删改（增加insert，修改update，删除delete）</li><li>DQL：数据查询语句，查询数据库表的记录（select）</li><li>DCL：数据控制语句，创建数据库用户、控制数据库访问权限（管理数据库，如用户权限grant revoke）</li></ul><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="DDL数据库操作"><a href="#DDL数据库操作" class="headerlink" title="DDL数据库操作"></a>DDL数据库操作</h3><ol><li><p>查询所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p>查询当前数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure></li><li><p>创建数据库(中括号表示可选)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database [ if not exists 若存在则不创建] 数据库名 [ default charset 指定字符集 ] [ collate 排序规则 ];</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database [ if exists 若存在则删除] 数据库名 ;</span><br></pre></td></tr></table></figure></li><li><p>切换数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名 ;</span><br></pre></td></tr></table></figure></li></ol><h3 id="DDL表操作"><a href="#DDL表操作" class="headerlink" title="DDL表操作"></a>DDL表操作</h3><ol><li><p>查询当前数据库所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名 ;</span><br></pre></td></tr></table></figure><p>查询指定表的建表语句（能看到详细信息）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名 ;</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">    字段1 字段1类型 [COMMENT 字段1注释 ],</span><br><span class="line">    字段2 字段2类型 [COMMENT 字段2注释 ],</span><br><span class="line">    字段3 字段3类型 [COMMENT 字段3注释 ],</span><br><span class="line">    ......</span><br><span class="line">    字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br><span class="line"># 演示</span><br><span class="line">create table tb_user(</span><br><span class="line">    id int comment &#x27;编号&#x27;,</span><br><span class="line">    name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class="line">    age int comment &#x27;年龄&#x27;,</span><br><span class="line">    gender varchar(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li><p>MySQL中的数据类型主要分为三类：数值类型、字符串类型、日期时间类型。</p></li><li><p>有符号signed：允许出现负数时的取值范围；无符号unsigned：不允许出现负数时的取值范围</p></li><li><p>M：精度；D：标度</p></li></ul><p><img src="/img/%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B.png" alt="数值类型"></p><p><img src="/img/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B.png" alt="字符串类型"></p><p><img src="/img/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B.png" alt="日期时间类型"></p><ul><li><p>剩下请参考<a href="https://cloris.zeabur.app/2024/09/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7MySQL/">相关笔记</a></p></li><li><p>演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">    id int comment &#x27;编号&#x27;,</span><br><span class="line">    workno varchar(10) comment &#x27;工号&#x27;,</span><br><span class="line">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">    gender char(1) comment &#x27;性别&#x27;,</span><br><span class="line">    age tinyint unsigned comment &#x27;年龄&#x27;,# 使用无符号</span><br><span class="line">    idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class="line">    entrydate date comment &#x27;入职时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>修改</p><p>添加字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p>修改数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><p>删除字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [ IF EXISTS ] 表名;</span><br></pre></td></tr></table></figure><p>删除指定表并重新创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure></li></ol><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><ol><li><p>添加数据INSERT</p><p>给指定字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</span><br></pre></td></tr></table></figure><p>给全部字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES (值1, 值2, ...);</span><br></pre></td></tr></table></figure><p>批量添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 指定字段，多行</span><br><span class="line">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值</span><br><span class="line">1, 值2, ...) ;</span><br><span class="line"># 所有字段，多行</span><br><span class="line">INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...) ;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul></li><li><p>修改数据UPDATE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ] ;</span><br></pre></td></tr></table></figure></li><li><p>删除数据DELECT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 [ WHERE 条件 ] ;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数<br>据。</li><li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即<br>可)。</li><li>当进行删除全部数据操作时，datagrip会提示我们，询问是否确认删除，我们直接点击<br>Execute即可。</li></ul></li></ol><h2 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h2><ul><li><p>关键字：SELECT</p></li><li><p>查询操作的频次是要远高于增删改</p></li><li><p>在查询的过程中，可能还会涉及到条件、排序、分页等操作。</p></li><li><p>语法结构及【执行顺序】：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT# 【5】</span><br><span class="line">    字段列表</span><br><span class="line">FROM# 【1】</span><br><span class="line">    表名列表</span><br><span class="line">WHERE# 【2】</span><br><span class="line">    条件列表</span><br><span class="line">GROUP BY# 【3】</span><br><span class="line">    分组字段列表</span><br><span class="line">HAVING# 【4】</span><br><span class="line">    分组后条件列表</span><br><span class="line">ORDER BY# 【6】</span><br><span class="line">    排序字段列表</span><br><span class="line">LIMIT# 【7】</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure></li></ul><p>###基本查询（不带任何条件）</p><ol><li><p>查询多个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1, 字段2, 字段3 ... FROM 表名 ;</span><br><span class="line">SELECT * FROM 表名 ;</span><br><span class="line"># * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）</span><br></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名;</span><br><span class="line">SELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名;</span><br><span class="line"># 一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段</span><br></pre></td></tr></table></figure></li><li><p>去除重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure></li></ol><h3 id="条件查询（WHERE）"><a href="#条件查询（WHERE）" class="headerlink" title="条件查询（WHERE）"></a>条件查询（WHERE）</h3><ul><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表 ;</span><br></pre></td></tr></table></figure></li><li><p>条件</p><p>常见的比较运算符：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围之内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_ 匹配单个字符，% 匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><p>常见的逻辑运算符：</p><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或</td><td></td></tr><tr><td>NOT 或！</td><td>非 ， 不是</td></tr></tbody></table></li></ul><h3 id="聚合函数（count、max、min、avg、sum）"><a href="#聚合函数（count、max、min、avg、sum）" class="headerlink" title="聚合函数（count、max、min、avg、sum）"></a>聚合函数（count、max、min、avg、sum）</h3><ul><li><p>将一列数据作为一个整体，进行纵向计算</p></li><li><p>常见的聚合函数:</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></li><li><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 聚合函数(字段列表) FROM 表名 ;</span><br><span class="line"># NULL值是不参与所有聚合函数运算的</span><br></pre></td></tr></table></figure></li></ul><h3 id="分组查询（group-by）"><a href="#分组查询（group-by）" class="headerlink" title="分组查询（group by）"></a>分组查询（group by）</h3><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后过滤条件 ];</span><br></pre></td></tr></table></figure></li><li><p>where与having区别</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul></li><li><p>注意：</p><ul><li>在执行 <code>GROUP BY</code> 查询时，所有选择列（SELECT 列）要么出现在 <code>GROUP BY</code> 子句中，要么包含在聚合函数中</li><li>执行顺序: where &gt; 聚合函数 &gt; having 。</li><li>支持多字段分组, 具体语法为 : group by columnA, columnB</li></ul></li></ul><h3 id="排序查询（order-by）"><a href="#排序查询（order-by）" class="headerlink" title="排序查询（order by）"></a>排序查询（order by）</h3><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ;</span><br></pre></td></tr></table></figure></li><li><p>排序方式：</p><ul><li>ASC : 升序(默认值)</li><li>DESC: 降序</li></ul></li><li><p>注意：</p><ul><li>如果是升序, 可以不指定排序方式ASC ;</li><li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</li></ul></li></ul><h3 id="分页查询（limit）"><a href="#分页查询（limit）" class="headerlink" title="分页查询（limit）"></a>分页查询（limit）</h3><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数。</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 记录数。</li></ul></li></ul><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><ol><li><p>查询用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select * from user;</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; ;</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure></li></ol><ul><li>注意：<ul><li>在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</li><li>主机名可以使用 % 通配。</li><li>这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</li></ul></li></ul><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><ul><li><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table></li></ul><ol><li><p>查询权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>撤销权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure></li></ol><ul><li>注意：<ul><li>多个权限之间，使用逗号分隔</li><li>授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>函数是指一段可以直接被另一段程序调用的程序或代码</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th align="left">函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">CONCAT(s1,s2,…sn)</td><td align="left">字符串拼接，将s1，s2，… sn拼接成一个字符串</td></tr><tr><td align="left">LOWER(str)</td><td align="left">将字符串str全部转为小写</td></tr><tr><td align="left">UPPER(str)</td><td align="left">将字符串str全部转为大写</td></tr><tr><td align="left">LPAD(str,n,pad)</td><td align="left">左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td align="left">RPAD(str,n,pad)</td><td align="left">右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td align="left">TRIM(str)</td><td align="left">去掉字符串头部和尾部的空格</td></tr><tr><td align="left">SUBSTRING(str,start,len)</td><td align="left">返回从字符串str从start（从1起）位置起的len个长度的字符串</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 函数(参数);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回起始时间date1 和 结束时间date2之间的天数（d1-d2）</td></tr></tbody></table><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><ul><li>实现条件筛选</li></ul><table><thead><tr><th align="left">函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">IF(value,t,f)</td><td align="left">如果value为true,则返回t,否则返回f</td></tr><tr><td align="left">IFNULL(valuel,value2)</td><td align="left">如果valuel不为空,返回valuel,否则返回value2</td></tr><tr><td align="left">CASE WHEN [ val1 ] THEN [ res1] … ELSE [ default ] END</td><td align="left">如果vall为true,返回resl,…否则返回default默认值</td></tr><tr><td align="left">CASE  [ expr ]  WHEN  [ val1 ]  THEN  [ res1] … ELSE  [ default ]  END</td><td align="left">如果expr的值等于vall,返回resl,…否则返回default默认值</td></tr></tbody></table><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>约束是作用于表中字段的规则，用于限制存储在表中的数据</li><li>目的：保证数据库中数据的正确、有效性和完整性</li><li>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</li></ul><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT  ’  ‘</td></tr><tr><td>检查约束（8.0.16版本之后）</td><td>保证字段值满足某一个条件</td><td>CHECK（）</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ul><li><p><strong>主表（主键表）</strong>：包含主键的表，主键是用于<strong>唯一标识</strong>表中每一行的列或列组合。</p></li><li><p><strong>从表（外键表）</strong>：包含外键的表，外键是指向另一个表（主表）的主键的列。</p></li></ul><ol><li><p>添加外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建表时添加</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [CONSTRAINT] [外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表 (主表列名)</span><br><span class="line">);</span><br><span class="line"># 表创建后额外增加</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表 (主表列名) ;</span><br></pre></td></tr></table></figure></li><li><p>删除外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h3><ul><li>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除&#x2F;更新行为</li></ul><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。（与 RESTRICT 一致）默认行为</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。（与 NO ACTION 一致）默认行为</td></tr><tr><td>CASCADE</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录。</td></tr><tr><td>SET NULL</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）。</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键列设置成一个默认的值（Innodb不支持）</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES</span><br><span class="line">主表名 (主表字段名) ON UPDATE CASCADE ON DELETE CASCADE; # 设置CASCADE</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多(多对一)<ul><li>案例: 部门 与 员工的关系</li><li>关系: 一个部门对应多个员工，一个员工对应一个部门</li><li>实现: 在<strong>多的一方</strong>建立外键，指向一的一方的主键</li></ul></li><li>多对多<ul><li>案例: 学生 与 课程的关系</li><li>关系: 一个学生可以选修多门课程，一门课程也可以供多个学生选择</li><li>实现: 建立第三张<strong>中间表</strong>，中间表至少包含两个外键，分别关联两方主键</li></ul></li><li>一对一<ul><li>案例: 用户 与 用户详情的关系</li><li>关系: 一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</li><li>实现: 在<strong>任意一方</strong>加入外键，关联另外一方的主键，并且设置外键为<strong>唯一</strong>的(UNIQUE)</li></ul></li></ul><h3 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h3><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from 表1, 表2; # 得笛卡尔集</span><br><span class="line">select * from 表1, 表2, ... WHERE 筛选条件...;</span><br></pre></td></tr></table></figure></li><li><p>多表查询分类</p><ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li></ul></li></ul><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><ul><li><p>隐式内连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 , 表2 WHERE 条件 ... ;</span><br></pre></td></tr></table></figure></li><li><p>显式内连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ... ;</span><br></pre></td></tr></table></figure></li></ul><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><ul><li><p>左外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ... ;</span><br><span class="line"># 相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据</span><br><span class="line"># 示例</span><br><span class="line">SELECT emp.name, age, dept.name FROM emp LEFT JOIN dept ON emp.dept_id = dept.id WHERE age &gt; 40;</span><br><span class="line"># where会在完全展示左表得基础上筛选，此处不能用and</span><br></pre></td></tr></table></figure></li><li><p>右外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ... ;</span><br><span class="line"># 相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中，表结构的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</li></ul></li></ul><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><ul><li><p>自己连接自己，也就是把一张表连接查询多次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ... ;</span><br><span class="line"># 对于自连接查询，可以是内连接查询，也可以是外连接查询</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底是哪一张表的字段。</li></ul></li></ul><h3 id="联合查询-union，union-all"><a href="#联合查询-union，union-all" class="headerlink" title="联合查询-union，union all"></a>联合查询-union，union all</h3><ul><li><p>将多次查询得结果合并，形成一个新的查询结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ ALL ]</span><br><span class="line">SELECT 字段列表 FROM 表B ....;</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</li><li>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重。</li></ul></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li><p>SQL语句中嵌套SELECT语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2 );</span><br><span class="line"># 子查询外部的语句可以是INSERT / UPDATE / DELETE / SELECT 的任何一个</span><br><span class="line"># 内部语句用于查询具体的值</span><br></pre></td></tr></table></figure></li><li><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询(子查询结果为一列)</li><li>行子查询(子查询结果为一行)</li><li>表子查询(子查询结果为多行多列)</li></ul></li><li><p>根据子查询位置，分为：</p><ul><li>WHERE之后</li><li>FROM之后</li><li>SELECT之后</li></ul></li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><ul><li><p>常用的操作符：&#x3D;   &lt;&gt;   &gt;   &gt;&#x3D;   &lt;   &lt;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where entrydate &gt; (select entrydate from emp where name = &#x27;方东白&#x27;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><ul><li><p>常用的操作符：</p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">在指定的集合范围之内，多选一</td></tr><tr><td align="center">NOT IN</td><td align="center">不在指定的集合范围之内</td></tr><tr><td align="center">ANY</td><td align="center">子查询返回列表中，有任意一个满足即可</td></tr><tr><td align="center">SOME</td><td align="center">与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td align="center">ALL</td><td align="center">子查询返回列表的所有值都必须满足</td></tr></tbody></table></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where salary &gt; any ( select salary from emp where dept_id = (select id from dept where name = &#x27;研发部&#x27;) );</span><br></pre></td></tr></table></figure></li></ul><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><ul><li><p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where (salary,managerid) = (select salary, managerid from emp where name = &#x27;张无忌&#x27;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><ul><li><p>常用的操作符：IN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.*, d.* from (select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;) e left join dept d on e.dept_id = d.id ;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系<br>统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</li><li>默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐式的提交事务。</li></ul><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ol><li><p>查看&#x2F;设置事务提交方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@autocommit ;</span><br><span class="line">SET @@autocommit = 0 ;</span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure></li></ol><ul><li>注意：<ul><li>上述的这种方式，我们是修改了事务的自动提交行为, 把默认的自动提交修改为了手动提交, 此时我们执行的DML语句都不会提交, 需要手动的执行commit进行提交。</li></ul></li></ul><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ol><li><p>开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION 或 BEGIN ;</span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></li><li><p>回滚事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure></li></ol><h3 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a>事务四大特性ACID</h3><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><ol><li>赃读：一个事务读到另外一个事务还没有提交的数据。</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 “幻影”</li></ol><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ol><li><p>查看事务的隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br></pre></td></tr></table></figure></li><li><p>设置事务的隔离级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123; READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>注意：事务隔离级别越高，数据越安全，但是性能越低。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·Java8新特性</title>
      <link href="/2024/09/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2024/09/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<ul><li>Java8（又称jdk1.8）是Java语言开发的一个主要版本，被看成是Java5以来最具革命性的版本，为Java带来更多新新特性。</li><li>速度更快，代码更少（Lanbda表达式），强大的Stream API，便于并行，最大化减少空指针异常（Optional类）。</li></ul><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><ul><li>Lanbda是一个匿名函数，Lanbda表达式可以理解为一段可传递代码（把代码像数据一样传递），使用它可以使代码更简洁灵活</li><li>Java 中Lambda 的本质：作为函数式<strong>接口的实例</strong></li></ul><h3 id="Lambda表达式的使用"><a href="#Lambda表达式的使用" class="headerlink" title="Lambda表达式的使用"></a>Lambda表达式的使用</h3><ul><li><p>举例：<code>(o1,o1)  -&gt; Integer.compare(o1,o2);</code></p></li><li><p>格式：</p><ul><li><code>-&gt;</code>：Lanbda操作符&#x2F;箭头操作符</li><li>左边：Lanbda形参列表，也就是原来接口中抽象方法的形参列表。参数类型可省略（类型推断），若只有一个参数可省小括号</li><li>右边：Lanbda体，也就是重写的抽象方法的方法体。应使用一对大括号包裹，若只有一条执行语句（包括return），可省大括号与return</li></ul></li><li><p>6种使用情况</p><ol><li><p>语法格式一：无参，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原代码</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;格式一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//改为Lanbda表达式</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;格式一&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>语法格式二：Lambda需要一个参数，但是没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (String str) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;格式二&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>语法格式三：有参，无返回值。但参数的数据类型可由编译器推断得出，即 “类型推断”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (str) -&gt; &#123;<span class="comment">//只是在格式二的基础上省略数据类型</span></span><br><span class="line">    System.out.println(<span class="string">&quot;格式三&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>语法格式四：有参，无返回值。但只需要一个参数，参数的小括号可省</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = str -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;格式四&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>多个参数，多条执行语句，可以有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; comp = (o1, o2) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;格式五&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>只有一条执行语句时，<code>&#123; &#125;</code> 和 <code>return</code> 都能省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; comp = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="函数式（Functional）接口"><a href="#函数式（Functional）接口" class="headerlink" title="函数式（Functional）接口"></a>函数式（Functional）接口</h2><ul><li>函数式接口：该接口只声明了<strong>一个</strong>抽象方法，可自定义一个函数式接口</li><li>可以通过Lambda表达式来创建该接口的<strong>对象</strong>，以前使用<strong>匿名实现类</strong>表示的都可用Lambda表达式来写</li><li>可以在一个接口上使用 <code>@FunctionalInterface</code> 注解，以检查其是否是一个函数式接口</li><li>在<code>java.util.function</code>包下定义了Java8丰富的函数式接口</li></ul><h3 id="四大核心函数式接口"><a href="#四大核心函数式接口" class="headerlink" title="四大核心函数式接口"></a>四大核心函数式接口</h3><table><thead><tr><th align="center">函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th><th>抽象方法</th></tr></thead><tbody><tr><td align="center"><code>Consumer&lt;T&gt;</code>：<br/>消费型接口</td><td>T</td><td>void</td><td>对类型 T 的对象进行操作</td><td><code>void accept(T t)</code></td></tr><tr><td align="center"><code>Supplier&lt;T&gt;</code>：<br/>供给型接口</td><td>无</td><td>T</td><td>返回类型 T 的对象</td><td><code>T get()</code></td></tr><tr><td align="center"><code>Function&lt;T, R&gt;</code>：<br/>函数型接口</td><td>T</td><td>R</td><td>对类型 T 的对象进行操作，返回类型 R 的对象</td><td><code>R apply(T t)</code></td></tr><tr><td align="center"><code>Predicate&lt;T&gt;</code>：<br/>断定型接口</td><td>T</td><td>boolean</td><td>确定类型 T 的对象是否满足约束</td><td><code>boolean test(T t)</code></td></tr></tbody></table><h3 id="其它接口"><a href="#其它接口" class="headerlink" title="其它接口"></a>其它接口</h3><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th><th>抽象方法</th></tr></thead><tbody><tr><td><code>BiFunction&lt;T, U, R&gt;</code></td><td>T、U</td><td>R</td><td>对类型 T、U 的对象进行操作，返回类型 R 的对象</td><td><code>R apply(T t, U u)</code></td></tr><tr><td><code>UnaryOperator&lt;T&gt;</code>（<code>Function</code> 子接口）</td><td>T</td><td>T</td><td>对类型 T 的对象进行一元运算，返回类型 T 的对象</td><td><code>T apply(T t)</code></td></tr><tr><td><code>BinaryOperator&lt;T&gt;</code>（<code>BiFunction</code> 子接口）</td><td>T、T</td><td>T</td><td>对类型 T 的对象进行二元运算，返回类型 T 的对象</td><td><code>T apply(T t1, T t2)</code></td></tr><tr><td><code>BiConsumer&lt;T, U&gt;</code></td><td>T、U</td><td>void</td><td>对类型 T、U 的对象进行操作</td><td><code>void accept(T t, U u)</code></td></tr><tr><td><code>BiPredicate&lt;T, U&gt;</code></td><td>T、U</td><td>boolean</td><td>确定类型 T、U 的对象是否满足约束</td><td><code>boolean test(T t, U u)</code></td></tr><tr><td><code>ToIntFunction&lt;T&gt;</code>、<code>ToLongFunction&lt;T&gt;</code>、<code>ToDoubleFunction&lt;T&gt;</code></td><td>T</td><td>int &#x2F; long &#x2F; double</td><td>计算 int &#x2F; long &#x2F;double 值的函数</td><td><code>int apply(T t)</code></td></tr><tr><td><code>IntFunction&lt;T&gt;</code>、<code>LongFunction&lt;T&gt;</code>、<code>DoubleFunction&lt;T&gt;</code></td><td>int &#x2F; long &#x2F; double</td><td>T</td><td>参数是 int &#x2F; long &#x2F;double 的函数</td><td><code>T applt(int n)</code></td></tr></tbody></table><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><h3 id="方法引用介绍"><a href="#方法引用介绍" class="headerlink" title="方法引用介绍"></a>方法引用介绍</h3><ul><li>使用情境：当要传递给Lambda体的操作，已经有实现的方法，可以使用方法引用</li><li>方法引用可以看作Lambda表达式深层次的表达，可以说方法引用就是Lambda表达式，也就是函数式接口的一个实例。通过方法名指向一个方法，可以认为是Lambda表达式的一个语法糖</li><li>要求：实现接口的抽象方法的参数列表和返回值，与引用方法的参数列表和返回值一致</li><li>使用格式：类（或对象，即调用者） : : 方法名</li></ul><h3 id="方法引用的三种情况"><a href="#方法引用的三种情况" class="headerlink" title="方法引用的三种情况"></a>方法引用的三种情况</h3><ol><li><p>对象 : : 非静态方法（实例方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Consumer中的void accept(T t)与</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)的参数列表与返回值一致</span></span><br><span class="line">Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class="line">con1.accept(<span class="string">&quot;Cloris&quot;</span>)</span><br><span class="line"><span class="comment">//改为方法引用</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">Consumer&lt;String&gt; con1 = ps::println;</span><br></pre></td></tr></table></figure></li><li><p>类 : : 静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Comparator中的int compare(T t1, T t2)与</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1, T t2)的参数列表与返回值一致</span></span><br><span class="line">Comparator&lt;Integer&gt; com2 = (t1, t2) -&gt; Integer.compare(t1, t2);</span><br><span class="line">System.out.println(com2.compare(<span class="number">21</span>, <span class="number">22</span>));</span><br><span class="line"><span class="comment">//改为方法引用</span></span><br><span class="line">Comparator&lt;Integer&gt; com2 = Integer :: compare;</span><br><span class="line">System.out.println(com2.compare(<span class="number">21</span>, <span class="number">22</span>));</span><br></pre></td></tr></table></figure></li><li><p>类 : : 非静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Comparator中的int compare(T t1, T t2)</span></span><br><span class="line"><span class="comment">//String中的int t1.compareTo(t2)第一个参数作为调用者出现</span></span><br><span class="line">Comparator&lt;String&gt; com3 = (s1, s2) -&gt; t1.compareTo(t2);</span><br><span class="line">System.out.println(com3.compare(<span class="string">&quot;21&quot;</span>, <span class="string">&quot;22&quot;</span>));</span><br><span class="line"><span class="comment">//改为方法引用</span></span><br><span class="line">Comparator&lt;String&gt; com3 = String :: compareTo;</span><br><span class="line">System.out.println(com3.compare(<span class="string">&quot;21&quot;</span>, <span class="string">&quot;22&quot;</span>));</span><br></pre></td></tr></table></figure></li></ol><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><ul><li>实现接口的抽象方法的参数列表与构造器参数列表一致，返回类型与构造器所在类一致</li></ul><ol><li><p>无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Supplier中的 T get()无需参数</span></span><br><span class="line"><span class="comment">//Employee（自定义类）中的无参构造器Employee()看作返回对象的方法</span></span><br><span class="line"><span class="comment">//参数列表、返回类型一致</span></span><br><span class="line">Supplier&lt;Employee&gt; emp1 = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Employee&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改为方法引用</span></span><br><span class="line">Supplier&lt;Employee&gt; emp1 = () -&gt; Employee :: <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"><span class="comment">//改为构造器引用</span></span><br><span class="line">Supplier&lt;Employee&gt; emp1 = Employee :: <span class="keyword">new</span>；</span><br></pre></td></tr></table></figure></li><li><p>有参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">Function&lt;String, Integer, Employee&gt; emp2 = </span><br><span class="line">    (name, age) -&gt; Employee :: <span class="keyword">new</span> <span class="title class_">Employee</span>(name, age);</span><br><span class="line"><span class="comment">//构造器引用</span></span><br><span class="line">Function&lt;String, Integer, Employee&gt; emp2 = Employee :: <span class="keyword">new</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h3><ul><li><p>把数组看成一个类，则其用法与构造器引用相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, <span class="type">char</span>[]&gt; f1 = n -&gt; <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">Function&lt;Integer, <span class="type">char</span>[]&gt; f2 = <span class="type">char</span>[]::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><ul><li>Stream API（<code>java.util.stream</code>）把真正的函数式编程风格引入到 Java 中。这是目前为止对 Java 类库最好的补充。</li><li>Stream 是 Java8 中处理<strong>集合</strong>的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合进行数据操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</li><li>使用Stream API的原因：需要Java处理的，数据源为NoSQL的数据增多</li><li>Stream API 和 Collection 的区别：<ul><li>Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。</li><li>前者主要面向内存，储存于内存。后者主要面向 CPU，通过 CPU 实现计算。</li></ul></li></ul><h3 id="什么是-Stream"><a href="#什么是-Stream" class="headerlink" title="什么是 Stream"></a>什么是 Stream</h3><ul><li>Stream 是数据渠道，用于操作数据源所生成的元素序列</li></ul><ul><li>Stream 自己不会储存元素</li><li>Stream 不会改变源对象。他们会返回一个持有结果的新 Stream</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果时（终止操作）才执行</li></ul><h3 id="Stream操作的三个步骤"><a href="#Stream操作的三个步骤" class="headerlink" title="Stream操作的三个步骤"></a>Stream操作的三个步骤</h3><ol><li><p>创建 Stream：</p><p>根据一个数据源，获取一个流</p></li><li><p>中间操作：</p><p>一个中间操作链，对数据源的数据进行处理</p></li><li><p>终止操作（终端操作）：</p><p>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</p></li></ol><h3 id="创建-Stream"><a href="#创建-Stream" class="headerlink" title="创建 Stream"></a>创建 Stream</h3><ul><li><p>方式一：通过集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//某个集合</span></span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> list.stream();<span class="comment">//返回一个顺序流</span></span><br><span class="line"><span class="type">Stream</span> <span class="variable">stream</span> <span class="operator">=</span> list.parallelStream();<span class="comment">//返回一个并行流</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：通过数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">IntSteam</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">4</span>];<span class="comment">//此处表示一个任意类</span></span><br><span class="line">Stream&lt;Object&gt; stream = Arrays.stream(objs);</span><br></pre></td></tr></table></figure><p>方法的重载形式能够处理对应基本类型的数组</p><ul><li><code>public static IntStream stream(int[] arr)</code></li><li><code>public static LongStream stream(long[] arr)</code></li><li><code>public static DoubleStream stream(double[] arr)</code></li></ul></li><li><p>方式三：通过Stream.of()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>方式四：创建无限流（用于造数据）</p><ul><li><code>public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</code></li><li><code>public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; iterate = Stream.iterate(<span class="number">1</span>, o -&gt; ++o);</span><br><span class="line">Stream&lt;Long&gt; generate = Stream.generate(System::currentTimeMillis);</span><br></pre></td></tr></table></figure></li></ul><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><ul><li>多个中间操作连接起一个流水线。该流水线在触发终止操作前不执行任何处理，终止操作触发时一次性进行全部处理。这个流程也称为 “惰性求值”。</li></ul><h4 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>filter(Predicate P)</code></td><td>接收一个 Lambda，从流中排除某些元素</td></tr><tr><td><code>distinct()</code></td><td>筛选，通过流生成元素的 <code>hashCode()</code> 和 <code>equals()</code> 进行去重</td></tr><tr><td><code>limit(long maxSize)</code></td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><code>skip(long n)</code></td><td>跳过元素，返回一个扔掉了前 n 个元素的流。不足 n 的场合返回空流</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter查询表中薪资大于7000</span></span><br><span class="line">stream.filter(e -&gt; e.getSalary &gt; <span class="number">7000</span>).forEach(System.out::println);<span class="comment">//终止</span></span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>map(Function f)</code></td><td>接收一个函数(映射关系)，将元素转化成其他形式提取信息</td></tr><tr><td><code>flatMap(Function f)</code></td><td>接收一个函数，将每个元素都转换成另一个流</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream.map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>sorted()</code></td><td>产生一个新流，该流按自然顺序排序</td></tr><tr><td><code>sorted(Comparator c)</code></td><td>产生一个新流，该流按自定义的比较器顺序排序</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted((e1, e2) -&gt; &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">ageValue</span> <span class="operator">=</span> Integer.compare(e1.getAge(), e2.getAge());</span><br><span class="line"><span class="keyword">if</span>(ageValue != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> ageValue;<span class="comment">//按年龄从小到大</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Double.compare(e1.getSalary(), e2.getSalary());<span class="comment">//按工资从小到大</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).forEach(System.out::println);<span class="comment">//终止</span></span><br></pre></td></tr></table></figure><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><h4 id="匹配和查找"><a href="#匹配和查找" class="headerlink" title="匹配和查找"></a>匹配和查找</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>allMatch(Predicate p)</code></td><td>检查是否匹配全部元素</td></tr><tr><td><code>anyMatch(Predicate p)</code></td><td>检查是否有任意元素匹配</td></tr><tr><td><code>noneMatch(Predicate p)</code></td><td>检查是否任意元素都不匹配</td></tr><tr><td><code>findFirst()</code></td><td>返回第一个元素</td></tr><tr><td><code>findAny()</code></td><td>返回当前流的任意元素</td></tr><tr><td><code>count()</code></td><td>返回当前流的元素个数</td></tr><tr><td><code>max(Comparator c)</code></td><td>返回流中的（比较器顺序下的）最大值</td></tr><tr><td><code>min(Comparator c)</code></td><td>返回流中的（比较器顺序下的）最小值</td></tr><tr><td><code>forEach(Consumer c)</code></td><td>内部迭代</td></tr></tbody></table><h4 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>reduce(T identity, BinaryOperator b)</code></td><td>可以把流中元素反复结合起来，得到一个值。返回 <code>T</code></td></tr><tr><td><code>reduce(BinaryOperator b)</code></td><td>可以把流中元素反复结合起来，得到一个值。返回 <code>Optinal&lt;T&gt;</code></td></tr></tbody></table><h4 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>collect(Collector c)</code></td><td>将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法</td></tr></tbody></table><ul><li><p><code>Collector</code> 接口中方法的实现决定了如何对流执行收集的操作</p><p>另外，<code>Collectors</code> 实用类提供了很多静态方法，可以方便地创建常见收集器实例。</p></li></ul><p><img src="/img/collectors.jpg" alt="collectors"></p><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><ul><li><code>Optional&lt;T&gt;</code> 类（<code>java.util.Optional</code>）是一个容器类，它可以保存类型 T 的值，代表这个值存在。也可以仅仅保存 null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好地表达这个概念，而且可以<strong>避免空指针异常</strong>。</li><li>Javadoc描述：这是一个可以为null的容器对象，如果值存在则<code>isPresent()</code>方法会返回true，调用<code>get()</code>方法会返回该对象</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>创建方法：</strong></p><ul><li><code>Optional.of(T t)</code>：创建一个 <code>Optional</code> 实例。**<code>t</code> 必须非空**</li><li><code>Optional.empty()</code>：创建一个空的 <code>Optional</code> 实例</li><li><strong><code>Optional.ofNullable(T t)</code><strong>：创建一个 <code>Optional</code> 实例。</strong><code>t</code> 可以为 null</strong></li></ul><p><strong>判断 <code>Optional</code> 实例是否包含对象：</strong></p><ul><li><code>isPresent()</code>：判断是否包含对象，返回 boolean</li><li><code>ifPresent(Consumer c)</code>：如果有值，则传入该值并执行 <code>Consumer</code> 接口的实现代码。</li></ul><p><strong>获取 <code>Optional</code> 实例的对象：</strong></p><ul><li><code>get()</code>：如果有值，返回该值。否则抛出异常。</li><li>**<code>orElse(T other)</code>**：如果有值，返回该值。否则返回指定的 other 对象。保证返回值非空。</li><li><code>orElseGet(Supplier other)</code>：如果有值，返回该值。否则返回 <code>Supplier</code> 接口实现提供的对象。</li><li><code>orElseThrow(Supplier excption)</code>：如果有值，返回该值。否则抛出 <code>Supplier</code> 接口实现提供的异常。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·正则表达式</title>
      <link href="/2024/09/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/09/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><p>正则表达式（regular expression，简称RegExp）是对字符串执行模式匹配的技术</p></li><li><p>一个正则表达式就是用某种模式去匹配字符串的一个公式，很多编程语言都支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Cloris&quot;</span>;<span class="comment">//对象文本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regular</span> <span class="operator">=</span> <span class="string">&quot;[A-Z]&quot;</span>;<span class="comment">//[1] 创建规则</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regular);<span class="comment">//[2] 创建模式对象</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);<span class="comment">//[3] 创建匹配器</span></span><br><span class="line"><span class="keyword">while</span> (matcher.find())&#123;<span class="comment">//[4] find() 是否找到下一个</span></span><br><span class="line">    System.out.println(matcher.group(<span class="number">0</span>));<span class="comment">//[5] group(0) 输出找到的当前对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>底层实现</strong>：</p><ul><li><p>matcher.find()分析</p><ol><li><p>根据指定的规则,定位满足规则的子字符串(比如(19)(98))</p></li><li><p>找到后，将子字符串的开始的索引记录到matcher 对象的属性int[] groups;</p><p>2.1 groups[0] &#x3D; 0 , 把该子字符串的结束的索引+1 的值记录到groups[1] &#x3D; 4</p><p>2.2 记录1 组()匹配到的字符串groups[2] &#x3D; 0 groups[3] &#x3D; 2</p><p>2.3 记录2 组()匹配到的字符串groups[4] &#x3D; 2 groups[5] &#x3D; 4</p><p>2.4.如果有更多的分组…..</p></li><li><p>同时记录oldLast 的值为子字符串的结束的索引+1 的值即5, 即下次执行find 时，就从35 开始匹<br>  配</p></li></ol></li><li><p>matcher.group(0) 分析</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">group</span><span class="params">(<span class="type">int</span> group)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (first &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No match found&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (group &lt; <span class="number">0</span> || group &gt; groupCount())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;No group &quot;</span> + group);</span><br><span class="line">    <span class="keyword">if</span> ((groups[group*<span class="number">2</span>] == -<span class="number">1</span>) || (groups[group*<span class="number">2</span>+<span class="number">1</span>] == -<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> getSubSequence(groups[group * <span class="number">2</span>], groups[group * <span class="number">2</span> + <span class="number">1</span>]).toString();</span><br><span class="line">    <span class="comment">//根据groups[0]=0 和groups[1]=4 的记录的位置，从content 开始截取子字符串返回</span></span><br><span class="line">    <span class="comment">//就是[0,4) 包含0 但是不包含索引为4 的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="正则表达式基本语法"><a href="#正则表达式基本语法" class="headerlink" title="正则表达式基本语法"></a>正则表达式基本语法</h2><p><strong>元字符（Metacharacter）</strong>大致分为：</p><ul><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用符</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ul><h3 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号"></a>转义符号</h3><ul><li>用于检索某些特殊字符，如<code>\\</code> 代表一个 <code>\</code></li><li>需要用到转义符号的字符有：<code>.</code>、<code>+</code>、<code>(</code>、<code>)</code>、<code>$</code>、<code>/</code>、<code>\</code>、<code>?</code>、<code>[</code>、<code>]</code>、<code>^</code>、<code>&#123;</code>、<code>&#125;</code></li><li>只写<code>.</code>表示匹配所有的字符，需要匹配<code>.</code>本身需要写<code>\\.</code></li></ul><h3 id="字符匹配符"><a href="#字符匹配符" class="headerlink" title="字符匹配符"></a>字符匹配符</h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>[ ]</code></td><td>可接收的字符列表</td><td><code>[abcd]</code></td><td>abcd 中的任一字符</td></tr><tr><td><code>[^]</code></td><td>不接收的字符列表</td><td><code>[^abcd]</code></td><td>非 abcd 的任意字符</td></tr><tr><td><code>-</code></td><td>连字符</td><td><code>[a-z]</code></td><td>a - z 中的任意字符</td></tr><tr><td><code>.</code></td><td>匹配除 <code>\n</code> 外的任意字符</td><td><code>a..b</code></td><td>a 开头，b结尾，中间含 2 字符</td></tr><tr><td><code>\\d</code></td><td>匹配单个数字字符：[0-9]</td><td><code>\\d&#123;3&#125;</code></td><td>包含 3 个数字</td></tr><tr><td><code>\\D</code></td><td>匹配单个非数字字符(上面取反)</td><td><code>\\D(\\d)*</code></td><td>单个非数字字符开头，后接任意个数字字符</td></tr><tr><td><code>\\w</code></td><td>匹配单个数字、大小写字母字符：[a-zA-Z0-9]</td><td><code>\\w&#123;2&#125;\\d&#123;3&#125;</code></td><td>2 个数字字母字符开头，后接 3 个数字字符</td></tr><tr><td><code>\\W</code></td><td>匹配单个非数字、非大小写字母字符(上面取反)</td><td><code>\\W+\\d&#123;2&#125;</code></td><td>以至少 1 个非数字字母字符开头，后接 2 个数字字符</td></tr><tr><td><code>\\s</code></td><td>匹配空白字符（空格、制表位等）</td><td></td><td></td></tr><tr><td><code>\\S</code></td><td>匹配非空白字符</td><td></td><td></td></tr></tbody></table><ul><li><p>正则表达式默认区分大小写。要不区分大小写，就加上 <code>(?i)</code></p><ul><li><p><code>(?i)abc</code>：即 abc 都不区分大小写</p></li><li><p><code>a(?i)bc</code>：即仅 bc 不区分大小写</p></li><li><p><code>a((?i)b)c</code>：即仅 b 不区分大小写</p></li><li><p>创建模式对象时，若如此做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regular, Pattern.CASE_INSENSITIVE);</span><br></pre></td></tr></table></figure><p>这个场合，也能不区分大小写。</p></li></ul></li></ul><h3 id="25-1-3-选择匹配符"><a href="#25-1-3-选择匹配符" class="headerlink" title="25.1.3 选择匹配符 |"></a>25.1.3 选择匹配符 <code>|</code></h3><ul><li>与 Java 的逻辑或 <code>|</code> 相同</li></ul><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>*</code></td><td>指定字符重复任意次（0到多）</td><td><code>(abc)*</code></td><td>仅包含任意个 abc 字符串的字符串</td></tr><tr><td><code>+</code></td><td>指定字符重复至少一次（1到多）</td><td><code>m+(abc)*</code></td><td>以任意个 m 开头，后面可以有 abc 字符串的字符串</td></tr><tr><td><code>?</code></td><td>指定字符重复最多一次（0到1）</td><td><code>m+abc?</code></td><td>以任意个 m 开头，后面可以有最多一个 abc 字符串的字符串</td></tr><tr><td><code>&#123;n&#125;</code></td><td>n 个匹配</td><td><code>[abc]&#123;3&#125;</code></td><td>长度为 3 的 abc 中的任意字符的组合</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>至少 n 个匹配</td><td><code>[abc]&#123;3,&#125;</code></td><td>长度不小于 3 的 abc 中的任意字符的组合</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>n 到 m 个匹配</td><td><code>[abc]&#123;3,5&#125;</code></td><td>长度介于 3 到 5 之间的 abc 中的任意字符的组合</td></tr></tbody></table><ul><li><p>Java 的匹配模式默认是贪婪匹配，尽可能匹配多的。即：<code>aaaaa</code> 匹配 <code>a&#123;3,5&#125;</code> 的场合，会匹配到 <code>aaaaa</code></p><p>希望实现非贪婪匹配，可以添加额外的 <code>?</code>。如：<code>*?</code>、<code>+?</code>、<code>??</code> 代表各自规则的非贪婪匹配</p></li></ul><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>^</code></td><td>指定起始字符</td><td><code>^[0-9]+[a-z]*</code></td><td>至少一个数字开头，后接任意小写字母字符串</td></tr><tr><td><code>$</code></td><td>指定结束字符</td><td><code>^[0-9]\\-[a]$</code></td><td>一个数字开头后连接字符“-”，一个 a 结尾</td></tr><tr><td><code>\\b</code></td><td>匹配目标字符串的边界</td><td><code>Cloris\\b</code></td><td>边界即字符串的末尾，或字符串中空格间隔的子串的末尾</td></tr><tr><td><code>\\B</code></td><td>匹配目标字符串的非边界</td><td><code>Cloris\\B</code></td><td>上面取反</td></tr></tbody></table><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>(pattern)</code></td><td>非命名捕获。捕获匹配的字符串。编号为 0 的第一个捕获是由整个正则表达式匹配的文本。其他捕获结果根据左括号的顺序从 1 开始自动编号。</td></tr><tr><td><code>(?&lt;name&gt;pattern)</code>、<code>(?&#39;name&#39;pattern)</code></td><td>命名捕获，给分组起名。用于 name 的字符串不能包含标点符号，也不能以数字开头</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;s7789 nn1189&quot;</span>;</span><br><span class="line"><span class="comment">// 1. matcher.group(0) 得到匹配到的字符串</span></span><br><span class="line"><span class="comment">// 2. matcher.group(1) 得到匹配到的字符串的第1 个分组内容</span></span><br><span class="line"><span class="comment">// 3. matcher.group(2) 得到匹配到的字符串的第2 个分组内容</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(?&lt;g1&gt;\\d\\d)(?&lt;g2&gt;\\d\\d)&quot;</span>;<span class="comment">//匹配4 个数字的字符串</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;找到=&quot;</span> + matcher.group(<span class="number">0</span>));<span class="comment">//7789或1189</span></span><br><span class="line">    System.out.println(<span class="string">&quot;第1 个分组内容=&quot;</span> + matcher.group(<span class="number">1</span>));<span class="comment">//77或11</span></span><br><span class="line">    System.out.println(<span class="string">&quot;第1 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g1&quot;</span>));<span class="comment">//77或11</span></span><br><span class="line">    System.out.println(<span class="string">&quot;第2 个分组内容=&quot;</span> + matcher.group(<span class="number">2</span>));<span class="comment">//89</span></span><br><span class="line">    System.out.println(<span class="string">&quot;第2 个分组内容[通过组名]=&quot;</span> + matcher.group(<span class="string">&quot;g2&quot;</span>));<span class="comment">//89</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>(?:pattern)</code></td><td>匹配 pattern 但不捕获该匹配的子表达式。</td></tr><tr><td><code>(?=pattern)</code></td><td>匹配处于 pattern 前的搜索字符串。非捕获分组。</td></tr><tr><td><code>(?!pattern)</code></td><td>匹配不处于 pattern 前的搜索字符串。非捕获分组。</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;windows95 windows98 windows2000&quot;</span>;</span><br><span class="line"><span class="comment">//注意：不能matcher.group(1)</span></span><br><span class="line"><span class="comment">//找到windows95、 windows98、 windows2000子字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;windows(?:95|98|2000)&quot;</span>;</span><br><span class="line"><span class="comment">//找到windows这个关键字,但是要求只是查找windows95、windows98中包含有的windows</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;windows(?=95|98)&quot;</span>;</span><br><span class="line"><span class="comment">//找到韩顺平这个关键字,但是要求只是查找不是(windows95、windows98) 中包含有的韩顺平</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;韩顺平(?!95|98)&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><ul><li><p>验证是否为汉字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;^[\u0391-\uffe5]+$&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>验证手机号码：必须以13、14、15开头的11位数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;^1[3|4|5|8]\\d&#123;9&#125;$&quot;</span>;<span class="comment">//以1开头，第二位为选择匹配符</span></span><br></pre></td></tr></table></figure></li><li><p>验证url地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;^((http|https)://)?([\\w-]+\\.)+[\\w-]+(\\/[\\w-?=&amp;/%.#]*)?$&quot;</span>;</span><br><span class="line"><span class="comment">//协议头可选 www.域名.等以.结尾   com等     </span></span><br><span class="line"><span class="comment">//中括号里写.?*等表示检索其本身，等价于//.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三个常用类"><a href="#三个常用类" class="headerlink" title="三个常用类"></a>三个常用类</h2><h3 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h3><ul><li><p><code>Pattern</code> 对象是一个正则表达式对象，该类没有公共构造方法。</p><p>用 <code>Pattern.compile(reg)</code> 获取一个 <code>Pattern</code> 对象。</p></li></ul><h3 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h3><ul><li><p><code>Matcher</code> 对象是输入字符串进行解释和匹配的引擎，也没有公共构造方法。</p><p>用 <code>Pattern</code> 对象的 <code>matcher(content)</code> 方法获得一个 <code>Matcher</code> 对象。</p></li></ul><h3 id="PatternSyntaxException"><a href="#PatternSyntaxException" class="headerlink" title="PatternSyntaxException"></a>PatternSyntaxException</h3><ul><li><code>PatternSyntaxExcption</code> 是一个非强制异常类，表示一个正则表达式中的语法错误。</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p><code>Pattern.matches(reg, content)</code>：<strong>整体</strong>匹配，无需加定位符^$，输入的字符串是否符合表达式。返回布尔值。</p><p><code>matcher.matches()</code>：整体匹配，字符串是否符合表达式。返回布尔值。前面的方法实际上就是这个方法。</p></li><li><p><code>Pattern.compile(reg)</code>：返回一个指定表达式的 <code>Pattern</code> 对象</p></li><li><p><code>pattern.matcher(content)</code>：返回一个字串的 <code>Matcher</code> 对象</p></li><li><p><code>matcher.pattern()</code>：返回该 <code>Matcher</code> 对象的表达式</p><p><code>pattern.pattern()</code>：返回该 <code>Pattern</code> 对象的表达式</p></li><li><p><code>matcher.find()</code>：尝试查找下一个匹配的序列，返回布尔值，该方法需加定位符^$</p><p><code>matcher.find(int)</code>：重置该匹配器，从指定索引位置开始重新查找</p></li><li><p><code>matcher.start()</code>：返回本次匹配的字符起始位置的索引</p><p><code>matcher.end()</code>：返回本次匹配的字符结束位置 + 1 的索引</p><p>这个场合，<code>content.substring(matcher.start(), matcher.end())</code> 就是匹配的字符串</p></li><li><p><code>matcher.start(int)</code>：返回本次匹配的字符的该组内容的起始位置的索引</p><p><code>matcher.end(int)</code>：返回本次匹配的字符的该组内容的结束位置 + 1 的索引</p></li><li><p><code>matcher.replaceAll(str)</code>：替换匹配到的全部内容</p><p><code>matcher.replaceFirst(str)</code>：替换第一次匹配到的内容</p><p>这些场合，返回的字符串才是替换后的字符串。原字符串不变。</p></li></ul><h2 id="分组、捕获、反向引用"><a href="#分组、捕获、反向引用" class="headerlink" title="分组、捕获、反向引用"></a>分组、捕获、反向引用</h2><ul><li>分组：用圆括号组成一个比较复杂的匹配模式，那么一个圆括号部分可以看作一个子表达式&#x2F;一个分组</li><li>捕获：把正则表达式中，子表达式（分组）的内容保存到内存中以数字编号或显式命名的组里，方便后面引用。以分组的左括号为标志，第一组组号为 1，第二组为 2，以 0 代表整个正则表达式。</li><li>反向引用：分组的内容被捕获后，可以在这个括号后使用。这种引用既可以是在正则表达式内部，也可以在外部。内部反向引用 <code>\\分组号</code>、外部反向引用 <code>$分组号</code></li></ul><h3 id="反向引用案例"><a href="#反向引用案例" class="headerlink" title="反向引用案例"></a>反向引用案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regular</span> <span class="operator">=</span> <span class="string">&quot;(\\d)(\\d)\\2\\1&quot;</span>;</span><br><span class="line"><span class="comment">//即，第一位=第四位，第二位=第三位的四位数,内部引用\\1表示圆括号捕获的\\w</span></span><br></pre></td></tr></table></figure><p>###结巴去重案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">regular</span> <span class="operator">=</span> <span class="string">&quot;(\\w)\\1+&quot;</span>;<span class="comment">//即，重复的字母或数字</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> Pattern.compile(regular).mathcer(content);</span><br><span class="line">content = matcher.replaceAll(<span class="string">&quot;$1&quot;</span>);<span class="comment">//使用外部反向引用，替换重复内容，就完成了去重</span></span><br></pre></td></tr></table></figure><h2 id="在-String-中使用正则表达式"><a href="#在-String-中使用正则表达式" class="headerlink" title="在 String 中使用正则表达式"></a>在 <code>String</code> 中使用正则表达式</h2><ul><li><p>替换功能：<code>str.replaceAll(reg, reg)</code>替换匹配到的全部内容</p></li><li><p>判断功能：<code>str.matches(reg)</code></p></li><li><p>分割功能：<code>str.split(reg)</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·JDBC与连接池</title>
      <link href="/2024/09/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2024/09/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h2><ul><li><p>JDBC为访问<strong>不同的数据库</strong>提供了统一的接口，为使用者屏蔽了细节问题</p></li><li><p>Java程序员使用JDBC，可以连接任何提供了JDBC驱动程序的数据库系统，从而完成对数据库的各种操作</p></li><li><p>JDBC基本原理：</p><p><img src="/img/JDBC%E5%8E%9F%E7%90%86.jpg" alt="JDBC原理"></p></li><li><p>JDBC是Java提供一套用于数据库操作的接口API，程序员只需面向这套接口编程即可</p></li></ul><h3 id="JDBC程序编写步骤"><a href="#JDBC程序编写步骤" class="headerlink" title="JDBC程序编写步骤"></a>JDBC程序编写步骤</h3><ol><li><p>在项目下创建一个文件夹，将预先准备好的mysql.jar拷贝到该目录下，点击add to project</p></li><li><p>注册驱动—加载Driver类：<code>Driver driver = new Driver();</code></p></li><li><p>获取连接—得到Connection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1) jdbc:mysql:// 规定好表示协议，通过jdbc 的方式连接mysql</span></span><br><span class="line"><span class="comment">//(2) localhost 主机，可以是ip 地址</span></span><br><span class="line"><span class="comment">//(3) 3306 表示mysql 监听的端口</span></span><br><span class="line"><span class="comment">//(4) csMySQL 连接到mysql dbms 的哪个数据库</span></span><br><span class="line"><span class="comment">//(5) mysql 的连接本质就是前面学过的socket 连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/csMySQL&quot;</span>;</span><br><span class="line"><span class="comment">//将用户名和密码封装到Properties 对象</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//说明user 和password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;***&quot;</span>); <span class="comment">//密码</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);<span class="comment">//获取连接</span></span><br></pre></td></tr></table></figure></li><li><p>执行增删改查—发送sql命令给mysql执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = 1&quot;</span>;</span><br><span class="line"><span class="comment">//statement 用于执行静态SQL 语句并返回其生成的结果的对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> statement.executeUpdate(sql); </span><br><span class="line"><span class="comment">// 如果是dml 语句，返回的就是受影响的行数</span></span><br></pre></td></tr></table></figure></li><li><p>释放资源—关闭相关连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">statement.close();</span><br><span class="line">connect.close();</span><br></pre></td></tr></table></figure></li></ol><h2 id="获取数据库连接的五种方式"><a href="#获取数据库连接的五种方式" class="headerlink" title="获取数据库连接的五种方式"></a>获取数据库连接的五种方式</h2><ul><li><p>方式一：直接创建 <code>Driver</code>，调用 <code>driver.connet(url, properties);</code></p><p>就是上节演示过的方法</p><p>缺点：Driver是第三方的，且是静态加载，灵活性不够强，依赖性高</p></li><li><p>方式二：使用反射加载 <code>Driver</code> 类（动态加载）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;******&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br></pre></td></tr></table></figure></li><li><p>方式三：使用 <code>DriverManager</code> 替代 <code>Driver</code> 进行统一管理</p><p>扩展性更好，更加清晰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();<span class="comment">//反射加载Driver</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/csMySQL&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;******&quot;</span>;</span><br><span class="line">DriverManager.registerDriver(driver);<span class="comment">//注册Driver驱动</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, name, password);</span><br></pre></td></tr></table></figure><p>这里，<code>DriverManager.getConnetion()</code> 有三种方法。分别是：</p><ul><li><code>getConnetion(url);</code></li><li><code>getConnetion(url, properties);</code></li><li><code>getConnetion(url, name, password);</code></li></ul></li><li><p>方式四：使用 <code>Class.forName()</code> 自动完成注册驱动（使用最多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用反射加载Driver类</span></span><br><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/csMySQL&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;******&quot;</span>;<span class="comment">//用户名与密码写死，不利于程序控制</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, name, password);</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;<span class="comment">//静态代码块在类加载时会被执行</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());<span class="comment">//注册driver 的工作已经完成</span></span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无需写<code>Class&lt;?&gt; aClass = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>也可以获得connection：</p><ul><li>从jdk1.5以后使用了jdbc4，系统会自动调用 jar 包下 <code>META-INF\services\java.sql.Driver</code> 这个文件中的类名称去注册。</li><li>但仍建议写上 <code>Class.forName(...)</code> 语句</li></ul></li><li><p>方式五：在方式 4 的基础上，使用配置文件</p><p>连接数据库更灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Properties对象获取配置文件信息</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">pro.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>))</span><br><span class="line"><span class="comment">//获取相关的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pro.getProperties(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pro.getProperties(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pro.getProperties(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> pro.getProperties(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">Class&lt;?&gt; aClass = Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure><p>配置文件（创建 src\mysql.properties）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/csMySQL</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">******</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ResultSet结果集"><a href="#ResultSet结果集" class="headerlink" title="ResultSet结果集"></a>ResultSet结果集</h2><ul><li>表示数据库结果集的数据表。通常通过执行查询数据库的语句生成。</li><li>ResultSet 对象保持一个光标指向其当前的数据行。该光标的初始位置在第一行之前。调用 next 方法将光标下移，移动到末端的场合会返回 false。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from customer&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resset</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (resset.next()) &#123;<span class="comment">//让光标向后移动，如果没有更多行，则返回false</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resset.getInt(<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resset.getString(<span class="number">2</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resset.getString(<span class="number">5</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">card_id</span> <span class="operator">=</span> resset.getString(<span class="number">6</span>);</span><br><span class="line">    System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + card_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>String sex = resset.getString(5);</code> 表示取出该行数据的第 5 列的字符串数据。</p><p>ResultSet 的数据是以类似二维数组的形式保存在对象中。</p><p><img src="/img/ResultSet%5B%E7%BB%93%E6%9E%9C%E9%9B%86%5D.jpg" alt="ResultSet[结果集]"></p><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><ul><li><code>Statment</code> 对象用于执行静态 SQL 语句，并返回其生成的结果的对象</li><li>在连接建立后，需要访问数据库、执行命名或 SQL 语句，有如下方式：<ul><li><code>Statment</code>（存在 SQL 注入问题，在实际开发中基本不使用）</li><li><code>PerparedStatement</code>（预处理）</li><li><code>CallableStatement</code>（存储过程）</li></ul></li><li>Statement对象执行SQL语句存在SQL注入风险</li><li>SQL 注入：利用某些系统没有对用户输入的数据进行充分的检查，故意注入非法的 SQL 语句段或命令，恶意攻击数据库。</li><li>使用 <code>PreparedStatement</code> 可以防范 SQL 注入</li></ul><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><ol><li><p><code>PreparedStatement</code> 执行的 SQL 语句的参数用 <code>?</code> 表示。</p></li><li><p>调用方法<code>setXxx()</code>设置 SQL 语句中的参数。</p><p>这些方法的两个参数中，第一个是要设置的参数的索引（从1开始），第二个是设置值</p></li><li><p>调用 <code>executeQuery()</code> 返回 <code>ResultSet</code> 对象。</p></li><li><p>调用 <code>executeUpdate()</code> 执行增删改</p></li></ol><p><strong>预处理的好处</strong></p><ol><li>不再使用拼接语句，增加代码可读性，减少语法错误</li><li>解决了 SQL 注入问题</li><li>大大减少了编译次数，效率提高</li></ol><p>**调用 <code>executeQuery()</code>**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>); <span class="comment">//next(): 当接收到空格或者&#x27;就是表示结束</span></span><br><span class="line"><span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">//如果希望看到SQL 注入，这里需要用nextLine</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"><span class="comment">//通过Properties 对象获取配置文件的信息</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="comment">//获取相关的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">//1. 注册驱动</span></span><br><span class="line">Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"><span class="comment">//2. 得到连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="comment">//3. 得到PreparedStatement</span></span><br><span class="line"><span class="comment">//3.1 组织SqL , Sql 语句的? 就相当于占位符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name , pwd from admin where name =? and pwd = ?&quot;</span>;</span><br><span class="line"><span class="comment">//3.2 preparedStatement 对象实现了PreparedStatement 接口的实现类的对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.3 给? 赋值</span></span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line"><span class="comment">//4. 执行select 语句使用executeQuery</span></span><br><span class="line"><span class="comment">// 如果执行的是dml(update, insert ,delete) executeUpdate()</span></span><br><span class="line"><span class="comment">// 这里执行executeQuery ,不要再写sql</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">//如果查询到一条记录，则说明该管理存在</span></span><br><span class="line">    System.out.println(<span class="string">&quot;恭喜， 登录成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;对不起，登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p><strong>调用 <code>executeUpdate()</code></strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输删除管理员的名字: &quot;</span>); <span class="comment">//next(): 当接收到空格或者&#x27;就是表示结束</span></span><br><span class="line"><span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到SQL 注入，这里需要用nextLine</span></span><br><span class="line"><span class="comment">// System.out.print(&quot;请输入管理员的新密码: &quot;);</span></span><br><span class="line"><span class="comment">// String admin_pwd = scanner.nextLine();</span></span><br><span class="line"><span class="comment">//通过Properties 对象获取配置文件的信息</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="comment">//获取相关的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">//1. 注册驱动</span></span><br><span class="line">Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"><span class="comment">//2. 得到连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="comment">//3. 得到PreparedStatement</span></span><br><span class="line"><span class="comment">//3.1 组织SqL , Sql 语句的? 就相当于占位符</span></span><br><span class="line"><span class="comment">//增删改记录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin values(?, ?)&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update admin set pwd = ? where name = ?&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from admin where name = ?&quot;</span>;</span><br><span class="line"><span class="comment">//3.2 preparedStatement 对象实现了PreparedStatement 接口的实现类的对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.3 给? 赋值</span></span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line"><span class="comment">//preparedStatement.setString(2, admin_name);</span></span><br><span class="line"><span class="comment">//4. 执行dml 语句使用executeUpdate</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行失败&quot;</span>);</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h2 id="JDBC相关API"><a href="#JDBC相关API" class="headerlink" title="JDBC相关API"></a>JDBC相关API</h2><p>![JDBC 的相关API](&#x2F;img&#x2F;JDBC 的相关API.jpg)</p><h2 id="封装JDBCUtils"><a href="#封装JDBCUtils" class="headerlink" title="封装JDBCUtils"></a>封装JDBCUtils</h2><ul><li><p>在JDBC操作中，获取连接和释放资源经常使用，可以将其封装到与JDBC连接的工具类JDBCUtils中</p></li><li><p><strong>JDCUtils.java</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String pw;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/com/cloris/mysql.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//读取相关的属性值</span></span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            pw = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//实际开发中，可以将编译异常转换为运行异常</span></span><br><span class="line">            <span class="comment">//这样调用者可以选择捕获也可选择默认处理，比较方便</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//连接数据库，返回connection</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, pw);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//关闭相关资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">close</span><span class="params">(Connection connection, </span></span><br><span class="line"><span class="params">                                Statement statement, ResultSet resultSet)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(c == <span class="literal">null</span>))&#123;</span><br><span class="line">                connection.close();<span class="comment">//关闭Connection</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!(s == <span class="literal">null</span>))&#123;</span><br><span class="line">                statement.close();<span class="comment">//关闭Statement或PrepareStatement</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!(r == <span class="literal">null</span>))&#123;</span><br><span class="line">                resultSet.close();<span class="comment">//关闭结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>JDBC 程序中，当一个 <code>Connection</code> 对象创建时，默认情况下会自动提交事务。为了让多个 SQL 语句一体执行，需要使用事务。</li><li>调用Connection的<code>setAutoCommit(false)</code>可以取消自动提交事务</li><li>在所有的SQL语句都成功执行后，调用<code>commit();</code>方法提交事务</li><li>在其中某个操作失败或出现异常时，调用<code>rollback();</code>方法回滚事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransferMoney</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取数据库连接</span></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// 设置事务不自动提交</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行第一条SQL语句</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 故意制造异常，用于测试事务回滚</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行第二条SQL语句</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行发生了异常，撤销执行的sql&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 发生异常，回滚事务</span></span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                    connection.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><ul><li>需要成批插入或者更新记录时，把多条语句一次性提交给数据库进行批量处理。这样做比单独提交更有效率</li><li>JDBC批量处理语句包括下面方法：<ul><li><code>addBatch()</code>：添加需要批量处理的SQL语句或参数</li><li><code>executeBatch()</code>：执行批量处理语句</li><li><code>clearBatch()</code>：清空批处理包的语句</li></ul></li><li>JDBC连接MySQL时要使用批处理功能，需要在url中加入参数：<code>rewrteBatchedStatements = true</code></li><li>批处理常与PreparedStatement搭配使用，可以减少编译次数与运行次数，提高效率</li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchInsertExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 开始时间</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123; <span class="comment">// 执行5000次</span></span><br><span class="line">                preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">                preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">                preparedStatement.addBatch();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 当有1000条记录时，批量执行</span></span><br><span class="line">                <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>) &#123; <span class="comment">// 满1000条SQL</span></span><br><span class="line">                    preparedStatement.executeBatch(); <span class="comment">// 执行批量插入</span></span><br><span class="line">                    preparedStatement.clearBatch(); <span class="comment">// 清空批处理包</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行剩余的批处理语句</span></span><br><span class="line">            preparedStatement.executeBatch();</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;批量方式耗时=&quot;</span> + (end - start)); <span class="comment">// 输出批量方式耗时</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码说明：</strong></p><ol><li><p>第一次添加批处理语句时，创建一个 ArrayList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.batchedArgs == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.batchedArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在其中放置批处理语句（指令的数据）</p></li><li><p>该数组满后，按照 1.5 倍扩容</p></li><li><p>达到指定的值后，执行 executeBatch </p></li><li><p>批处理能减少编译次数，也能减少发送 SQL 语句的网络开销。</p></li></ol><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p><strong>传统连接弊端：</strong></p><ol><li>传统的 JDBC 数据库连接使用 DriverManager 获取，每次建立连接都会把 Connection 载入内存，再进行身份验证。每次连接都会重复验证请求，这样会占用过多系统资源，容易造成服务器崩溃。</li><li>每次连接，使用完毕后必须断开。如果不断开操作，会致使数据库内存泄漏，最终不得不重启数据库。</li><li>传统连接方式不能控制创建的连接数量。连接数量过多的场合，也可能导致内存泄漏，MySQL 崩溃</li></ol><p>要解决这些问题，可以采用<strong>数据库连接池技术</strong>：</p><ul><li>预先在缓冲池放入一定数量的连接。需要建立数据库连接时，从缓冲池中取出一个连接。使用完后，把该连接放回缓冲池。</li><li>数据库连接池负责分配、管理和释放数据库连接。其允许应用程序<strong>重复使用</strong>一个现有的数据库连接，而非建立新的连接。</li><li>当请求连接的数量超过最大数量，这些连接请求会被加入等待队列。</li><li>在数据库连接池技术中，close 不是真的断掉连接而是把使用的Connection 对象放回连接池</li></ul><h3 id="数据库连接池种类"><a href="#数据库连接池种类" class="headerlink" title="数据库连接池种类"></a>数据库连接池种类</h3><p>JDBC 数据库连接池使用 javax.sql.DataSource 表示。DataSource 是一个接口，通常由第三方提供实现</p><ul><li><strong>C3P0</strong>：速度稍慢，稳定性好</li><li>DBCP：速度稍快，稳定性差</li><li>Proxool：可以监控连接池状态，稳定性稍差</li><li>BoneCP：速度快</li><li><strong>Druid</strong>：阿里提供的数据库连接池，集 DBCP、C3P0、Proxool 优点于一身（使用最多）</li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><ol><li><p>下载C3P0 jar包</p></li><li><p>将预先准备好的jar拷贝到该目录下，点击add to project</p></li><li><p>示例：</p><p>方式一：在程序中指定相关参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个数据源对象</span></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        <span class="comment">// 2. 通过配置文件mysql.properties 获取相关连接的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/mysql.properties&quot;</span>)); </span><br><span class="line">        <span class="comment">// 注意路径是否正确</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取相关的属性值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给数据源comboPooledDataSource 设置相关的参数</span></span><br><span class="line">        comboPooledDataSource.setDriverClass(driver);</span><br><span class="line">        comboPooledDataSource.setJdbcUrl(url);</span><br><span class="line">        comboPooledDataSource.setUser(user);</span><br><span class="line">        comboPooledDataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置初始化连接数</span></span><br><span class="line">        comboPooledDataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 最大连接数</span></span><br><span class="line">        comboPooledDataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试连接池的效率, 测试对mysql 5000 次操作</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection(); </span><br><span class="line">            <span class="comment">// 这个方法就是从DataSource 接口实现的</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 输出C3P0连接池5000次连接mysql的耗时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 5000 连接mysql 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：使用配置文件模板操作 (推荐)</p><ol><li><p>加入配置文件</p><p><strong>c3p0-config.xml：</strong>配置文件，文件名固定，放在 <code>src/c3p0-config.xml</code> 目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源（连接池）名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;LinkPool&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 驱动类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>******<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 初始化连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 最大空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每次增长的连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可连接的最多的命令对象数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每个连接可连接的最多的命令对象数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个数据源对象，使用名为&quot;LinkPool&quot;的配置</span></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;LinkPool&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试500000次连接mysql</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection();</span><br><span class="line">                <span class="comment">// System.out.println(&quot;连接OK~&quot;);</span></span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 输出C3P0第二种方式(500000)连接mysql的耗时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 的第二种方式(500000) 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="Druid（德鲁伊）连接池"><a href="#Druid（德鲁伊）连接池" class="headerlink" title="Druid（德鲁伊）连接池"></a>Druid（德鲁伊）连接池</h3><ol><li><p>同上下载并配置jar文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">720mel\im</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">5000</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载配置文件</span></span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src//druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Druid数据库连接池</span></span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;开始执行....&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">                    System.out.println(connection.getClass());</span><br><span class="line">                    <span class="comment">// System.out.println(&quot;连接成功!&quot;);</span></span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 输出Druid连接池操作500000次的耗时</span></span><br><span class="line">            System.out.println(<span class="string">&quot;druid 连接池操作500000 耗时=&quot;</span> + (end - start));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将JDBCUtils-工具类改成Druid实现"><a href="#将JDBCUtils-工具类改成Druid实现" class="headerlink" title="将JDBCUtils 工具类改成Druid实现"></a>将JDBCUtils 工具类改成Druid实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在静态代码块完成ds初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/druid.properties&quot;</span>));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编写getConnection方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接, 在数据库连接池技术中，close不是真的断掉连接</span></span><br><span class="line">    <span class="comment">// 而是把使用的Connection对象放回连接池</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Apache-DbUtils"><a href="#Apache-DbUtils" class="headerlink" title="Apache - DbUtils"></a>Apache - DbUtils</h2><ul><li>JDBC 传统方法的不足及解决方案：</li></ul><p><img src="/img/Apache%E2%80%94DBUtils%E5%AF%BC%E5%85%A5.jpg" alt="Apache—DBUtils导入"></p><ul><li><p>代码：</p><ul><li>土方法(省略类创建，根据需求创建即可)，创建一个类，其属性与表格的列一一对应。将数据遍历并读取到一个个类对象中，再将这些类对象放置到集合中。这样，就得到了一个与表格数据关联的数据集合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 得到连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//2. 组织一个sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id &gt;= ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">ArrayList&lt;Actor&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建ArrayList 对象,存放actor 对象</span></span><br><span class="line"><span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">    System.out.println(connection.getClass());</span><br><span class="line">    <span class="comment">//运行类型com.alibaba.druid.pool.DruidPooledConnection</span></span><br><span class="line">    preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">    preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//给?号赋值</span></span><br><span class="line">    <span class="comment">//执行, 得到结果集</span></span><br><span class="line">    set = preparedStatement.executeQuery();</span><br><span class="line">    <span class="comment">//遍历该结果集</span></span><br><span class="line">    <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> set.getString(<span class="string">&quot;name&quot;</span>);<span class="comment">//getName()</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> set.getString(<span class="string">&quot;sex&quot;</span>);<span class="comment">//getSex()</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">borndate</span> <span class="operator">=</span> set.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> set.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">        <span class="comment">//把得到的resultset 的记录，封装到Actor 对象，放入到list 集合</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Actor</span>(id, name, sex, borndate, phone));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    JDBCUtilsByDruid.close(set, preparedStatement, connection);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为ArrayList 和connection 没有任何关联，所以该集合可以复用.</span></span><br><span class="line"><span class="keyword">return</span> list;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Apache-DbUtils介绍"><a href="#Apache-DbUtils介绍" class="headerlink" title="Apache - DbUtils介绍"></a>Apache - DbUtils介绍</h3><p><code>commons-DbUtils</code>：是 Apache 组织提供的一个开源的 JDBC 工具库。它是对 JDBC 的封装。使用 dbutils 能极大简化 JDBC 编码的工作量</p><p><strong>DbUtils 的常用类：</strong></p><ul><li><code>QueryRunner</code> 类：封装了 SQL 的执行。是线程安全的，可以实现增、删、改、查、批处理操作</li><li><code>ResultSetHandler</code> 接口：用于处理 <code>ResultSet</code>，按照需求将数据转化为其他形式</li></ul><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li>BeanListHandler：将结果集中的每一行数据都封装到一个对应的lavaBean实例中，存放到List</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每行数据都封装到Map里，再把这些map再存到一个map里，其key为指定的key,</li><li>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应</li><li>MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li></ul><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 得到连接(druid)</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line"><span class="comment">//2. 使用DBUtils 类和接口, 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line"><span class="comment">//3. 创建QueryRunner</span></span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"><span class="comment">//4. 就可以执行相关的方法，返回ArrayList 结果集</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, name from actor where id &gt;= ?&quot;</span>;</span><br><span class="line"><span class="comment">//(1) query 方法就是执行sql 语句，得到resultset ---封装到--&gt; ArrayList 集合中</span></span><br><span class="line"><span class="comment">//(2) 返回集合</span></span><br><span class="line"><span class="comment">//(3) connection: 连接</span></span><br><span class="line"><span class="comment">//(4) sql : 执行的sql 语句</span></span><br><span class="line"><span class="comment">//(5) new BeanListHandler&lt;&gt;(Actor.class): 在将resultset -&gt; Actor 对象-&gt; 封装到ArrayList</span></span><br><span class="line"><span class="comment">// 底层使用反射机制去获取Actor 类的属性，然后进行封装</span></span><br><span class="line"><span class="comment">//(6) 1 就是给sql 语句中的? 赋值，可以有多个值，因为是可变参数Object... params</span></span><br><span class="line"><span class="comment">//(7) 底层得到的resultset ,会在query 关闭, 关闭PreparedStatment</span></span><br><span class="line">List&lt;Actor&gt; list =<span class="comment">//不同需求只是handler不同</span></span><br><span class="line">queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Actor.class), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (Actor actor : list) &#123;</span><br><span class="line">    System.out.print(actor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br></pre></td></tr></table></figure><p><strong>query方法底层源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">query</span><span class="params">(Connection conn, String sql, ResultSetHandler&lt;T&gt; rsh, Object... params)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 定义PreparedStatement</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 接收返回的ResultSet</span></span><br><span class="line">    <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stmt = <span class="built_in">this</span>.prepareStatement(conn, sql); <span class="comment">// 创建PreparedStatement</span></span><br><span class="line">        <span class="built_in">this</span>.fillStatement(stmt, params); <span class="comment">// 对sql进行?赋值</span></span><br><span class="line">        rs = <span class="built_in">this</span>.wrap(stmt.executeQuery()); <span class="comment">// 执行sql, 返回ResultSet</span></span><br><span class="line">        result = rsh.handle(rs); <span class="comment">// 返回的ResultSet转换为T类型的对象</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="built_in">this</span>.rethrow(e, sql, params); <span class="comment">// 抛出经过处理的SQLException</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 在finally块中确保资源被关闭</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.close(rs); <span class="comment">// 关闭ResultSet</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.close(stmt); <span class="comment">// 关闭PreparedStatement对象</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回查询结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Apache-DbUtils-常用方法"><a href="#Apache-DbUtils-常用方法" class="headerlink" title="Apache-DbUtils 常用方法"></a>Apache-DbUtils 常用方法</h3><ul><li><p><code>queryRunner.update(connection, sql, ...)</code>：DML 语句，增删改。</p><p>后面传入可变参数，用于给 SQL 语句中的 <code>?</code> 赋值</p><p>返回值 int 代表被影响的行数。</p></li><li><p><code>queryRunner.query(connection, sql, ResultSetHandler, ...)</code>：查询。</p><p>后面传入可变参数，用于给 SQL 语句中的 <code>?</code> 赋值</p><p>关于 <code>ResultSetHandler</code>：</p><ul><li>传入 <code>new BeanListHander&lt;&gt;(SQL_Data.class)</code>：返回多行多列。这个场合，用 <code>List</code> 接收返回值。</li><li>传入 <code>new BeanHandler&lt;&gt;(SQL_Data.class)</code>：返回单行。这个场合，用 <code>SQL_Data data</code> 接收返回值。</li><li>传入 <code>new ScalarHander&lt;&gt;()</code>：返回单行单列。这个场合，用 <code>Object</code> 接收返回值。</li></ul></li></ul><h3 id="表和-JavaBean-的对应关系"><a href="#表和-JavaBean-的对应关系" class="headerlink" title="表和 JavaBean 的对应关系"></a>表和 JavaBean 的对应关系</h3><table><thead><tr><th>表类型</th><th>JavaBean类型</th></tr></thead><tbody><tr><td>int、samllint……</td><td>Integer</td></tr><tr><td>char、varchar……</td><td>String</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>date</td><td>java.util.Date</td></tr></tbody></table><h2 id="BasicDAO"><a href="#BasicDAO" class="headerlink" title="BasicDAO"></a>BasicDAO</h2><ul><li><p>Apache - DbUtils + Druid 简化了 JDBC 开发，但还有不足。</p><ol><li>SQL 语句固定，不能通过传入参数控制，通用性不好。</li><li>select 操作的返回类型未知，需要使用泛型。</li><li>将来的表很多，业务需求复杂，不可能只靠一个 Java 类完成</li></ol></li><li><p>DAO：data access object数据访问对象</p><ol><li><p>我们把通用的和数据库交互的操作封装到一个通用类中，称为 BasicDAO。</p></li><li><p>在 BasicDAO 基础上，每张表对应一个特化的 DAO（继承 BasicDAO），从而更好地完成功能。</p><p>比如：Data 表 -&gt; Data.java 类（JavaBean）-&gt; DataDAO.java</p></li></ol></li></ul><p><img src="/img/BasicDao1.jpg" alt="BasicDao1"></p><p><img src="/img/BasicDao2.jpg" alt="BasicDao2"></p><ul><li>结构设计：<ol><li>com.cloris.dao_.utils：工具类</li><li>com.cloris.dao_.domain：javabean</li><li>com.cloris.dao_.dao：存放XxxDAO（可编写特有的方法）和BasicDAO</li><li>com.cloris.dao_.test：写测试类</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicDAO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"><span class="comment">//开发通用的dml 方法, 针对任意的表</span></span><br><span class="line">    <span class="comment">//sql:sql语句，可以有？</span></span><br><span class="line">    <span class="comment">//parameters：传入? 的具体的值，可以是多个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql, Object... parameters)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.update(connection, sql, parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(connection, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//tClass：传入类型</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">queryMulti</span><span class="params">(String sql, Class&lt;T&gt; tClass, Object... parameters)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;T&gt;(tClass), parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(connection, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">querySingle</span><span class="params">(String sql, Class&lt;T&gt; tClass, Object... parameters)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;T&gt;(tClass), parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(connection, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryScalar</span><span class="params">(String sql, Object... parameters)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;&gt;(), parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(connection, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·MySQL</title>
      <link href="/2024/09/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7MySQL/"/>
      <url>/2024/09/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ul><li><strong>连接到MySQL</strong>：mysql -h 127.0.0.1 -P 3306 -u root -p密码<ul><li>登陆前保证服务启动：net start mysql</li><li>退出MySQL：quit</li><li>停止服务：net stop mysql</li><li>-p密码 不要有空格</li><li>-p后面没有写密码，回车会要求输入</li><li>-h 主机 默认是本机127.0.0.1</li><li>-p 端口 默认是3306，如果修改必填</li></ul></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ol><li>安装MySQL数据库，就是在主机安装一个<strong>数据库管理系统</strong>（DBMS），该系统可以管理多个数据库</li><li>一个<strong>数据库</strong>可以创建多个<strong>表</strong>以保存数据</li><li><strong>三者关系图</strong>：<ul><li>MySQL数据库包含DBMS、数据库、数据对象（表等）三部分</li><li>终端通过端口链接MySQL</li><li>mysqld.exe（DBMS）相当于核心程序在3306端口监听</li><li>数据库（相当于文件）在data目录下</li><li>表存储在数据库中</li></ul></li></ol><p><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E5%B1%82%E7%BB%93%E6%9E%84.jpg" alt="数据库三层结构"></p><ol start="4"><li>数据在数据库中的存储方式：<ul><li>表的一行是一条记录，一行记录常使用对象表示</li></ul></li><li>SQL语句分类：<ul><li>DDL：数据定义语句（create 表，库…）</li><li>DML：数据操作语句（增加insert，修改update，删除delete）</li><li>DQL：数据查询语句（select）</li><li>DCL：数据控制语句（管理数据库，如用户权限grant revoke）</li></ul></li></ol><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE db_name CHARACTER SET &#x27;utf8&#x27; COLLATE &#x27;utf8_bin&#x27;;</span><br></pre></td></tr></table></figure><ol><li><p><code>CHARACTER SET</code>：指定数据库采用的字符集。</p><p>不指定的场合，默认 UTF-8</p></li><li><p><code>COLLATE</code>：指定数据库字符集校对规则</p><ul><li><code>utf8_bin</code> [区分大小写]（常用）</li><li><code>utf8_general_ci</code> [不区分大小写]（默认）对于表而言，没有指定字符集与校验规则同数据库</li></ul></li></ol><h3 id="查看、删除数据库"><a href="#查看、删除数据库" class="headerlink" title="查看、删除数据库"></a>查看、删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;# 显示所有数据库</span><br><span class="line">SHOW CREATE DATABASE db_name;# 显示该数据库创建时使用的指令</span><br><span class="line">DROP DATABASE [IF EXISTS] db_name;# 数据库删除语句（慎用）</span><br></pre></td></tr></table></figure><ul><li>创建数据库&#x2F;表的时候，可使用反引号包围db_name规避关键字</li></ul><h3 id="备份、恢复数据库"><a href="#备份、恢复数据库" class="headerlink" title="备份、恢复数据库"></a>备份、恢复数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 备份数据库，可以备份多个数据库(在DOS命令行输入)</span><br><span class="line">mysqldump -u 用户名 -p -B 数据库1 数据库2 数据库n &gt; 路径\文件名.sql</span><br><span class="line"># 进入MySQL命令行输入</span><br><span class="line">Source 路径\文件名.sql;</span><br><span class="line"># 备份库的表</span><br><span class="line">mysqldunp -u 用户名 -p 数据库 表1 表2 表n &gt; 路径\文件名.sql</span><br></pre></td></tr></table></figure><ul><li>备份的文件就是对应的sql语句，全部再执行一遍也可以恢复</li></ul><h3 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h3><ul><li>C（create 创建）R（read 查找）U（update 修改）D（delete 删除）</li></ul><h4 id="insert语句"><a href="#insert语句" class="headerlink" title="insert语句"></a>insert语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `表名` (列名1, 列名2, 列名3)</span><br><span class="line">VALUES (值1, 值2, 值3), (值1a, 值2a, 值3a);</span><br></pre></td></tr></table></figure><ol><li><p>插入的数据应与字段的数据类型相同，在地层会尝试进行数据转换</p></li><li><p>数据的长度应该在列规定的范围</p></li><li><p>在VALUES中列出的数据位置必须与被加入的列的排列顺序对应</p></li><li><p>字符串和日期型数据应该包含在单引号中</p></li><li><p>列可以插入空值，前提是该字段允许为空（INSERT INTO <code>table</code> VALUES (null)）</p></li><li><p>VALUES后多个括号可以添加多行数据</p></li><li><p>如果是给表中的所有字段，可以不写前面的字段名称</p></li><li><p>当不给某个字段值时，如果有默认值就会添加，否则报错</p><p>如果某个列没有指定not null，则默认给null</p><p>如果希望给一个自定义的默认值，可以在创建表时指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `表名` (列名1, 列名2, 列名3)</span><br><span class="line">VALUES (</span><br><span class="line">            值1 DOUBLE NOT NULL DEFAULT 100);</span><br></pre></td></tr></table></figure></li></ol><h4 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `表名` </span><br><span class="line">SET `列名` = 值, `列名2` = 值2 </span><br><span class="line">WHERE `条件列` = 条件值;</span><br></pre></td></tr></table></figure><ol><li>UPDATE语句用于更新原有表中的各列</li><li>SET子句指示要修改哪些列和要给予哪些值</li><li>WHERE条件不写相当于对表的所有记录进行修改、</li><li>如果要修改多个字段，SET后可有多个表达式</li></ol><h4 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM `表名` </span><br><span class="line">WHERE `条件列` = 条件值;</span><br></pre></td></tr></table></figure><ol><li>没有WHERE语句会全部删除</li><li>不能删除一列的值。若要如此做，可以使用 update 语句将一列置空</li><li>仅能删除记录，不能删除表本身。要如此做，可以使用 <code>DROP TABLE 表名;</code> 语句</li></ol><h4 id="select语句（单表）"><a href="#select语句（单表）" class="headerlink" title="select语句（单表）"></a>select语句（单表）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT *`列1`, `列2` </span><br><span class="line">FROM `表名` WHERE 条件;</span><br><span class="line">SELECT * FROM `表名2`;</span><br></pre></td></tr></table></figure><ol><li>DISTINCT 是可选的。表示显示结果时，是否去掉重复数据（查询记录的所有字段都相同才会去重）</li><li>SELECT 指定查询哪些列的数据。</li><li>SELECT * 的场合代表查询所有列</li><li>FROM 指定查询哪张表</li></ol><p><strong>使用表达式对查询的列进行运算</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (chinese + math + english) </span><br><span class="line">FROM `student`;</span><br></pre></td></tr></table></figure><p><strong>使用as语句给列起别名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`, (chinese + math + english) AS `all` </span><br><span class="line">FROM `student`;</span><br></pre></td></tr></table></figure><p><strong>在WHERE子句中常用的运算符</strong></p><table><thead><tr><th>运算符</th><th>说明</th><th></th></tr></thead><tbody><tr><td>比较运算符</td><td><code>&gt;</code> <code>&lt;</code> <code>&lt;=</code> <code>&gt;=</code> <code>=</code> <code>!=</code> <code>&lt;&gt;</code></td><td>大于、小于、大于等于、不等于</td></tr><tr><td></td><td><code>...BETWWEEN ... AND ...</code></td><td>显示某一区间的值(闭区间)</td></tr><tr><td></td><td><code>IN(值1, 值2, 值3)</code></td><td>显示在 <code>IN</code> 列表中的值</td></tr><tr><td></td><td><code>LIKE &#39;值&#39;</code> <code>NOT LIKE &#39;值&#39;</code></td><td>模糊查询（<code>LIKE &#39;A%&#39;</code> 即 A 开头就行）</td></tr><tr><td></td><td><code>IS NULL</code></td><td>判断是否为空</td></tr><tr><td>逻辑运算符</td><td><code>AND</code></td><td>多个条件同时成立</td></tr><tr><td></td><td><code>OR</code></td><td>多个条件任一成立</td></tr><tr><td></td><td><code>NOT</code></td><td>不成立</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `表名1`</span><br><span class="line">WHERE (chinese + english + math) &gt; 200 AND `name` LIKE `C%`;</span><br><span class="line"># 查找名字以C开头，总分大于200</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, sal FROM emp</span><br><span class="line">WHERE ename LIKE &#x27;__O%&#x27;</span><br><span class="line"># 查找第三个字母为O，前加两个下划线</span><br></pre></td></tr></table></figure><p><strong>用 ORDER BY 语句排序查询结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`,  (chinese + english + math) AS `total_score`</span><br><span class="line">FROM `student` </span><br><span class="line">ORDER BY `total_score` DESC;</span><br><span class="line"># 以 total_score 降序排列,结果只有name与total_score两行</span><br></pre></td></tr></table></figure><ol><li>ORDER BY指定排序的列，排序的列既可以是表中的列名，也可以是SELECT语句后指定的别名</li><li>降序：DESC</li><li>升序：ASC（不写也是默认升序）</li><li>ORDER BY语句应在SELECT语句的结尾</li></ol><p><strong>分组语句 <code>GROUP BY</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(`salary`), `age` FROM `workers` group by `age`;</span><br></pre></td></tr></table></figure><ul><li>在workers表中检索每个年龄组的平均工资和对应的年龄值，并按照工人的年龄进行分组</li></ul><p><strong>用 <code>HAVING</code> 语句过滤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(`salary`) AS avg_sal, `age` </span><br><span class="line">FROM `workers` </span><br><span class="line">group by `age` having avg_sal &gt; 2000;# group by 和 having一般配合使用，可使用别名</span><br></pre></td></tr></table></figure><h4 id="数据分组语句顺序"><a href="#数据分组语句顺序" class="headerlink" title="数据分组语句顺序"></a>数据分组语句顺序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, column3.. FROM table</span><br><span class="line">group by column    # 先分组</span><br><span class="line">having condition   # 对分组结果过滤</span><br><span class="line">order by column    # 排序</span><br><span class="line">limit start, rows; # 分页</span><br></pre></td></tr></table></figure><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `table_name` </span><br><span class="line">(</span><br><span class="line">    field1 datatype, # id INT,</span><br><span class="line">    field2 datatype, # `name` VARCHAR(255)</span><br><span class="line">    field3 datatype  # `birthday` DATE</span><br><span class="line">) CHARACTER SET 字符集 COLLATE 校对规则 ENGINE 引擎;</span><br></pre></td></tr></table></figure><ul><li>field：指定列名</li><li>datatype：指定列类型(字段类型)</li><li>character set：字符集，若不指定则同所在数据库字符集</li><li>collate：校对规则，若不指定则同所在数据库校对规则</li><li>engine：引擎</li></ul><h3 id="删除-修改"><a href="#删除-修改" class="headerlink" title="删除 &#x2F;修改"></a>删除 &#x2F;修改</h3><p><strong>添加列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `表名` ADD `列名` NOT NULL 列类型 DEFAULT 默认值 AFTER 某列名;</span><br></pre></td></tr></table></figure><p>在 <code>表名</code> 的 <code>某列名</code> 后面加入一个 <code>列名</code> 列，类型是 <code>列类型</code> 默认值为 <code>默认值</code></p><p><strong>修改列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `表名` MODIFY `列名` 列类型 NOT NULL DEFAULT 默认值;</span><br></pre></td></tr></table></figure><blockquote><p>把 <code>表名</code> 的 <code>列名</code> 列修改为 <code>列类型</code> ，默认值改为 <code>默认值</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `表名` CHANGE `列名` `新列名` 列类型 NOT NULL DEFAULT 默认值;</span><br></pre></td></tr></table></figure><p>把 <code>表名</code> 的 <code>列名</code> 列修改为 <code>新列名</code> ，类型是 <code>列类型</code> 默认值为 <code>默认值</code></p><p><strong>删除列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `表名` DROP `列名`;</span><br></pre></td></tr></table></figure><p>删除 <code>表名</code> 的 <code>列名</code> 列</p><p><strong>查看表的结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC `表名`;</span><br></pre></td></tr></table></figure><p><strong>修改表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE `表名` TO `新表名`;</span><br></pre></td></tr></table></figure><p><strong>修改表字符集</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `表名` CHARACTER SET &#x27;字符集&#x27;;</span><br></pre></td></tr></table></figure><p><strong>修改存储引擎</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `表名` ENGINE = 引擎;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>DUAL亚元表：系统表，可以作为测试表使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM DUAL;</span><br></pre></td></tr></table></figure><ul><li><p>查询表结构：<code>DESC table_name;</code></p></li><li><p>分页查询：表示从start+1行开始取，取出rows行，start从0开始计算，LIMIT放在语句最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `workers` LIMIT start, rows;</span><br><span class="line"># 公式</span><br><span class="line">SELECT * FROM `workers` </span><br><span class="line">ORDER BY empno</span><br><span class="line">LIMIT 每页显示记录数*（页数-1）, 每页显示的记录数;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Mysql数据类型"><a href="#Mysql数据类型" class="headerlink" title="Mysql数据类型"></a>Mysql数据类型</h2><p><img src="/img/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="MySQL数据类型"></p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><ol><li><p>使用规范：在满足需求的情况下，尽量使用占用空间小的类型</p></li><li><p>如何定义一个<strong>无符号</strong>整数：在后面加入 <code>unsigned</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `T1` (`id` TINYINT UNSIGNED);</span><br><span class="line">INSERT INTO `T1` VALUES(127);# 添加语句</span><br></pre></td></tr></table></figure><p>以 tinyint 为例，有符号的范围是 [-128, 127]，无符号范围是 [0, 255]</p></li></ol><h4 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h4><ol><li><p><code>float</code> 单精度，<code>double</code> 双精度</p></li><li><p><code>decimal(M,D)</code> 可以支持更加精确的小数位。其中 M 是小数位数的总数（精度），D 是小数点后的位数（标度）。</p><p>D &#x3D; 0 的场合，值没有小数部分。M 最大值是 65，D 最大值是 30</p><p>D 省略的场合，默认为 0；M 省略的场合，默认为 10</p><p>希望小数精度高的场合，推荐使用 <code>decimal(M,D)</code></p></li></ol><h4 id="bit类型（位类型）"><a href="#bit类型（位类型）" class="headerlink" title="bit类型（位类型）"></a>bit类型（位类型）</h4><ol><li><p><code>bit(m)</code> 中 m 的范围在 [1, 64]</p></li><li><p>添加数据的范围按照给定的位数（m）来确定。m &#x3D; 8 的场合表示一个字节，范围是 255</p></li><li><p>显示时，按照 bit 格式（位的方式，<code>bit(8)</code> 的场合 <code>7</code> 就显示为 <code>00000111</code>）</p></li><li><p>查询时，仍能按照十进制数查询</p></li><li><p>如果一个值只有0，1可以考虑使用bit，节约空间</p></li><li><p>使用不多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `T2` (num BIT(8));</span><br><span class="line">INSERT INTO `T2` VALUES(1);</span><br></pre></td></tr></table></figure></li></ol><h3 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h3><ol><li><p><code>char(size)</code>：固定长度字符串，size 范围 [0, 255]，最大 255，不管是中文还是字母都放size个，占用空间按字符计算。</p></li><li><p><code>varchar(size)</code>：可变长度字符串，（UTF-8）size 范围 [0, 21844]字符，最大 65532 <strong>字节</strong>（1 ~ 3 字节要用于记录大小；UTF8 最大为 (65535 - 3) &#x2F; 3 &#x3D; 21844 <strong>字符</strong>），因此占用空间不定。</p></li><li><p>size 表示<strong>字符</strong>数，不是字节数。无论中文英文，都最多存放 size 个字符</p></li><li><p><code>char(4)</code> 是定长（邮编、手机号、身份证号，提高查询速度）。这个场合，不管输入什么（如 ‘a’）都会占用 4 个字符的空间，剩下的空间用空格占位</p><p>相对的，<code>varchar(4)</code> 是变长。实际占用空间取决于输入的字符（实际数据大小 + 额外的 1 ~ 3 字节）</p></li><li><p>存放文本时，也可以使用 <code>text</code> 数据类型。可以把 <code>text</code> 列视为 <code>varchar</code> 列。<code>text</code> 不能有默认值，最大 2^16^ 字节</p><p>希望存放更多字符，还能选择 <code>mediumtext</code>（最大 2^24^ 字节）或 <code>longtext</code>（最大 2^32^ 字节）</p></li></ol><p><strong>字符串相关函数：</strong></p><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `T3` (</span><br><span class="line">job_time DATETIME, </span><br><span class="line">      login_time TIMESTAMP </span><br><span class="line">      NOT NULL DEFAULT CURRENT_TIMESTAMP </span><br><span class="line">      ON UPDATE CURRENT_TIMESTAMP);# 表示默认时间戳为当前时间戳</span><br><span class="line">      </span><br><span class="line">INSERT INTO `T3` (job_time)</span><br><span class="line">VALUES(`2022-11-11 10:10:10`);</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="合计函数-统计函数"><a href="#合计函数-统计函数" class="headerlink" title="合计函数&#x2F;统计函数"></a>合计函数&#x2F;统计函数</h3><p><strong>count</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM `student` WHERE `math` &gt; 90;</span><br></pre></td></tr></table></figure><ol><li>COUNT(*)返回满足条件的记录的行数</li><li>COUNT(列)统计满足条件的某列有多少，排除为null的列</li></ol><p><strong>sum</strong></p><ul><li>返回满足WHERE条件的行的和，一般使用在数值列</li><li>仅对数值起作用，否则没有意义</li><li>可以对多列进行求和</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(列名1), SUM(列名2), SUM(列名n)...FROM table_name;</span><br></pre></td></tr></table></figure><p><strong>avg</strong></p><ul><li>返回满足WHERE条件的一列的平均值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(列名1), AVG(列名2), AVG(列名n)...FROM table_name;</span><br></pre></td></tr></table></figure><p><strong>MAX&#x2F;MIN</strong></p><ul><li>返回满足WHERE条件的一列最大&#x2F;最小值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(列名1), MIN(列名2) FROM table_name;</span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>**CHARSET(str)**：返回字串字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CHARSET(ename) FROM emp;  # utf-8</span><br></pre></td></tr></table></figure><p>**CONCAT(str1, str2, …)**：连接字串，将多个列拼接成一列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(ename, &#x27;job is&#x27;, job) FROM emp;</span><br></pre></td></tr></table></figure><p>INSTR(str, sub)：返回 sub 在 str 出现的位置（没有就返回 0）</p><p>**UCASE(str)**：转成大写</p><p>**LCASE(str)**：转成小写</p><p>LEFT(str, len)：从 str 左边取 len 个字符</p><p><strong>LENGTH(str)<strong>：字符串长度,返回时是按</strong>字节</strong>返回</p><p>**REPLACE(str, str1, str2)**：在 str 列中用 str2 替换 str1</p><p>STRCMP(str1, str2)：逐字符比较两字串大小</p><p>**SUBSTRING(str, po, len)**：从 str 的 po 位取 len 个字符,这里 po 是从 1 开始计数的，不是数组的从零开始</p><p>LTRIM(str)：去除前端空格</p><p>RTRIM(str)：去除后端空格</p><p>TRIM(str)：去除左右空格</p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>**ABS(num)**：绝对值</p><p>BIN(num)：十进制转为二进制</p><p>**CEILING(num)**：向上取整，得到比num大的最小整数</p><p>CONV(num, from_base, to_base)：进制转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONV(5, 10, 2) FROM workers;# 把 5 从（当作） 10 进制转换成 2 进制</span><br></pre></td></tr></table></figure><p>**FLOOR(num)**：向下取整，得到比num小的最大整数</p><p>**FORMAT(num, decimal_places)**：保留小数位数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT FORMAT(3.1415926535897932384626, 2) FROM workers;</span><br><span class="line"># 这个数字四舍五入保留 2 位</span><br></pre></td></tr></table></figure><p>HEX(num)：转十六进制</p><p>LEAST(num1, num2, num3, …)：最小值</p><p>MOD(num, num2)：求余</p><p>**RAND([seed])**：返回随机数（范围 [0, 1]）。如果 seed 不变，返回的随机数也不变</p><p>RAND()：每次返回不同随机数</p><h3 id="时间和日期函数"><a href="#时间和日期函数" class="headerlink" title="时间和日期函数"></a>时间和日期函数</h3><p>**CURRENT_DATE()**：当前日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_DATE() FROM DUAL;</span><br></pre></td></tr></table></figure><p>**CURRENT_TIME()**：当前时间</p><p>**CURRENT_TIMESTAMP()**：当前时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `T1` (&#x27;date&#x27; TIMESTAMP </span><br><span class="line">              NOT NULL DEFAULT CURRENT_TIMESTAMP </span><br><span class="line">              ON UPDATE CURRENT_TIMESTAMP);</span><br><span class="line">              # 这一列内容是自动更新的时间戳</span><br></pre></td></tr></table></figure><p>**DATE(datetime)**：返回 datetime 的日期部分</p><p>**DATE_ADD(date, INTERVAL D_VALUE D_TYPE)**：在 date 中加上日期或时间</p><p>**DATE_SUB(date, INTERVAL D_VALUE D_TYPE)**：在 date 上减去一个时间</p><p>**DATEDIFF(date1, date2)**：两个日期差（天数），是 date1 - date2 的结果，因此结果可能是负数</p><p>TIMEDIFF(date1, date2)：两个时间差（多少小时、分钟、秒）</p><p>**NOW()**：当前日期 + 时间</p><p>YEAR(datetime)：返回日期的年份</p><p>MONTH(datetime)：返回日期的月份</p><p>DAY(datetime)：返回日期的日数</p><p>FROM_UNIXTIME(num)：把一个 UNIX_TIMESTAMP 转换为时间</p><p>FROM_UNIXTIME(num, format)：含有格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select distinct from_unixtime(100, &#x27;%Y-%m-%d %H:%i:%s&#x27;) from workers;</span><br><span class="line"># 1970-01-01 08:01:40</span><br><span class="line"># 在实际开发中，经常使用 int 保留一个 UNIX_TMIESTAMP。使用时转换为时间</span><br></pre></td></tr></table></figure><h3 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a>加密和系统函数</h3><p>**USER()**：查看用户，可以查看登录到 MySQL 的右哪些用户，及其 IP</p><p>DATABASE()：查询当前使用的数据库名称</p><p>**MD5(str)**：为字符串计算出一个 MD5 32 的字符串，（用户密码）加密</p><p>PASSWORD(str)：（另一个）加密函数，返回密码字符串，常用于对 MySQL 数据库对用户密码加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM musql.user;# 表示数据库.表,这样可以不用切换</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><ul><li><p>IF(expr1, expr2, expr3)：如果 expr1 为 true 则返回 expr2，否则返回 expr3，类似三元运算符</p></li><li><p>IFNULL(expr1, expr2)：如果 expr1 为 NULL 则返回 expr2，否则返回 expr1</p></li><li><pre><code class="mysql">SELECT CASE         WHEN expr1 THEN expr2        WHEN expr3 THEN expr4        ELSE expr5 END<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  类似多重分支。若 expr1 则 expr2，否则若 expr3 则 expr4，否则 expr5</span><br><span class="line"></span><br><span class="line">**函数结合使用**</span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">SELECT COUNT(*), COUNT(IF(comm IS NULL, 1, NULL))</span><br><span class="line">FROM emp</span><br><span class="line"># 获得总行数，以及获得comm为空的行数</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li><p>在默认情况下两表查询：</p><p>从表一取出一行与表二的每一行进行组合</p><p>返回的表包含表一表二的所有列，一共返回的记录数 &#x3D; 表一行数 * 表二行数</p><p>这样的默认处理结果称为<strong>笛卡尔集</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `emp`, `dept`;</span><br></pre></td></tr></table></figure><p>需要写出正确的过滤条件，多表查询的过滤条件<strong>不能少于表的个数-1</strong>，否则出现笛卡尔集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM `emp`, `dept`;</span><br><span class="line">WHERE emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><p>当我们需要指定显示某一张表的列时： 表名.列名</p></li></ul><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><ul><li><p>自连接指在同一张表的连接查询（将同一张表看作两张表来使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT worker.ename AS &#x27;职员名&#x27;, boss.ename AS &#x27;上级名&#x27;  # 列名不明确，取列别名</span><br><span class="line">FROM emp worker, emp boss# 1.分为两张相同表：表明 表别名</span><br><span class="line">WHERE worker.mgr = boss.empno;# 2.过滤条件</span><br></pre></td></tr></table></figure></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li><p>子查询指嵌入在其它sql语句中的select语句，也叫嵌套查询</p></li><li><p>单行子查询：只返回一行数据的子查询语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1. 先查询到SMITH 的部门号得到</span><br><span class="line"># 2. 把上面的select 语句当做一个子查询来使用</span><br><span class="line">SELECT deptno</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE ename = &#x27;SMITH&#x27;</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE deptno = (</span><br><span class="line">                SELECT deptno</span><br><span class="line">                FROM emp</span><br><span class="line">                WHERE ename = &#x27;SMITH&#x27;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li><li><p>多行子查询：返回多行数据的子查询语句，使用关键字IN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT job</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE deptno = 10;</span><br><span class="line"># 查询和部门10 工作相同的雇员的</span><br><span class="line"># 名字、岗位、工资、部门号, 但是不含10 号部门自己的雇员.</span><br><span class="line">SELECT ename, job, sal, deptno</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE job IN (</span><br><span class="line">                SELECT DISTINCT job</span><br><span class="line">                FROM emp</span><br><span class="line">                WHERE deptno = 10</span><br><span class="line">        ) AND deptno &lt;&gt; 10  # !=也可以写成&lt;&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>子查询当作临时表</strong></p><ul><li><p>将子查询语句放在FROM后</p></li><li><p>这样可以解决很多复杂的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT deptno, AVG(sal) AS avg_sal</span><br><span class="line">        FROM emp GROUP BY deptno</span><br><span class="line"></span><br><span class="line">SELECT ename, sal, temp.avg_sal, emp.deptno</span><br><span class="line">        FROM emp, (</span><br><span class="line">                SELECT deptno, AVG(sal) AS avg_sal</span><br><span class="line">                        FROM emp</span><br><span class="line">                        GROUP BY deptno</span><br><span class="line">        ) temp  # 赋予别名</span><br><span class="line">        WHERE emp.deptno = temp.deptno AND emp.sal &gt; temp.avg_sal</span><br></pre></td></tr></table></figure></li></ul><h4 id="ALL与ANY操作符"><a href="#ALL与ANY操作符" class="headerlink" title="ALL与ANY操作符"></a>ALL与ANY操作符</h4><ul><li><p>ALL指子查询的所有结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, sal, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE sal &gt; ALL(</span><br><span class="line">SELECT sal  # 去掉ALL使用MAX(sal)也可</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = 30</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>ANY指结果的其中一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, sal, deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE sal &gt; ALL(</span><br><span class="line">SELECT sal  # 去掉ANY使用MIN(sal)也可</span><br><span class="line">FROM emp</span><br><span class="line">WHERE deptno = 30</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h4 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h4><ul><li><p>查询返回多个列数据的子查询</p><p><code>(字段1, 字段2 ...) = (SELECT 字段1, 字段2 ...FROM ...)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1. 得到smith 的部门和岗位</span><br><span class="line">SELECT deptno , job</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE ename = &#x27;ALLEN&#x27;</span><br><span class="line"># 2 把上面的查询当做子查询来使用，并且使用多列子查询的语法进行匹配</span><br><span class="line">SELECT *</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE (deptno , job) = (</span><br><span class="line">                SELECT deptno , job</span><br><span class="line">                        FROM emp</span><br><span class="line">                        WHERE ename = &#x27;ALLEN&#x27;</span><br><span class="line">        ) AND ename != &#x27;ALLEN&#x27;</span><br></pre></td></tr></table></figure></li></ul><h4 id="表复制"><a href="#表复制" class="headerlink" title="表复制"></a>表复制</h4><ul><li><p>也叫自我复制&#x2F;蠕虫复制</p></li><li><p>有时为了对某个sql语句进行效率测试，需要海量数据时，可以使用此法为表创建海量数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE my_tab01</span><br><span class="line">        (`id` INT,</span><br><span class="line">        `name` VARCHAR(32),</span><br><span class="line">        `sal` DOUBLE,</span><br><span class="line">        `job` VARCHAR(32),</span><br><span class="line">        `deptno` INT);</span><br><span class="line"></span><br><span class="line"># 1. 先把emp 表的记录插入到my_tab01</span><br><span class="line">INSERT INTO my_tab01</span><br><span class="line">        (id, `name`, sal, job,deptno)</span><br><span class="line">        SELECT empno, ename, sal, job, deptno FROM emp;</span><br><span class="line"></span><br><span class="line"># 2. 自我复制</span><br><span class="line">INSERT INTO my_tab01</span><br><span class="line">SELECT * FROM my_tab01;</span><br></pre></td></tr></table></figure></li><li><p>删除一张表的重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 1. 先创建一张表my_tab02,</span><br><span class="line"># 2. 让my_tab02 有重复的记录</span><br><span class="line">CREATE TABLE my_tab02 LIKE emp; # 这个语句把emp 表的结构(列)，复制到my_tab02</span><br><span class="line">INSERT INTO my_tab02</span><br><span class="line">        SELECT * FROM emp;# 将emp的记录添加到my_tab02，执行两遍</span><br><span class="line"># 3. 考虑去重my_tab02 的记录</span><br><span class="line">-- (1) 先创建一张临时表my_tmp , 该表的结构和my_tab02 一样</span><br><span class="line">create table my_tmp like my_tab02</span><br><span class="line">-- (2) 把my_tmp 的记录通过distinct 关键字处理后把记录复制到my_tmp</span><br><span class="line">insert into my_tmp</span><br><span class="line">select distinct * from my_tab02;</span><br><span class="line">-- (3) 清除掉my_tab02 记录</span><br><span class="line">delete from my_tab02;</span><br><span class="line">-- (4) 把my_tmp 表的记录复制到my_tab02</span><br><span class="line">insert into my_tab02</span><br><span class="line">select * from my_tmp;</span><br><span class="line">-- (5) drop 掉临时表my_tmp</span><br><span class="line">drop table my_tmp;</span><br><span class="line">select * from my_tab02;</span><br></pre></td></tr></table></figure></li></ul><h4 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h4><ul><li><p>为了合并多个select语句的结果，可以使用集合1操作符号union，union all</p></li><li><p>union all：将两个查询结果合并，不会去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename,sal,job FROM emp WHERE sal&gt;2500 -- 5</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT ename,sal,job FROM emp WHERE job=&#x27;MANAGER&#x27; -- 3</span><br></pre></td></tr></table></figure></li><li><p>union:是将两个查询结果合并，会去重(去掉结果中的重复行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename,sal,job FROM emp WHERE sal&gt;2500 -- 5</span><br><span class="line">UNION</span><br><span class="line">SELECT ename,sal,job FROM emp WHERE job=&#x27;MANAGER&#x27; -- 3</span><br></pre></td></tr></table></figure></li></ul><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><ul><li><p>左外连接：左侧的表完全显示（即使没有匹配的记录，也会把左侧表完全显示）</p></li><li><p>右外连接：右侧的表完全显示</p></li></ul><p>原来的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;name&#x27;, stu.id, grade</span><br><span class="line">FROM stu, exam</span><br><span class="line">WHERE stu.id = exam.id;  # 无匹配的记录项不会显示</span><br></pre></td></tr></table></figure><p>左外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;name&#x27;, stu.id, grade</span><br><span class="line">FROM stu LEFT JOIN exam</span><br><span class="line">ON stu.id = exam.id;  # 左表即使无匹配也会完全显示</span><br></pre></td></tr></table></figure><p>右外连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#x27;name&#x27;, stu.id, grade</span><br><span class="line">FROM stu RIGHT JOIN exam</span><br><span class="line">ON stu.id = exam.id;  # 右表即使与左表无匹配记录，右表也会完全显示</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>约束用于确保数据库的数据满足特定的商业规则</li><li>约束包括：not null，unique，primary key，foreign key和check五种</li></ul><h3 id="primary-key主键"><a href="#primary-key主键" class="headerlink" title="primary key主键"></a>primary key主键</h3><ul><li><p><code>字段名 字段类型 primary key</code></p></li><li><p>用于唯一的表示表行的数据，当定义主键约束后，该列不能重复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `temp1` </span><br><span class="line">(`id` INT PRIMARY KEY,</span><br><span class="line">`name` CHAR(5),</span><br><span class="line">`location` varchar(32));</span><br><span class="line">CREATE TABLE `temp1` </span><br><span class="line">(`id` INT,</span><br><span class="line">`name` CHAR(5),</span><br><span class="line">`location` varchar(32),</span><br><span class="line">         PRIMARY KEY(`id`, `name`)# 复合主键，id和name同时相同才报错</span><br><span class="line">        );</span><br></pre></td></tr></table></figure></li></ul><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ol><li><p>PRIMARY KEY不能重复且不能为空</p></li><li><p>一张表中最多只能有一个主键，但可以是复合主键</p></li><li><p>主键指定的方式有两种</p><ul><li><p><code>字段名 字段类型 primary key</code></p></li><li><p>（在表定义的最后写）<code>PRIMARY KEY(列名)</code></p></li></ul></li><li><p>使用desc表名可以看到primary key的情况</p></li><li><p>在实际开发中，每个表往往都会设置一个主键</p></li></ol><h3 id="not-null非空"><a href="#not-null非空" class="headerlink" title="not null非空"></a>not null非空</h3><ul><li><code>字段名 字段类型 not null</code></li><li>定义非空约束后，插入数据时，必须为该列提供数据</li></ul><h3 id="unique唯一"><a href="#unique唯一" class="headerlink" title="unique唯一"></a>unique唯一</h3><ul><li><code>字段名 字段类型 unique</code></li><li>定义了唯一约束后，该列值是不能重复的。</li></ul><h4 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h4><ol><li>如果没有指定not null，则unique字段可以有多个null</li><li>如果是unique  not null，则使用效果类似primary key</li><li>一张表可以有多个unique字段</li></ol><h3 id="foreign-key外键"><a href="#foreign-key外键" class="headerlink" title="foreign key外键"></a>foreign key外键</h3><ul><li><code>foreign key (从表列名) references 主表名(列名)</code></li><li>用于定义主表和从表间的关系。外键约束要定义在<strong>从表上</strong>，主表必须有主键或唯一约束。定义外键约束后，要求外键列数据必须在主表的主键列存在或为 null</li></ul><h4 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h4><ol><li><p>外键指向的表的字段，要求是 primary key 或 unique</p></li><li><p>表的类型是 innodb，这样的表才支持外键</p></li><li><p>外键字段的类型要和主子段类型一致（可以长度不同）</p></li><li><p>外键字段的值，必须在主键字段中出现过，或（在外键字段允许的情况下）为 null</p></li><li><p>一旦确立主外键关系，数据就不能随意删除了（有任意记录指向主表某记录，该主表记录就不能删除）</p></li><li><p>如何删除外键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE 表名;# 查看该表创建语句，获取外键名称</span><br><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名;  # 删除外键</span><br></pre></td></tr></table></figure></li></ol><h3 id="check（了解）"><a href="#check（了解）" class="headerlink" title="check（了解）"></a>check（了解）</h3><ul><li><p><code>字段名 字段类型 check (条件)</code></p></li><li><p>用于强制行数据必须满足的条件。（特别的，MySQL 5.7 中有 check 语法校验，但实际不生效）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t23 (</span><br><span class="line">        id INT PRIMARY KEY,</span><br><span class="line">        `name` VARCHAR(32) ,</span><br><span class="line">        sex VARCHAR(6) CHECK (sex IN(&#x27;man&#x27;,&#x27;woman&#x27;)),# sex必须填man或woman</span><br><span class="line">        sal DOUBLE CHECK ( sal &gt; 1000 AND sal &lt; 2000)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure></li></ul><h3 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h3><ul><li><code>字段名 字段类型 primary key auto_increment</code></li><li>添加自增长字段的方式：<ul><li><code>insert into xxx (字段1, 字段2...) values(null, &#39;值1&#39;,...);</code>，null对应字段1</li><li><code>insert into xxx (字段2...) values(&#39;值1&#39;,...);</code>，不给字段一赋值，自动增长</li><li><code>insert into xxx values(null, &#39;值&#39;...);</code>，把所有的数据写清楚，字段1给null</li></ul></li></ul><h4 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h4><ol><li><p>如果希望自增长，插入数据时该列插入 null</p></li><li><p>一般来说自增长是配合 primary key 使用的</p></li><li><p>自增长也能（配合 unique）单独使用</p></li><li><p>自增长修饰的字段是整数型的（小数类型也可以，但很少这样用）</p></li><li><p>自增长从 1 开始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 auto_increment = 新的开始值;</span><br></pre></td></tr></table></figure><p>这样，能修改这个自增长的默认值，下次自增长从新值开始</p></li><li><p>如果添加数据时，给自增长字段指定了具体的值，则以指定的值为准</p><p>一般来说，指定了自增长，就按自增长的规则添加顺序</p></li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li><p><code>CREATE INDEX 索引名 ON 表名 (列名);</code></p></li><li><p>提高数据库性能，增加查询速度</p></li><li><p>没有索引时：</p><p>查询的场合总是会进行全表扫描</p></li><li><p>有索引时：</p><p>形成一个索引的数据结构（如二叉树），根据该结构进行查找</p><p>会造成磁盘的占用</p><p>对 update delete insert 语句的效率产生影响，因为需要重新维护索引</p></li></ul><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><ol><li><p>主键索引：primary key。主键自动为主索引</p></li><li><p>唯一索引：unique</p></li><li><p>普通索引：index，使用最多</p></li><li><p>全文索引：fulltext</p><p>一般开发不用 MySQL 自带的全文索引，而是使用全文搜索（Solr）和ElasticSearch（ES）</p></li></ol><h3 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h3><ul><li><p>查询索引：Non_unique为0即唯一索引，1即不是唯一索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM 表名;</span><br><span class="line">SHOW INDEX FROM 表名;</span><br><span class="line">SHOW KEYS FROM 表名;</span><br></pre></td></tr></table></figure></li><li><p>添加唯一索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX 索引名 ON 表名(列名);</span><br></pre></td></tr></table></figure></li><li><p>添加普通索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX 索引名 ON 表名(列名);</span><br><span class="line">ALTER TABLE 表名 ADD INDEX 索引名(列名);</span><br></pre></td></tr></table></figure><blockquote><p>如果某列的值是不会重复的，则优先考虑唯一索引。否则用普通索引。</p></blockquote></li><li><p>添加主键索引（添加主键）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD PRIMARY KEY (列名);</span><br></pre></td></tr></table></figure></li><li><p>删除索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX 索引名 ON 表名;</span><br></pre></td></tr></table></figure></li><li><p>删除主键索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><blockquote><p>因为主键索引只有一个，所以不用指定列名</p></blockquote></li><li><p>修改索引：</p><p>先删除，再添加新的索引</p></li></ul><h3 id="创建索引规则"><a href="#创建索引规则" class="headerlink" title="创建索引规则"></a>创建索引规则</h3><ol><li>较频繁地作为查询条件字段 <strong>应该</strong> 作为索引</li><li>唯一性太差（比如男、女只有两种形式）的字段（即使频繁作为查询条件）<strong>不适合</strong> 单独创建索引</li><li>更新非常频繁的字段 <strong>不适合</strong> 创建索引</li><li>不会出现在 WHERE 子句的字段 <strong>不应该</strong> 创建索引</li></ol><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>事务用于保证数据的唯一性，由一组相关的dml语句组成，该组的dml语句要么全部成功，要么全部失败。比如转账就要用事务处理，以保证数据的一致性。</li><li>锁：执行事务操作时，MySQL 会在表上加锁，防止其他用户修改表的数据。这对用户来讲是非常重要的。</li></ul><h3 id="事务的操作"><a href="#事务的操作" class="headerlink" title="事务的操作"></a>事务的操作</h3><ul><li><p><code>start transaction</code>：开始一个事务</p></li><li><p><code>savepoint 保存点名</code>：设置保存点，保存点是事务中的点，用于取消部分事务</p></li><li><p><code>rollback to 保存点名</code>：回退事务到特定保存点，删除该保存点之后的所有保存点</p></li><li><p><code>rollback</code>：回退所有事务</p></li><li><p><code>commit</code>：提交事务，让所有操作生效。</p><p>执行该语句后，会确认事务的变化、删除所有保存点、释放锁，并让数据生效。</p><p>该语句不能回退。使用该语句后，其它会话（其他连接）将可以查看到事务变化后的新数据。</p></li></ul><h3 id="事务细节"><a href="#事务细节" class="headerlink" title="事务细节"></a>事务细节</h3><ol><li><p>如果不开始事务，默认情况下，dml 操作是自动提交的，不能回滚。</p></li><li><p>开始一个事务，没有创建保存点的场合，可以执行 rollback，默认回退到事务开始时的状态</p></li><li><p>可以在这个事务中创建多个保存点</p></li><li><p>可以在事务没有提交前选择回退到哪个保存点</p></li><li><p>MySQL 需要 innoDB 的存储引擎才可以使用。MyISAM 不行</p></li><li><p>开始事务：<code>start transaction</code></p><p>关闭默认自动提交事务：<code>set autocommit = off;</code></p></li></ol><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><ul><li><p>隔离：多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性（在不同的事务中，根据隔离的强度不同，每个事务看到的表的数据不一样）</p></li><li><p>隔离级别：定义了事务与事务之间的隔离程度。隔离级别是和事务相关的。</p><p>查看当前会话隔离级别：<code>select @@tx_isolation;</code></p></li><li><p>如果不考虑隔离性，可能引发问题：</p><ul><li>脏读（dirty read）：当一个事务读取另一个事务尚未提交的修改时，产生脏读</li><li>不可重复读（nonreapeatable read）：同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读</li><li>幻读（phantom read）：同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的结果集，此时发生幻读</li></ul><table><thead><tr><th>MySQL 隔离级别（4种）</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>加锁读</th></tr></thead><tbody><tr><td>读未提交（Read uncommitted）</td><td>√</td><td>√</td><td>√</td><td>不加锁</td></tr><tr><td>读已提交（Read committed）</td><td>×</td><td>√</td><td>√</td><td>不加锁</td></tr><tr><td>可重复读（Reapeatable read）</td><td>×</td><td>×</td><td>×</td><td>不加锁</td></tr><tr><td>可串行化（Serializable）</td><td>×</td><td>×</td><td>×</td><td>加锁</td></tr></tbody></table></li></ul><p>​MySQL 的默认隔离级别是 Reapeatable read，一般情况下不需要修改</p><h4 id="隔离级别的操作"><a href="#隔离级别的操作" class="headerlink" title="隔离级别的操作"></a>隔离级别的操作</h4><ul><li><p>查看当前会话隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure></li><li><p>查看系统隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure></li><li><p>设置当前会话隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level 隔离级别</span><br></pre></td></tr></table></figure></li><li><p>设置系统隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transacion isolation level 隔离级别</span><br></pre></td></tr></table></figure></li><li><p>全局修改：修改 mysql.ini 配置文件。</p><p>在 mysql.ini 文件的末尾加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#设置默认隔离级别</span><br><span class="line">transaction-isolation = REPEATABLE-READPGSQL</span><br></pre></td></tr></table></figure><p>可选参数有：<code>READ-UNCOMMITTED</code>、<code>READ-COMMITTED</code>、<code>REPEATABLE-READ</code>、<code>SERIALIZABLE</code></p></li></ul><h3 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h3><ol><li><p><strong>原子性（Atomicity）</strong>：</p><p>事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</p></li><li><p><strong>一致性（Consistency）</strong>：</p><p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态</p></li><li><p><strong>隔离性（Isolation）</strong>：</p><p>多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰。多个并发事务之间相互隔离</p></li><li><p><strong>持久性（Durability）</strong>：</p><p>一个事务一旦被提交，它对数据库中数据的改变就是永久性的。接下来即使数据库发生故障也不应该对其有任何影响。</p></li></ol><h2 id="MySQL表类型和存储引擎"><a href="#MySQL表类型和存储引擎" class="headerlink" title="MySQL表类型和存储引擎"></a>MySQL表类型和存储引擎</h2><ul><li><p>MySQL 的表类型由存储引擎（Storage Engines）决定，主要包括MyISAM、innoDB、Memory等。</p></li><li><p>主要支持六种类型：CSV、Memory（常用）、ARCHIVE、MRG_MYISAM、MyISAM（常用）、InnoDB（常用）</p></li><li><p>这六类又分为两类：</p><ul><li>事务安全型（transaction-safe）：InnoDB，支持事务</li><li>非事务安全型（non-transaction-safe）：其他类型都是非事务安全型</li></ul></li><li><p>查看所有的存储引擎：<code>SHOW ENGINES</code></p></li></ul><table><thead><tr><th>特点</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>批量插入速度</td><td>高</td><td>低</td><td>高</td><td>非常高</td></tr><tr><td>事务安全</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>表锁</td><td>行锁</td><td>表锁</td><td>行锁</td></tr><tr><td>存储限制</td><td>无</td><td>64TB</td><td>有（内存）</td><td>无</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>哈希索引</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>集群索引</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>数据缓存</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>数据可压缩</td><td>支持</td><td></td><td></td><td>支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>无</td><td>非常低</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td><td>低</td></tr><tr><td>支持外键</td><td></td><td>支持</td><td></td><td></td></tr></tbody></table><ol><li>MyISAM 存储引擎不支持事务，也不支持外键。但其访问速度快，对事务完整性没有要求</li><li>InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但比起 MyISAM，InnoDB 写入的处理效率差一些，并且会占用更多磁盘空间以保留数据和索引。</li><li>Memory 存储引擎使用存在内存中的内容来创建表。每个 Memory 表只实际对应一个磁盘文件。Memory 类型的表访问得非常快，因为它的数据是放在内存中的，并且默认使用 HASH 索引。但是一旦 MySQL 服务关闭，表中的数据就会丢掉（表的结构还在）。</li></ol><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>视图是一个虚拟表。其内容由查询定义。和其他表一样，视图含有列，其数据来源于真实的表（基表）</li><li>视图与基表间有映射关系，只要将视图授权给用户，就可以隐藏隐私信息</li><li>通过视图可以改变基表的数据，基表的改变也会影响视图</li></ul><h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><ul><li><p>创建视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名 AS SELECT 列名 FROM 表名;</span><br></pre></td></tr></table></figure></li><li><p>查看视图：与查看基表相同</p></li><li><p>修改视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW 视图名 AS SELECT语句;</span><br></pre></td></tr></table></figure></li><li><p>显示创建视图的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE VIEW 视图名;</span><br></pre></td></tr></table></figure></li><li><p>删除视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW  视图名1,视图名2;</span><br></pre></td></tr></table></figure></li></ul><h4 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h4><ol><li>创建视图后，数据库中只有一个视图结构文件，没有视图数据</li><li>视图的数据变化会影响基表，基表数据变化也会影响视图</li><li>视图中可以再使用视图，新视图仍指向基表</li></ol><h4 id="视图最佳实践"><a href="#视图最佳实践" class="headerlink" title="视图最佳实践"></a>视图最佳实践</h4><ul><li><p><strong>安全</strong>：</p><p>一些数据有不能让用户看到的重要信息。藉由建立一个视图，用户可以查询自己需要的字段，而不能查看保密的字段。</p></li><li><p><strong>性能</strong>：</p><p>关系数据库的数据常常分表存储，通过外键建立这些表之间的联系。此时，查询数据库会使用低效的连接（JOIN）。藉由建立一个视图，可以避免使用 JOIN 查询数据。</p></li><li><p><strong>灵活</strong>：</p><p>系统中有一张采用过时设计，即将废弃的旧表，但这张旧表不能轻易修改。藉由建立一个视图，把数据映射到新表，少做很多改动的同时达到了升级数据表的目的。</p></li></ul><h2 id="MySQL管理"><a href="#MySQL管理" class="headerlink" title="MySQL管理"></a>MySQL管理</h2><h3 id="MySQL用户管理"><a href="#MySQL用户管理" class="headerlink" title="MySQL用户管理"></a>MySQL用户管理</h3><ul><li><p>MySQL用户都储存在系统数据库mysql的user表中</p></li><li><p>字段说明：</p><ul><li>host：该用户允许登录的位置。<code>localhost</code> 的场合表示该用户只允许本机登录，也可指定ip地址，如<code>192.168.1.100</code></li><li>user：用户名</li><li>authentication：（通过 <code>password()</code> 函数加密后的）密码</li></ul></li><li><p>创建用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;允许登录位置&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line"># 创建用户，同时指定密码</span><br></pre></td></tr></table></figure><ul><li><p>项目开发时，根据不同的开发人员赋予相应的mysql操作权限，数据库管理人员root根据需要创建不同用户，赋给相应权限，供开发人员使用</p></li><li><p>不同的数据库用户，登录到DBMS后，根据相应权限，操作的数据库和数据对象（表、视图、触发器）都不一样</p></li><li><p><code>@</code> 后面不能加空格</p></li><li><p>创建用户时，如果不指定 Host，默认为 <code>%</code>。</p><p><code>%</code> 表示所有 IP 都有连接权限</p></li><li><p>也可以这样指定：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;puppet&#x27;@&#x27;192.168.1.%&#x27;</span><br><span class="line"># 表示 192.168.1.* 的 IP 都可以登录用户</span><br></pre></td></tr></table></figure></li><li><p>删除用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;允许登录位置&#x27;;</span><br></pre></td></tr></table></figure><p>删除用户时，如果 host 不是 <code>%</code>，需要明确指定 <code>&#39;用户&#39;@&#39;host&#39;</code></p></li><li><p>用户修改密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&#x27;密码&#x27;);#修改自己密码</span><br><span class="line">SET PASSWORD FOR &#x27;用户名&#x27;@&#x27;登录位置&#x27; = PASSWORD(&#x27;密码&#x27;);#修改任意用户密码</span><br></pre></td></tr></table></figure><p>修改其他用户密码，需要拥有相应权限</p></li></ul><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul><li><strong>权限列表：</strong>（一般是root用户给其他用户授权）</li></ul><table><thead><tr><th>权限</th><th>意义</th></tr></thead><tbody><tr><td>ALL</td><td>设置除 GRANT OPTION 外所有权限</td></tr><tr><td>ALTER</td><td>允许使用 <code>ALTER TABLE</code></td></tr><tr><td>ALTER ROUTINE</td><td>更改或取消已存储的子程序</td></tr><tr><td>CREATE</td><td>允许使用 <code>CREATE TABLE</code></td></tr><tr><td>CREATE ROUTINE</td><td>创建已存储的子程序</td></tr><tr><td>CREATE TEMPORARY TABLES</td><td>允许使用 <code>CREATE TEMPORARY TABLE</code></td></tr><tr><td>CREATE USER</td><td>允许使用 <code>CREATE USER</code>、<code>DROP USER</code>、<code>RENAME USER</code>、<code>REVOKE ALL PRIVILEGES</code></td></tr><tr><td>CREATE VIEW</td><td>允许使用 <code>CREATE VIEW</code></td></tr><tr><td>DELETE</td><td>允许使用 <code>DELETE</code></td></tr><tr><td>DROP</td><td>允许使用 <code>DROP TABLE</code></td></tr><tr><td>EXECUTE</td><td>允许用户运行已存储的子程序</td></tr><tr><td>FILE</td><td>允许使用 <code>SELECT…INTO OUTFILE</code>、<code>LOAD DATA INFILE</code></td></tr><tr><td>INDEX</td><td>允许使用 <code>CREATE INDEX</code>、<code>DROP INDEX</code></td></tr><tr><td>INSERT</td><td>允许使用 <code>INSERT</code></td></tr><tr><td>LOCK TABLES</td><td>允许对拥有 SELECT 权限的表使用 <code>LOCK TABLES</code></td></tr><tr><td>PROCESS</td><td>允许使用 <code>SHOW FULL PROCESSLIST</code></td></tr><tr><td>REFERENCES</td><td>-</td></tr><tr><td>RELOAD</td><td>允许使用 <code>FLUSH</code></td></tr><tr><td>REPLICATION CLIENT</td><td>允许用户询问从属服务器或主服务器的地址</td></tr><tr><td>REPLICATION SLAVE</td><td>用于复制星从属服务器（从主服务器中读取二进制日志事件）</td></tr><tr><td>SHOW DATABASE</td><td>允许使用 <code>SHOW DATABASE</code></td></tr><tr><td>SHOW VIEW</td><td>允许使用 <code>SHOW CREATE VIEW</code></td></tr><tr><td>SHUTDOWN</td><td>允许使用 <code>mysqladmin shutdown</code></td></tr><tr><td>SUPER</td><td>允许使用 <code>CHANGE MASTER</code>、<code>KILL</code>、<code>PURGE MASTER LOGS</code>、<code>SET GLOBAL</code> 语句，<code>mysqladmin debug</code> 命令。允许连接（一次），即使达到 max_connetions</td></tr><tr><td>UPDATE</td><td>允许使用 <code>UPDATE</code></td></tr><tr><td>USAGE</td><td>无权限</td></tr><tr><td>GRANT OPTION</td><td>允许授予权限</td></tr></tbody></table><ul><li><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT 权限列表 ON 库.对象名 TO &#x27;用户名&#x27;@&#x27;登录位置&#x27; identified by &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><p>权限列表，多个权限用逗号分开：</p><ul><li><code>GRANT select ON ...</code></li><li><code>GRANT select, delete, create ON ...</code></li><li><code>GRANT all 【privileges】 ON ...</code>表示赋予用户在该对象上的所有权限</li></ul><p><code>库.对象名</code> 是 <code>*.*</code> 的场合，代表本系统所有库的所有对象，<code>库.*</code>的场合表示某个库中的所有数据对象</p><p><code>identified by &#39;密码&#39;</code> 可省略。若写出，则用户存在即修改密码，不存在即创建用户。</p></li><li><p>回收用户权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE 权限列表 ON 库.对象名 FROM &#x27;用户名&#x27;@&#x27;登录位置&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>权限生效指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>如果权限没有生效，执行这个指令。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·反射</title>
      <link href="/2024/09/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/09/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><ul><li>反射机制（Reflection）允许程序在执行期借助于 Reflection API 取得任何类的内部信息（如成员变量、成员方法等），并能操作对象的属性及方法。反射在设计模式和框架底层都会用到。</li><li>加载完类之后，在堆中就产生一个 <code>Class</code> 类的对象（一个类只有一个 <code>Class</code> 对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构。所以，形象地称之为：反射</li><li>Java反射机制原理图：（类加载器使用loadClass（）方法完成类方法并生成Class类对象）</li></ul><p>![Java 反射机制原理示意图](&#x2F;img&#x2F;Java 反射机制原理示意图.jpg)</p><p>###反射机制功能</p><ol><li>在运行时判断任意一个对象所属的<strong>类</strong></li><li>在运行时构造任意一个类的<strong>对象</strong></li><li>在运行时得到任意一个类所具有的成员<strong>变量</strong>和<strong>方法</strong></li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><h3 id="反射相关的主要类"><a href="#反射相关的主要类" class="headerlink" title="反射相关的主要类"></a>反射相关的主要类</h3><ul><li><p><code>java.lang.Class</code>：代表一个类。<code>Class</code> 对象表示某个类加载后在堆中的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载类, 返回Class 类型的对象cls</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br><span class="line"><span class="comment">//通过cls 得到你加载的类com.hspedu.Cat 的对象实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">System.out.println(<span class="string">&quot;o 的运行类型=&quot;</span> + o.getClass()); <span class="comment">//运行类型</span></span><br></pre></td></tr></table></figure></li><li><p><code>java.lang.reflect.Method</code>：代表类的方法，对象表示某个类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过cls 得到你加载的类com.hspedu.Cat 的methodName&quot;hi&quot; 的方法对象</span></span><br><span class="line"><span class="comment">//即：在反射中，可以把方法视为对象（万物皆对象）</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line"><span class="comment">//通过method1 调用方法: 即通过方法对象来实现调用方法</span></span><br><span class="line">method1.invoke(o);</span><br></pre></td></tr></table></figure></li><li><p><code>java.lang.reflect.Field</code>：代表类的成员变量，对象代表类的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Filed</span> <span class="variable">filedName</span> <span class="operator">=</span> cls.getFiled(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">System.out.println(fieldName.get(o)); </span><br></pre></td></tr></table></figure><blockquote><p>getFiled不能得到私有的属性</p></blockquote></li><li><p><code>java.lang.reflect.Constructor</code>：代表类的构造方法，对象代表类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getConstructor();</span><br><span class="line"><span class="comment">//小括号中可以指定构造器参数类型，此处是无参构造器</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> cls.getConstructor(String.class)；<span class="comment">//传入String的class对象</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h3><ul><li>优点：可以动态地创建和使用对象（也是框架底层核心），使用灵活。没有反射机制，框架技术就失去底层支撑，使Java拥有动态语言的特性</li><li>缺点：使用反射基本是解释执行。这对执行速度有影响。</li></ul><h3 id="反射调用优化-关闭访问检查"><a href="#反射调用优化-关闭访问检查" class="headerlink" title="反射调用优化-关闭访问检查"></a>反射调用优化-关闭访问检查</h3><ol><li><p><code>Method</code> 和 <code>Field</code>、<code>Constructor</code> 对象都有 <code>setAccessible()</code> 方法</p></li><li><p><code>setAccessible()</code> 作用是启动和禁用访问安全检查的开关</p></li><li><p>参数值为 true，表示反射对象在使用时取消访问检查，这样能提高反射效率。</p><p>参数值为 false ，表示执行访问检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method1.setAccessible(<span class="literal">true</span>);<span class="comment">//取消在反射调用方法时的访问检查</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><ol><li><code>Class</code> 也是类，因此也继承 <code>Object</code> 类</li><li><code>Class</code> 类不是 new 出来的，而是系统创建的</li><li>对于某个类的 <code>Class</code> 类对象，在内存中只有一份，因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个 <code>Class</code> 实例生成</li><li>通过 <code>Class</code> 可以完整地得到一个类的完整结构，通过一系列 API</li><li><code>Class</code> 对象是存放在堆的</li><li>类的字节码二进制数据，是放在方法区的。有的地方称为类的元数据（包括 方法代码、变量名、方法名、访问权限 等）</li></ol><h3 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h3><table><thead><tr><th align="center">方法名</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">Class.forName(String)</td><td align="center">返回指定类名的 <code>Class</code> 对象（static Class）</td></tr><tr><td align="center">newInstance()</td><td align="center">返回一个无参构造器创建的实例（Object）</td></tr><tr><td align="center">getName()</td><td align="center">返回该 <code>Class</code> 对象表示的实体的全类名</td></tr><tr><td align="center">getSuperClass()</td><td align="center">返回该 <code>Class</code> 对象的父类 <code>Class</code> 对象</td></tr><tr><td align="center">getInterface()</td><td align="center">返回该 <code>Class</code> 对象的接口（数组Class[]）</td></tr><tr><td align="center">getClassLoader()</td><td align="center">返回该 <code>Class</code> 对象的加载器（<code>ClassLoader</code> 类型）</td></tr><tr><td align="center">getSuperclass()</td><td align="center">返回该 <code>Class</code> 对象实体的超类的 <code>Class</code></td></tr><tr><td align="center">getConstructors()</td><td align="center">返回本类所有包含 <code>public</code> 修饰的构造器的 <code>Constructor</code> 对象数组（Constructor[]）</td></tr><tr><td align="center">getDeclaredFields()</td><td align="center">返回Field对象的一个数组，获取本类中所有属性</td></tr><tr><td align="center">getMethod(String name, Class paramTypes, …)</td><td align="center">返回一个 <code>Method</code> 对象，其形参类型为 paramType</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 . 获取到Car 类对应的Class 对象</span></span><br><span class="line"><span class="comment">//&lt;?&gt; 表示不确定的Java 类型</span></span><br><span class="line">Class&lt;?&gt; cls = Class.forName(classAllPath);</span><br><span class="line"><span class="comment">//2. 输出cls</span></span><br><span class="line">System.out.println(cls); <span class="comment">//显示cls 对象, 是哪个类的Class 对象com.hspedu.Car</span></span><br><span class="line">System.out.println(cls.getClass());<span class="comment">//输出cls 运行类型java.lang.Class</span></span><br><span class="line"><span class="comment">//3. 得到包名</span></span><br><span class="line">System.out.println(cls.getPackage().getName());<span class="comment">//包名</span></span><br><span class="line"><span class="comment">//4. 得到全类名</span></span><br><span class="line">System.out.println(cls.getName());</span><br><span class="line"><span class="comment">//5. 通过cls 创建对象实例</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) cls.newInstance();</span><br><span class="line">System.out.println(car);<span class="comment">//相当于car.toString()</span></span><br><span class="line"><span class="comment">//6. 通过反射获取属性brand</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">brand</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;brand&quot;</span>);</span><br><span class="line">System.out.println(brand.get(car));<span class="comment">//宝马</span></span><br><span class="line"><span class="comment">//7. 通过反射给属性赋值</span></span><br><span class="line">brand.set(car, <span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">System.out.println(brand.get(car));<span class="comment">//奔驰</span></span><br><span class="line"><span class="comment">//8. 得到所有的属性(字段)</span></span><br><span class="line">System.out.println(<span class="string">&quot;=======所有的字段属性====&quot;</span>);</span><br><span class="line">Field[] fields = cls.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">System.out.println(f.getName());<span class="comment">//名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Class对象的六种方式"><a href="#获取Class对象的六种方式" class="headerlink" title="获取Class对象的六种方式"></a>获取Class对象的六种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cloris</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;&#125;<span class="comment">//测试类</span></span><br></pre></td></tr></table></figure><ol><li><p>（编译阶段）通过Class类静态方法<code>forName()</code>获取</p><p>前提：已知一个类的全类名（路径、包名、类名），且该类在类路径下</p><p>应用场景：配置文件，读取类全路径，加载类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可能抛出 ClassNotFoundExcption</span></span><br><span class="line"><span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.cloris.Test&quot;</span>;<span class="comment">//读取配置文件</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">class1</span> <span class="operator">=</span> Class.forName(classAllPath);</span><br></pre></td></tr></table></figure></li><li><p>（加载阶段）类名.class</p><p>前提：已知具体的类</p><p>应用场景：参数传递，如通过反射得到对应构造器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最安全可靠，程序性能最高</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">class2</span> <span class="operator">=</span> Test.class;</span><br></pre></td></tr></table></figure></li><li><p>（运行阶段）对象.getClass</p><p>前提：已知某个类的实例</p><p>应用场景：通过创建好的对象获取Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">class3</span> <span class="operator">=</span> test.getClass();</span><br></pre></td></tr></table></figure></li><li><p>通过类加载器（共四种）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到类加载器</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> car.getClass().getClassLoader();</span><br><span class="line"><span class="comment">//通过类加载器得到Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">class4</span> <span class="operator">=</span> classLoader.loadClass(classAllPath);</span><br><span class="line"><span class="comment">//class1、class2、class3、class4是同一个对象</span></span><br></pre></td></tr></table></figure></li><li><p>基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class cls = 基本数据类型.class</span></span><br><span class="line">Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br></pre></td></tr></table></figure></li><li><p>基本数据类型对应的包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class cla = 包装类.TYPE</span></span><br><span class="line">Class&lt;Integer&gt; type = Integer.TYPE;</span><br><span class="line"><span class="comment">//底层integerClass与type是同一对象</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="哪些类有-Class-对象"><a href="#哪些类有-Class-对象" class="headerlink" title="哪些类有 Class 对象"></a>哪些类有 <code>Class</code> 对象</h3><ol><li>外部类、成员内部类、静态内部类、局部内部类、匿名内部类</li><li>接口（interface）</li><li>数组</li><li>枚举（enum）</li><li>注解</li><li>基本数据类型</li><li>void</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; cls1 = String.class;<span class="comment">//外部类</span></span><br><span class="line">Class&lt;Serializable&gt; cls2 = Serializable.class;<span class="comment">//接口</span></span><br><span class="line">Class&lt;Integer[]&gt; cls3 = Integer[].class;<span class="comment">//数组</span></span><br><span class="line">Class&lt;<span class="type">float</span>[][]&gt; cls4 = <span class="type">float</span>[][].class;<span class="comment">//二维数组</span></span><br><span class="line">Class&lt;Deprecated&gt; cls5 = Deprecated.class;<span class="comment">//注解</span></span><br><span class="line">Class&lt;Thread.State&gt; cls6 = Thread.State.class;<span class="comment">//枚举</span></span><br><span class="line">Class&lt;Long&gt; cls7 = <span class="type">long</span>.class;<span class="comment">//基本数据类型</span></span><br><span class="line">Class&lt;Void&gt; cls8 = <span class="keyword">void</span>.class;<span class="comment">//void 数据类型</span></span><br><span class="line">Class&lt;Class&gt; cls9 = Class.class;<span class="comment">//类</span></span><br></pre></td></tr></table></figure><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>反射机制是Java实现动态语言的关键，也就是通过反射实现类动态9加载</p><ol><li><p>静态加载：编译时加载相关的类，如果没有则报错。依赖性强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog dog = new Dog();//静态加载，因此必须编写Dog</span><br></pre></td></tr></table></figure></li><li><p>动态加载：运行时加载需要的类，如果运行时不用该类，则不报错。降低了依赖性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(&quot;Person&quot;);//动态加载，只有运行时加载该类时才会报错</span><br><span class="line">Object o = cls.newInstance();</span><br><span class="line">Method m = cls.getMethod();</span><br><span class="line">m.invoke(o);</span><br></pre></td></tr></table></figure></li></ol><h3 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h3><ol><li>创建对象时（new） [静态加载]</li><li>子类被加载时，父类也被加载 [静态加载]</li><li>调用类中的静态成员 [静态加载]</li><li>通过反射 [动态加载]</li></ol><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p><img src="/img/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%9B%BE.jpg" alt="加载过程"></p><p>加载Loading：将类的class文件读入内存，并创建一个java.lang.Class对象（由类加载器完成）</p><p>链接Linking：将类的二进制数据合并到 JRE 中</p><p>​验证：进行安全校验，格式、元数据、字节码、符号</p><p>​准备：为<strong>静态</strong>变量分配内存、<strong>默认初始化</strong></p><p>​解析：虚拟机将常量池中的符号引用替换为直接引用</p><p>初始化initialization：静态代码块等<strong>静态成员</strong>的对类<strong>显式初始化</strong></p><h4 id="类加载阶段"><a href="#类加载阶段" class="headerlink" title="类加载阶段"></a>类加载阶段</h4><ul><li><p><strong>加载阶段</strong></p><p>JVM 在该阶段的主要目的是将字节码从不同数据源（.class 文件、jar 包、网络等）转化为<strong>二进制字节流</strong>加载到内存中，并生成一个代表该类的 <code>java.lang.Class</code> 对象</p></li><li><p><strong>连接阶段 - 验证</strong></p><p>目的是确保 <code>Class</code> 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><p>包括：文件格式验证（是否以魔数 0xcafebabe 开头）、元数据验证、字节码验证、符号引用验证</p><p>可以考虑使用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，以缩短虚拟机加载的时间</p></li><li><p><strong>连接阶段 - 准备</strong></p><p>JVM 会在该阶段对 静态变量 分配内存并执行<strong>默认初始化</strong>。这些变量使用的内存都将在方法区中进行分配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//实例属性，非静态变量，准备阶段不分配内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//静态变量，分配内存，默认初始化为 0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">30</span>;<span class="comment">//static final 是常量，静态初始化为 30</span></span><br></pre></td></tr></table></figure></li><li><p><strong>连接阶段 - 解析</strong></p><p>JVM 将常量池内<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程</p><p>查看类文件中的常量池，将代码中的符号名字（比如类名、方法名、字段名等）转换为实际的内存地址，这样当程序运行时，就能直接通过内存地址找到对应的方法或字段，而不需要再查找名字。</p></li><li><p><strong>初始化</strong></p><p>到初始化阶段，才真正开始执行类中定义的 Java 程序代码。此阶段是执行 <code>&lt;clinit&gt;()</code> 方法的过程</p><p><code>&lt;clinit&gt;()</code> 方法是由编译器按语句在文件中出现的顺序，依次自动收集类中所有<strong>静态</strong>变量的赋值动作和<strong>静态</strong>代码块中的语句，并进行合并</p><p>JVM 会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确地加锁、同步。如果多个线程去初始化一个类，那么只会有一个线程去执行这个类的 <code>&lt;clinit&gt;()</code> 方法，其他线程都需要阻塞等待，直到活动线程执行 <code>&lt;clinit&gt;()</code> 方法完毕</p></li></ul><h2 id="反射获取类的结构信息"><a href="#反射获取类的结构信息" class="headerlink" title="反射获取类的结构信息"></a>反射获取类的结构信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;com.Cloris.Person&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="第一组-java-lang-Class-类-作用于Class类对象"><a href="#第一组-java-lang-Class-类-作用于Class类对象" class="headerlink" title="第一组: java.lang.Class 类(作用于Class类对象)"></a>第一组: java.lang.Class 类(作用于Class类对象)</h3><ul><li><p><code>cls.getName()</code>：获取全类名   &#x2F;&#x2F;com.Cloris.Person</p></li><li><p><code>cls.getSimpleName()</code>：获取简单类名   &#x2F;&#x2F;Person</p></li><li><p><code>cls.getFields()</code>：获取所有public修饰的属性，包含本类以及父类的   &#x2F;&#x2F;fields[]，需要for遍历输出</p></li><li><p><code>cls.getDeclaredFields()</code>：获取本类中所有属性，包括public与非public</p></li><li><p><code>cls.getMethods()</code>：获得所有 <code>public</code> 修饰的方法，包含本类及父类的</p></li><li><p><code>cls.getConstructors()</code>：返回本类所有包含 <code>public</code> 修饰的构造器的 <code>Constructor</code> 对象数组</p><p>该方法返回的构造器<strong>不含父类</strong>构造器</p></li><li><p><code>cls.getDeclaredConstructors()</code>：返回本类所有构造器的 <code>Constructor</code> 对象数组</p></li><li><p><code>cls.getPackage()</code>：以Package形式返回包信息</p></li><li><p><code>cls.getSuperClass()</code>：以Class形式返回父类信息</p></li><li><p><code>cls.getInterFaces()</code>：以Class[]形式返回接口信息</p></li><li><p><code>cls.getAnnotations()</code>：以Annotation[]形式返回注解信息</p></li></ul><h3 id="第二组-java-lang-reflect-Field-类-作用于属性"><a href="#第二组-java-lang-reflect-Field-类-作用于属性" class="headerlink" title="第二组: java.lang.reflect.Field 类(作用于属性)"></a>第二组: java.lang.reflect.Field 类(作用于属性)</h3><ul><li><p><code>getModifiers()</code>：以 int 形式返回修饰符</p><p>默认修饰符 [0]、public [1]、private [2]、protected [4]、static [8]、final [16]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//这个变量的修饰符的 int 表示 = 1 + 8 + 16 = 25</span></span><br></pre></td></tr></table></figure></li><li><p><code>getType()</code>：以 <code>Class</code> 形式返回类型</p><p>上例变量的 <code>getType()</code> 等同于 <code>Integer.getClass()</code></p></li><li><p><code>getName()</code>：返回属性名</p></li></ul><h3 id="第三组-java-lang-reflect-Method-类-作用于方法"><a href="#第三组-java-lang-reflect-Method-类-作用于方法" class="headerlink" title="第三组: java.lang.reflect.Method 类(作用于方法)"></a>第三组: java.lang.reflect.Method 类(作用于方法)</h3><ul><li><code>getModifiers()</code>：以 int 形式返回修饰符（同上）</li><li><code>getName()</code>：返回方法名</li><li><code>getReturnType()</code>：以 <code>Class</code> 形式返回返回类型</li><li><code>getParameterTypes()</code>：以 <code>Class[]</code> 形式返回形参类型数组</li></ul><h3 id="第四组-java-lang-reflect-Constructor-类-作用于构造器"><a href="#第四组-java-lang-reflect-Constructor-类-作用于构造器" class="headerlink" title="第四组: java.lang.reflect.Constructor 类(作用于构造器)"></a>第四组: java.lang.reflect.Constructor 类(作用于构造器)</h3><ul><li><code>getModifiers()</code>：以 int 形式返回修饰符</li><li><code>getName()</code>：返回构造器名（和全类名相等）</li><li><code>getParameterTypes()</code>：以 <code>Class[]</code> 形式返回形参类型数组</li></ul><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><ol><li><p>方法一：调用类中的 public 修饰的无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0. 先获取到User 类的Class 对象</span></span><br><span class="line">Class&lt;?&gt; userClass = Class.forName(<span class="string">&quot;com.Cloris.User&quot;</span>);</span><br><span class="line"><span class="comment">//1. 通过public 的无参构造器创建实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> userClass.newInstance();</span><br></pre></td></tr></table></figure></li><li><p>方法二：调用类中指定的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 通过public 的有参构造器创建实例</span></span><br><span class="line"><span class="comment">//2.1 先得到对应构造器</span></span><br><span class="line">Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);</span><br><span class="line"><span class="comment">//2.2 创建实例，并传入实参</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;Cloris&quot;</span>);</span><br></pre></td></tr></table></figure><p>Class类相关方法</p><ul><li><code>newInstance</code>：调用类中的无参构造器，获取相应类的对象</li><li><code>getConstructor()</code>：根据参数列表，获取对应的public构造器对象</li><li><code>getDecalaredConstructor()</code>：根据参数列表。获取对应的所有构造器对象</li></ul><p>Constructor类相关方法</p><ul><li><code>setAccessible</code>：爆破</li><li><code>newInstance()</code>：调用构造器</li></ul></li><li><p>方法三：通过非public 的有参构造器创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 通过非public 的有参构造器创建实例</span></span><br><span class="line"><span class="comment">//3.1 得到private 的构造器对象</span></span><br><span class="line">Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line"><span class="comment">//3.2 创建实例</span></span><br><span class="line"><span class="comment">//暴破【暴力破解】, 使用反射可以访问private 构造器/方法/属性</span></span><br><span class="line">constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">19</span>, <span class="string">&quot;Cloris&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">//User 类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Cloris&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;<span class="comment">//无参public</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;<span class="comment">//public 的有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;<span class="comment">//private 有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h2><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><ol><li><p>根据属性名获取Field对象</p></li><li><p>爆破：f.setAccessible(true);   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;com.Cloris.User&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(o, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="comment">//o 表示一个类的实例,如果该属性是静态属性，则对象 o 可以是 null</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><ol><li><p>根据方法名与参数列表获取Method方法对象</p></li><li><p>爆破：m.setAccessible(true);   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;com.Cloris.User&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">method.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">returnObj</span> <span class="operator">=</span> method.invoke(o, <span class="string">&#x27;c&#x27;</span>, ...);</span><br><span class="line"><span class="comment">//o 表示一个类的实例，后面是实参列表，同理，静态方法的场合，对象 o 可以是 null</span></span><br><span class="line"><span class="comment">//在反射中，如果方法有返回值，统一返回Object , 但是他运行类型和方法定义的返回类型一致</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·网络编程</title>
      <link href="/2024/09/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/09/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="网络相关概念"><a href="#网络相关概念" class="headerlink" title="网络相关概念"></a>网络相关概念</h2><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><ul><li>两台设备之间通过网络实现数据传输</li><li><code>java.net</code> 包下提供了一系列类或接口，供程序员使用，完成网络通信</li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li><p>两台或多台设备通过一定<strong>物理</strong>设备连接起来构成了网络</p><p>根据网络覆盖范围的不同，对网络进行分类：</p><ul><li>局域网：覆盖范围最小，仅覆盖一个教室&#x2F;机房</li><li>城域网：覆盖范围较大，可覆盖一个城市</li><li>广域网：覆盖范围最大，可以覆盖全国，甚至全球。万维网 是广域网的代表</li></ul></li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><p>用于唯一标识网络中的每台计算机 &#x2F; 主机</p></li><li><p>查看 IP 地址：控制台输入<code>ipconfig</code></p></li><li><p>IP 地址的表示形式：点分十进制（xx.xx.xx.xx），每个十进制数范围是 [0,255]</p></li><li><p>IP 地址的组成 &#x3D; 网络地址 + 主机地址</p></li><li><p>IPv6 是互联网工程任务组设计的用于替代 IPv4 的下一代 IP 协议，使用16个字节（128位）表示地址。其地址数量号称可以为全世界每一粒沙子编上一个地址</p><p>IPv4 最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6 的使用，不仅能解决网络地址资源数量的问题，也解决了多种接入设备接入互联网的障碍</p></li></ul><h4 id="ipv4地址分类"><a href="#ipv4地址分类" class="headerlink" title="ipv4地址分类"></a>ipv4地址分类</h4><p><img src="/img/ipv4%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.jpg" alt="pv4地址分"></p><p><img src="/img/ipv4%E5%9C%B0%E5%9D%80%E8%8C%83%E5%9B%B4.jpg" alt="pv4地址范"></p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><ol><li><a href="https://cloris.zeabur.app/">https://cloris.zeabur.app/</a></li><li>概念：ip地址的映射</li><li>解决了记忆ip的困难</li></ol><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul><li><p>概念：用于标识计算机上某个特定的网络程序</p></li><li><p>表示形式：以整数形式，范围 [0,65535]</p><p>0 ~ 1024 已经被占用，不要使用。比如 ssh 22、ftp 21、smtp 25、http 80</p><p>常见的网络程序端口号：</p><ul><li>tomcat：8080</li><li>mysql：3306</li><li>oracle：1521</li><li>sqlserver：1433</li></ul></li></ul><h3 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h3><ul><li><p>就像人与人交流的语言是一种协议，在网络编程中<strong>数据的组织形式</strong>也是协议</p></li><li><p>协议（TCP&#x2F;IP）</p><p>TCP&#x2F;IP：传输控制协议 &#x2F; 因特网互联协议（Transmission Control Protocol &#x2F; Internet Protocol），又叫 网络通讯协议。这个协议是 Internet 最基本的协议、Internet 国际互联网络的基础。简单来讲，就是由 网络层的 IP 协议 和传输层的 TCP 协议 组成</p></li></ul><p><img src="/img/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE.jpg" alt="络通信协"></p><p>（以上是数据进入协议栈时的封装过程）</p><table><thead><tr><th>OSI 模型（理论）</th><th>TCP&#x2F;IP 模型（实际使用）</th><th>TCP&#x2F;IP 模型各层对应协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>HTTP、ftp、telent、DNS……</td></tr><tr><td>表示层</td><td>应用层</td><td>同上</td></tr><tr><td>会话层</td><td>应用层</td><td>同上</td></tr><tr><td>传输层</td><td>传输层（TCP）</td><td>TCP、UDP……</td></tr><tr><td>网络层</td><td>网络层（IP）</td><td>IP、ICMP、ARP……</td></tr><tr><td>数据链路层</td><td>物理 + 数据链路层</td><td>Link</td></tr><tr><td>物理层</td><td>物理 + 数据链路层</td><td>同上</td></tr></tbody></table><h3 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h3><p><strong>TCP</strong>传输控制协议</p><ol><li>使用 TCP 协议前，须先建立 TCP 连接，形成传输数据通道。TCP 通信是一对一通信</li><li>传输前，采用 “三次握手” 方式，是<strong>可靠</strong>的</li><li>TCP 协议进行通信的两个应用进程：客户端、服务端</li><li>在连接中可进行大数据量的传输。传输前，先确认要交流的数据量。那个数据量、数据窗口取较小方的数值。</li><li>发送方没有收到接收方的确认应答时，（在一定次数内）会再次发送数据包</li><li>传输完毕，需释放已建立的连接，<strong>效率低</strong></li></ol><p><strong>UDP</strong>用户数据协议</p><ol><li>将 数据、源、目的 封装成数据包，不需要建立连接。可以同时向多个接收方发送</li><li>每个数据包大小限制在 64K 以内，不适合传输大量数据</li><li>因无需连接，所以是不可靠的</li><li>接收方无需发送确认应答</li><li>发送数据结束时无需释放资源（因为不是面向连接的），速度快</li></ol><h2 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress 类"></a>InetAddress 类</h2><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><ul><li><p><code>getLocalHost</code>：获取本机 <code>InetAddress</code> 对象</p><p><code>InetAddress localHost = InetAddress.getLocalHost();</code></p><p>​</p></li><li><p><code>getByName</code>：根据指定主机名 &#x2F; 域名获取 IP 地址对象</p><p><code>InetAddress host2 = InetAddress.getByName(&quot;ThinkPad-PC&quot;);</code></p><p><code>InetAddress host3 = InetAddress.getByName(&quot;www.Cloris.com&quot;);</code></p><p>​</p></li><li><p><code>getHostName</code>：通过<code>InetAddress</code>对象，获取 <code>InetAddress</code> 对象的主机名</p><p><code>String host3Name = host3.getHostName();</code></p><p>​</p></li><li><p><code>getHostAddress</code>：通过<code>InetAddress</code>对象，获取 <code>InetAddress</code> 对象的地址</p><p><code>String host3Address = host3.getHostAddress();</code></p></li></ul><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ol><li>套接字（Socket）开发网络应用程序被广泛采用，以至于成为了事实上的标准</li><li>通信的两端都要有 Socket，是两台机器间通信的端点</li><li>网络通信其实就是 Socket 间的通信</li><li>Socket 允许程序把网络连接当成一个流，数据在两个 Socket 间通过 IO 传输</li><li>一般主动发起通信的应用程序属于客户端，等待通信请求的为服务端</li></ol><p>当需要通讯时(读写数据)：</p><ul><li><code>socket.getOutputStream()</code></li><li><code>socket.getInputStream()</code></li></ul><p>Socket有两种编程方式</p><ol><li>TCP编程，可靠</li><li>UDP编程，不可靠</li></ol><h3 id="TCP网络通信编程"><a href="#TCP网络通信编程" class="headerlink" title="TCP网络通信编程"></a>TCP网络通信编程</h3><ol><li><p>基于 客户端–服务器端 的网络通信</p></li><li><p>底层使用TCP&#x2F;IP协议</p></li><li><p>应用场景：客户端发送数据，服务端接收并显示等</p></li><li><p>基于Socket的TCP编程：</p><p>![CP 网络通信编](&#x2F;img&#x2F;TCP 网络通信编程.jpg)</p></li></ol><ul><li>应用实例：（两个程序，服务端、客户端）</li></ul><ol><li>使用字节流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端（先运行）</span></span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="comment">//1. 在本机的9999 端口监听, 等待连接</span></span><br><span class="line"><span class="comment">// 细节: 要求在本机没有其它服务在监听9999</span></span><br><span class="line"><span class="comment">// 这个ServerSocket 可以通过accept() 返回多个Socket[多个客户端连接服务器的并发]</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 当没有客户端连接9999 端口时，程序会阻塞, 等待连接</span></span><br><span class="line"><span class="comment">// 如果有客户端连接，则会返回Socket 对象，程序继续</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. IO 读取</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//根据读取到的实际长度，显示内容.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 获取socket 相关联的输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">&quot;hello, client&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">// 设置结束标记</span></span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.关闭流和socket</span></span><br><span class="line">outputStream.close();</span><br><span class="line">inputStream.close();</span><br><span class="line">socket.close();</span><br><span class="line">serverSocket.close();<span class="comment">//关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="comment">//1. 连接服务端(ip , 端口）</span></span><br><span class="line"><span class="comment">//解读: 连接本机的9999 端口, 如果连接成功，返回Socket 对象</span></span><br><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span></span><br><span class="line"><span class="comment">// 得到和socket 对象关联的输出流对象</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 通过输出流，写入数据到数据通道</span></span><br><span class="line">outputStream.write(<span class="string">&quot;hello, server&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">// 设置结束标记，否则客户端和服务端都会阻塞</span></span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 获取和socket 关联的输入流. 读取数据(字节)，并显示</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 关闭流对象和socket, 必须关闭</span></span><br><span class="line">inputStream.close();</span><br><span class="line">outputStream.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure><p>2.使用字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端（先运行）</span></span><br><span class="line"><span class="comment">//主方法，在以上代码基础上修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. IO 读取, 使用字符流, 老师使用InputStreamReader 将inputStream 转成字符流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">System.out.println(s);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 获取socket 相关联的输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"><span class="comment">// 使用字符输出流的方式回复信息</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">bufferedWriter.write(<span class="string">&quot;hello client 字符流&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();<span class="comment">// 插入一个换行符，表示回复内容的结束</span></span><br><span class="line">bufferedWriter.flush();<span class="comment">//注意需要手动的flush</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.关闭流和socket</span></span><br><span class="line">bufferedWriter.close();</span><br><span class="line">bufferedReader.close();</span><br><span class="line">socket.close();</span><br><span class="line">serverSocket.close();<span class="comment">//关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="comment">//主方法，在以上代码基础上修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 通过输出流，写入数据到数据通道, 使用字符流</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">bufferedWriter.write(<span class="string">&quot;hello, server 字符流&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();<span class="comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span></span><br><span class="line">bufferedWriter.flush();<span class="comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 获取和socket 关联的输入流. 读取数据(字符)，并显示</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 关闭流对象和socket, 必须关闭</span></span><br><span class="line">bufferedReader.close();<span class="comment">//关闭外层流</span></span><br><span class="line">bufferedWriter.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure><h4 id="netstat-指令"><a href="#netstat-指令" class="headerlink" title="netstat 指令"></a>netstat 指令</h4><ol><li><p><code>netstat -an</code> 可以查看当前主机网络情况，包括端口监听情况和网络连接情况</p></li><li><p><code>netstat -an | more</code> 可以分页显示</p></li><li><p><code>netstat -anb</code> 可以显示占用端口的应用</p></li><li><p>要求在 <strong>dos 控制台</strong>下执行</p></li><li><p>Listening 表示某个端口在监听。</p><p>如果有一个外部程序连接到该端口，就会显示一条连接信息 Established</p></li><li><p>显示 协议、本地地址、外部地址（有外部程序&#x2F;客户端链接）与状态（Lisening表示某个端口在监听）</p></li></ol><h4 id="TCP链接秘密"><a href="#TCP链接秘密" class="headerlink" title="TCP链接秘密"></a>TCP链接秘密</h4><p>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通讯的。这个端口由 TCP&#x2F;IP 来分配，是不确定的，随机的。</p><h3 id="UDP-网络通信编程（了解）"><a href="#UDP-网络通信编程（了解）" class="headerlink" title="UDP 网络通信编程（了解）"></a>UDP 网络通信编程（了解）</h3><ol><li>类 <code>DatagramSocket</code> 和 <code>DatagramPacket</code> 实现了基于 UDP 协议网络程序</li><li><strong>没有明确</strong>的服务端和客户端，演变成数据的<strong>发送端</strong>和<strong>接收端</strong></li><li>UDP 数据报通过 <code>DatagramSocket</code> 对象发送和接收。系统不保证 UDP 数据报一定能安全送到目的地，也不能确定什么时候能抵达</li><li><code>DatagramPacket</code> 对象封装了 UDP 数据报，在数据报中包含了发送端的 IP 地址和端口号以及接收端的 IP 地址和端口号</li><li>接收到 <code>DtagramPacket</code> 对象时，需要进行拆包，取出数据</li><li><code>DatagramSocket</code> 可以指定在哪个端口接收数据</li><li>UDP 协议中每个数据报都给出了完整的地址信息，因此无需发送方和接收方的连接</li></ol><ul><li>应用实例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="comment">//1. 创建一个DatagramSocket 对象，准备在9999 接收数据</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line"><span class="comment">//2. 构建一个DatagramPacket 对象，准备接收数据</span></span><br><span class="line"><span class="comment">// 一个数据包最大64k</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);<span class="comment">//空包</span></span><br><span class="line"><span class="comment">//3. 调用接收方法, 将通过网络传输的DatagramPacket 对象</span></span><br><span class="line"><span class="comment">// 填充到packet 对象</span></span><br><span class="line"><span class="comment">//老师提示: 当有数据包发送到本机的9999 端口时，就会接收到数据</span></span><br><span class="line"><span class="comment">// 如果没有数据包发送到本机的9999 端口, 就会阻塞等待.</span></span><br><span class="line">System.out.println(<span class="string">&quot;接收端A 等待接收数据..&quot;</span>);</span><br><span class="line">socket.receive(packet);</span><br><span class="line"><span class="comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line"><span class="type">byte</span>[] data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="comment">//===回复信息给B 端</span></span><br><span class="line"><span class="comment">//将需要发送的数据，封装到DatagramPacket 对象</span></span><br><span class="line">data = <span class="string">&quot;好的, 明天见&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">//说明: 封装的DatagramPacket 对象data 内容字节数组, data.length , 主机(IP) , 端口</span></span><br><span class="line">packet =</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9998</span>);</span><br><span class="line">socket.send(packet);<span class="comment">//发送</span></span><br><span class="line"><span class="comment">//5. 关闭资源</span></span><br><span class="line">socket.close();</span><br><span class="line">System.out.println(<span class="string">&quot;A 端退出...&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="comment">//1.创建DatagramSocket 对象，准备在9998 端口接收数据</span></span><br><span class="line"><span class="comment">//（同机该端口不要和接收端一样，发送端也可能成为接收端）</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"><span class="comment">//2. 将需要发送的数据，封装到DatagramPacket 对象</span></span><br><span class="line"><span class="type">byte</span>[] data = <span class="string">&quot;hello 明天吃火锅~&quot;</span>.getBytes(); <span class="comment">//</span></span><br><span class="line"><span class="comment">//说明: 封装的DatagramPacket 对象data 内容字节数组, data.length , 主机(IP) , 端口</span></span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line">socket.send(packet);</span><br><span class="line"><span class="comment">//3.=== 接收从A 端回复的信息</span></span><br><span class="line"><span class="comment">//(1) 构建一个DatagramPacket 对象，准备接收数据</span></span><br><span class="line"><span class="comment">// 在前面讲解UDP 协议时，老师说过一个数据包最大64k</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">packet = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line"><span class="comment">//(2) 调用接收方法, 将通过网络传输的DatagramPacket 对象</span></span><br><span class="line"><span class="comment">// 填充到packet 对象</span></span><br><span class="line"><span class="comment">//老师提示: 当有数据包发送到本机的9998 端口时，就会接收到数据</span></span><br><span class="line"><span class="comment">// 如果没有数据包发送到本机的9998 端口, 就会阻塞等待.</span></span><br><span class="line">socket.receive(packet);</span><br><span class="line"><span class="comment">//(3) 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">socket.close();</span><br><span class="line">System.out.println(<span class="string">&quot;B 端退出&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><h4 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1 需求分析"></a>1 需求分析</h4><p><strong>需求分析师（懂技术 + 懂行业）</strong></p><ol><li>需求分析报告<ul><li>项目功能</li><li>客户要求</li></ul></li></ol><h4 id="2-设计阶段"><a href="#2-设计阶段" class="headerlink" title="2 设计阶段"></a>2 设计阶段</h4><p><strong>架构师 &#x2F; 项目经理</strong></p><ol><li>设计工作<ul><li>UML 类图</li><li>流程图</li><li>模块设计</li><li>数据库设计</li><li>架构</li></ul></li><li>原型开发</li><li>组建团队</li></ol><h4 id="3-实现阶段"><a href="#3-实现阶段" class="headerlink" title="3 实现阶段"></a>3 实现阶段</h4><p>**程序员 **</p><ol><li>完成架构师的模块功能</li><li>测试自己的模块</li></ol><h4 id="4-测试阶段"><a href="#4-测试阶段" class="headerlink" title="4 测试阶段"></a>4 测试阶段</h4><p><strong>测试工程师</strong></p><ol><li>单元测试</li><li>测试用例</li><li>白盒测试</li><li>黑盒测试</li><li>集成测试</li></ol><h4 id="5-实施阶段"><a href="#5-实施阶段" class="headerlink" title="5 实施阶段"></a>5 实施阶段</h4><p><strong>实施工程师（开发能力 &#x2F; 环境配置部署能力）</strong></p><ol><li>把项目正确地部署到客户的平台，并保证运行正常</li><li>身体好</li></ol><h4 id="6-维护阶段"><a href="#6-维护阶段" class="headerlink" title="6 维护阶段"></a>6 维护阶段</h4><ol><li>发现 bug 并解决</li><li>项目升级</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·IO流</title>
      <link href="/2024/09/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7IO%E6%B5%81/"/>
      <url>/2024/09/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>文件就是保存数据的地方。</li><li>文件流：文件 在 程序 中是以 流 的形式来操作的。</li><li>流：数据在数据源（文件）和程序（内存）之间经历的路径</li><li>输入流：数据从数据源到程序的路径</li><li>输出流：数据从程序到数据源的路径</li></ul><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="创建文件对象相关构造器和方法"><a href="#创建文件对象相关构造器和方法" class="headerlink" title="创建文件对象相关构造器和方法"></a>创建文件对象相关构造器和方法</h4><ul><li><code>new File(String pathname)</code>：根据路径创建一个 File 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\news1.txt&quot;</span>;<span class="comment">//留意转义符</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);<span class="comment">//放入路径</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();<span class="comment">//创建文件</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>new File(File parent, String child)</code>：根据父目录文件 + 子路径构建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\&quot;</span>);<span class="comment">//父目录</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;<span class="comment">//文件名</span></span><br><span class="line">    <span class="comment">//这里的file 对象，还在内存之中</span></span><br><span class="line">    <span class="comment">//只有执行了createNewFile 方法，才会真正的，在磁盘创建该文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile, fileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>new File(String parent, String child)</code>：根据父路径 + 子路径构建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;e:\\&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news4.txt&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath, fileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>creatNewFile()</code>：创建新文件</li></ul><h4 id="获取文件相关信息"><a href="#获取文件相关信息" class="headerlink" title="获取文件相关信息"></a>获取文件相关信息</h4><ul><li><code>getName()</code>：获取名称</li><li><code>getAbsolutePath()</code>：获取文件绝对路径</li><li><code>getParent()</code>：获取文件父级目录</li><li><code>length()</code>：获取文件大小（字节），返回long   </li><li><code>exists()</code>：文件是否存在</li><li><code>isFile()</code>：是不是一个文件</li><li><code>isDirectory()</code>：是不是一个目录</li></ul><h4 id="目录的操作和文件删除"><a href="#目录的操作和文件删除" class="headerlink" title="目录的操作和文件删除"></a>目录的操作和文件删除</h4><ul><li><code>mkdir</code>：创建一级目录</li><li><code>mkdirs</code>：创建多级目录</li><li><code>delete</code>：删除空目录或文件</li><li><code>renameTo(File newName)</code>：更改文件名，返回是否成功布尔值</li></ul><h2 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h2><h3 id="IO流原理"><a href="#IO流原理" class="headerlink" title="IO流原理"></a>IO流原理</h3><ol><li>I &#x2F; O 是 Input &#x2F; Output 的缩写。IO 技术是非常实用的技术，用于处理数据传输。如 读 &#x2F; 写 文件，网络通讯</li><li>Java 程序中，对于数据的 输入 &#x2F; 输出 操作以 “流（stream）”的方式进行</li><li><code>java.io</code> 包下提供了各种 “流” 类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</li><li>输入（input）：读取外部数据（磁盘、光盘、网络数据等）到程序（内存）中</li><li>输出（output）：将程序（内存）数据输出到外部存储</li></ol><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><ul><li><p>按操作数据单位不同分为：</p><ul><li>字节流（8 bit）：二进制文件用该方法，能确保文件无损</li><li>字符流（按照字符，字符的字节数由编码决定）：文本文件，效率更高</li></ul></li><li><p>按数据流的流向不同分为：</p><ul><li>输入流：读取外部数据（磁盘、光盘、网络数据等）到程序（内存）中</li><li>输出流：将程序（内存）数据输出到外部存储</li></ul></li><li><p>按流的角色不同分为：</p><ul><li>节点流</li><li>处理流 &#x2F; 包装流</li></ul><table><thead><tr><th></th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table></li><li><p>Java 的 IO流 总共涉及 40多个类，实际上都是上述 4 类的<strong>抽象基类</strong>派生的，使用时必须创建子类</p></li><li><p>由这 4 个类派生的子类名称都是以其父类名作为子类名后缀</p></li></ul><p><img src="/img/IO.jpg"></p><h2 id="输入流与输出流"><a href="#输入流与输出流" class="headerlink" title="输入流与输出流"></a>输入流与输出流</h2><h3 id="InputStream和OutputStream"><a href="#InputStream和OutputStream" class="headerlink" title="InputStream和OutputStream"></a>InputStream和OutputStream</h3><h4 id="字节输入流InputStream"><a href="#字节输入流InputStream" class="headerlink" title="字节输入流InputStream"></a>字节输入流InputStream</h4><ul><li>InputStream抽象类时所有类字节输入流的超类</li></ul><p><img src="/img/inputstream.png" alt="nputstrea"></p><ul><li><p><strong>常用的子类：</strong></p><ul><li><p><code>FileInputStream</code>：文件字节输入流，读取单个字节，效率较低</p><p><code>read()</code>：从该输入流中读取一个数据字节，读取正常的场合，返回实际读取的字节数。</p><p><code>read(byte[] b)</code>：从该输入流中把最多 b.length 个字节的数据读入一个 byte 数组</p><p><code>close()</code>：关闭文件输入流，释放资源</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//定义在try外扩大作用域</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建FileInputStream 对象，用于读取文件</span></span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">        <span class="comment">// 从该输入流读取一个字节的数据。如果没有输入可用，此方法将阻止。</span></span><br><span class="line">        <span class="comment">// 如果有占用超过1字节的文本，会输出乱码</span></span><br><span class="line">        <span class="comment">// Java规定如果返回-1 , 表示读取完毕</span></span><br><span class="line">        <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) readData); <span class="comment">// 转成char 显示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭文件流，释放资源.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用read(byte[] b) 读取文件，提高效率</span></span><br><span class="line"><span class="comment">//从该输入流中把最多 b.length 个字节的数据读入一个 byte 数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">    <span class="comment">// 字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; <span class="comment">// 一次读取8个字节</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建FileInputStream 对象，用于读取文件</span></span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">        <span class="comment">// 从该输入流读取最多b.length字节的数据到字节数组。此方法将阻塞，直到某些输入可用。</span></span><br><span class="line">        <span class="comment">// 如果返回-1, 表示读取完毕</span></span><br><span class="line">        <span class="comment">// 如果读取正常, 返回实际读取的字节数</span></span><br><span class="line">        <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen)); <span class="comment">// 将码值转换成字符串显示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭文件流，释放资源....</span></span><br><span class="line">&#125;        </span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><p>​</p><ul><li><p><code>BufferedInputStream</code> ：缓冲字节输入流，带缓冲</p></li><li><p><code>ObjectInputStream</code> ：对象字节输入流，可处理对象</p><p>​</p></li></ul></li></ul><h4 id="字节输出流OutputStream"><a href="#字节输出流OutputStream" class="headerlink" title="字节输出流OutputStream"></a>字节输出流OutputStream</h4><p><img src="/img/Outputstream.jpg" alt="utputstrea"></p><ul><li><p>常用的子类：</p><ul><li><p><code>FileOuputStream</code>：按字节写入文件输出流</p><p><code>write(byte[] b, int off, int len) </code>将指定 byte 数组中下标 off 开始的 len 个字节写入此文件输出流</p><p><code>str.getBytes() </code>可以把字符串 -&gt; 字节数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建FileOutputStream 对象</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.txt&quot;</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 得到FileOutputStream 对象</span></span><br><span class="line">        <span class="comment">// 1. new FileOutputStream(filePath) 创建方式，当写入内容时，会覆盖原来的内容</span></span><br><span class="line">        <span class="comment">// 2. new FileOutputStream(filePath, true) 创建方式，当写入内容时，是追加到文件后面</span></span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath, <span class="literal">true</span>);<span class="comment">//此时，若文件不存在会被创建</span></span><br><span class="line">        <span class="comment">// 写入一个字节</span></span><br><span class="line">        fileOutputStream.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        <span class="comment">// 写入字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello,world!&quot;</span>;</span><br><span class="line">        fileOutputStream.write(str.getBytes());</span><br><span class="line">        fileOutputStream.write(str.getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭文件流，释放资源...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="应用：文件拷贝"><a href="#应用：文件拷贝" class="headerlink" title="应用：文件拷贝"></a>应用：文件拷贝</h4><ol><li>创建文件的输入流, 将文件读入到程序</li><li>创建文件的输出流， 将读取到的文件数据，写入到指定的文件.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Koala.jpg&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Koala3.jpg&quot;</span>;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath);</span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath);</span><br><span class="line">        <span class="comment">// 定义一个字节数组, 提高读取效果</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 读取到后，就写入到文件通过fileOutputStream</span></span><br><span class="line">            <span class="comment">// 即，是一边读，一边写</span></span><br><span class="line">            fileOutputStream.write(buf, <span class="number">0</span>, readLen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 关闭输入流和输出流，释放资源...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="FileReader和FileWriter"><a href="#FileReader和FileWriter" class="headerlink" title="FileReader和FileWriter"></a>FileReader和FileWriter</h3><ul><li>FileReader和FileWriter是字符流，按照字符来操作IO</li></ul><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><p><img src="/img/FileReader.jpg" alt="ileReade"></p><p><strong>相关方法：</strong></p><ul><li><code>new FileReader(Flie/String)</code></li><li><code>read()</code>：读取单个字符。返回该字符，如果到文件末尾返回-1</li><li><code>read(char[])</code>：批量读取多个字符到数组。返回读取到的字符数，如果到文件末尾返回-1</li></ul><p><strong>相关API：</strong></p><ul><li><code>new String(char[])</code>：将char[]转换成String</li><li><code>new String(char[],off,len)</code>：将char[]指定部分转换成String</li></ul><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><p><img src="/img/FileWriter.jpg" alt="ileWrite"></p><p><strong>常用方法：</strong></p><ul><li><code>new FileWriter(File/String)</code>：覆盖模式，相当于流的指针在首端</li><li><code>new FileWriter(File/String,true)</code>：追加模式，相当于流的指针在尾端</li><li><code>write(int)</code>：写入单个字符</li><li><code>write(char[])</code>：写入指定数组</li><li><code>write(char[], off, len)</code>：写入指定数组的指定部分</li><li><code>write(string)</code>：写入字符串</li><li><code>write(string, off, len)</code>：写入字符串的指定部分</li><li><code>flush()</code>：刷新该流的缓冲。如果没有执行，内容就不会写入文件</li><li><code>close()</code>：等于 <code>flush()</code> + 关闭</li></ul><p><strong>FileWriter 使用后，必须关闭（close）或刷新（flush），否则无法真正写入</strong></p><h2 id="节点流与处理流"><a href="#节点流与处理流" class="headerlink" title="节点流与处理流"></a>节点流与处理流</h2><ul><li>节点流：从一个特定数据源读写数据。如FileReader和FielWriter</li><li>处理流（包装流）：是 “连接” 在已存在的流（节点流或处理流）上，为程序提供更强大的读写功能。如BufferedReader和BufferedWriter（只要是对应抽象类的实现子类都可以接收）</li></ul><p><img src="/img/%E8%8A%82%E7%82%B9%E6%B5%81%E5%92%8C%E5%A4%84%E7%90%86%E6%B5%81%E4%B8%80%E8%A7%88%E5%9B%BE.jpg" alt="点流和处理流一览"></p><h3 id="节点流和处理流的区别和联系"><a href="#节点流和处理流的区别和联系" class="headerlink" title="节点流和处理流的区别和联系"></a>节点流和处理流的区别和联系</h3><ol><li>节点流是 底层流 &#x2F; 低级流。直接和数据源相接。</li><li>处理流（包装流）包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法完成输入输出</li><li>处理流对节点流进行包装，使用了修饰器<strong>设计模式</strong>。不会直接与数据源相连</li><li>处理流的功能主要体现在<ul><li>性能的提高：以增加缓冲的方式提高输入输出的效率</li><li>操作的便捷：处理流可能提供了一系列便捷方法来一次性输入大量数据，使用更加灵活方便</li></ul></li></ol><h3 id="字符处理流BufferedReader-和BufferedWriter"><a href="#字符处理流BufferedReader-和BufferedWriter" class="headerlink" title="字符处理流BufferedReader 和BufferedWriter"></a>字符处理流BufferedReader 和BufferedWriter</h3><ul><li>BufferedReader 和BufferedWriter属于字符流，按照字符读取数据</li><li>关闭处理流时，只需要关闭外层流即可</li><li>不要去操作二进制文件[声音，视频，doc, pdf ], 可能造成文件损坏</li></ul><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建bufferedReader，包装节点流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath));</span><br><span class="line">        <span class="comment">// 读取</span></span><br><span class="line">        String line; <span class="comment">// 按行读取, 效率高</span></span><br><span class="line">        <span class="comment">// 1. bufferedReader.readLine() 是按行读取文件</span></span><br><span class="line">        <span class="comment">// 2. 当返回null 时，表示文件读取完毕</span></span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭流, 只需要关闭BufferedReader ，因为底层会自动的去关闭 节点流</span></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//close()源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.close();<span class="comment">//in 就是我们传入的new FileReader(filePath), 关闭了.</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            in = <span class="literal">null</span>;</span><br><span class="line">            cb = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\ok.txt&quot;</span>;</span><br><span class="line"><span class="comment">//创建BufferedWriter</span></span><br><span class="line"><span class="comment">//1. new FileWriter(filePath, true) 表示以追加的方式写入</span></span><br><span class="line"><span class="comment">//2. new FileWriter(filePath) , 表示以覆盖的方式写入</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath));</span><br><span class="line">bufferedWriter.write(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();<span class="comment">//插入一个和系统相关的换行</span></span><br><span class="line">bufferedWriter.write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line">bufferedWriter.write(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">bufferedWriter.newLine();</span><br><span class="line"><span class="comment">//说明：关闭外层流即可， 传入的new FileWriter(filePath) ,会在底层关闭</span></span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></table></figure><h3 id="字节处理流BufferedInputStream-和BufferedOutputStream"><a href="#字节处理流BufferedInputStream-和BufferedOutputStream" class="headerlink" title="字节处理流BufferedInputStream 和BufferedOutputStream"></a>字节处理流BufferedInputStream 和BufferedOutputStream</h3><ul><li>需要使用处理流处理二进制文件时使用，按照字节来处理</li><li>字节处理流既可以处理二进制文件，也可以处理文本文件</li></ul><p><img src="/img/BufferedInputStream.jpg" alt="ufferedInputStrea"></p><p><img src="/img/BufferedOutputStream.jpg" alt="ufferedOutputStrea"></p><ul><li><p>应用：拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Cloris.jpg&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Cloris1.jpg&quot;</span>;</span><br><span class="line"><span class="comment">// 创建BufferedOutputStream 对象和BufferedInputStream 对象</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 因为FileInputStream 是InputStream 子类</span></span><br><span class="line">    bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">    bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line">    <span class="comment">// 循环的读取文件，并写入到destFilePath</span></span><br><span class="line">    <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当返回-1 时，就表示文件读取完毕</span></span><br><span class="line">    <span class="keyword">while</span> ((readLen = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bos.write(buff, <span class="number">0</span>, readLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭流, 关闭外层的处理流即可，底层会去关闭节点流</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bis != <span class="literal">null</span>) &#123;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bos != <span class="literal">null</span>) &#123;</span><br><span class="line">            bos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="对象处理流ObjectInputStream-和ObjectOutputStream"><a href="#对象处理流ObjectInputStream-和ObjectOutputStream" class="headerlink" title="对象处理流ObjectInputStream 和ObjectOutputStream"></a>对象处理流ObjectInputStream 和ObjectOutputStream</h3><ul><li><p>提供了将 基本数据类型 或 对象 进行 序列化 或 反序列化 的方法</p><ul><li>ObjectOutputStream进行<strong>序列化</strong>：保存数据时，保存数据的值和数据类型</li><li>ObjectInputStream进行<strong>反序列化</strong>：恢复数据时，恢复数据的值和数据类型</li></ul></li><li><p>让对象支持序列化机制—-&gt;让其类可序列化—-&gt;让该类实现以下两个接口之一</p><ol><li><code>Serializable</code>（推荐，这是一个标记接口）</li><li><code>Externalizable</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oos.writeInt(<span class="number">100</span>);<span class="comment">// int -&gt; Integer (实现了Serializable)</span></span><br><span class="line">oos.writeBoolean(<span class="literal">true</span>);<span class="comment">// boolean -&gt; Boolean (实现了Serializable)</span></span><br><span class="line">oos.writeChar(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// char -&gt; Character (实现了Serializable)</span></span><br><span class="line">oos.writeDouble(<span class="number">9.5</span>);<span class="comment">// double -&gt; Double (实现了Serializable)</span></span><br></pre></td></tr></table></figure></li><li><p>构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(InputStream inputStream);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(OutputStream outputStream);</span><br></pre></td></tr></table></figure></li><li><p>方法：</p><p>反序列化顺序需要和序列化顺序一致，否则出现异常。</p><ul><li><p><code>writeInt(Integer)</code>：写入一个 int</p><p><code>readInt()</code>：读取一个 int</p></li><li><p><code>writeBoolean(Boolaen)</code>：写入一个 boolean</p><p><code>readBoolean()</code>：读取一个 boolean</p></li><li><p><code>writeChar(Character)</code>：写入一个 char</p><p><code>readChar()</code>：读取一个 char</p></li><li><p><code>writeDouble(Double)</code>：写入一个 double</p><p><code>readDouble()</code>：读取一个 double</p></li><li><p><code>writeUTF(String)</code>：写入一个 String</p><p><code>readUTF()</code>：读取一个 String</p></li><li><p><code>writeObject(Serializable)</code>：写入一个 Obj</p><p><code>readObject()</code>：读取一个 Obj</p></li></ul></li></ul><ul><li><p><strong>注意事项</strong></p><ol><li><p>读写顺序要一致</p></li><li><p>更新某个基本数据类型或对象时，要重新序列化</p></li><li><p>读取的场合，如果想要调用方法，需要<strong>向下转型</strong>。</p><p>为此，需要该类其引入，或将类的定义拷贝到<strong>可以引用的位置</strong>。</p></li><li><p>需要序列化某个类的对象，该类要实现 <code>Serializable</code>  接口</p></li><li><p>序列化的类中建议添加 <code>SerialVersionUID</code> 以提高版本兼容性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;<span class="comment">//序列化的版本号</span></span><br></pre></td></tr></table></figure><p>有此序列号的场合，后续修改该类，系统会认为只是版本修改，而非新的类</p></li><li><p>序列化对象时，默认将其中所有属性进行序列化（除了 <code>static</code> 和 <code>tansient</code> 修饰的成员）</p></li><li><p>序列化对象时，要求其属性也实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Master</span> <span class="variable">master</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();<span class="comment">//master作为对象没有实现Serializable接口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>序列化具备可继承性。某类若实现可序列化，则其子类也可序列化</p></li></ol></li><li><p><strong>transient 关键字</strong></p><ol><li>有一些对象状态不具有可持久性（如 Thread 对象或流对象），这样的成员变量必须用 transient 关键字标明。任何标有 transient 关键字的成员变量都不会被保存。</li><li>一些需要保密的数据，不应保存在永久介质中。为保证安全，这些变量前应加上 transient 关键字。</li></ol><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3></li></ul><table><thead><tr><th></th><th>编译类型</th><th>运行类型</th><th>默认设备</th></tr></thead><tbody><tr><td><code>System.in</code>：标准输入</td><td><code>InputStream</code></td><td><code>BufferedInputStream</code></td><td>键盘</td></tr><tr><td><code>System.out</code>：标准输出</td><td><code>PaintStream</code></td><td><code>PaintStream</code></td><td>显示器</td></tr></tbody></table><h3 id="转换流InputStreamReader-和OutputStreamWriter"><a href="#转换流InputStreamReader-和OutputStreamWriter" class="headerlink" title="转换流InputStreamReader 和OutputStreamWriter"></a>转换流InputStreamReader 和OutputStreamWriter</h3><ul><li>传统方式改变文件编码后再读取会产生乱码，问题在于不能指定读取文件的编码方式</li><li>打印流只有输出流，没有输入流</li><li><code>InputStreamReader</code> 是 <code>Reader</code> 的子类。可以将InputStream（字节流）包装成Reader（字符流）</li><li><code>OutputStreamWriter</code> 是 <code>Writer</code> 的子类。可以将OutputStream（字节流）包装成Writer（字符流）</li><li>处理文本数据时，使用字符流将效率更高，并可以有效解决中文问题，所以建议将字节流转换为字符流</li><li>可以在使用时指定编码格式</li></ul><h4 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h4><p><img src="/img/InputStreamReader.png" alt="nputStreamReade"></p><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.txt&quot;</span>;</span><br><span class="line"><span class="comment">//解读</span></span><br><span class="line"><span class="comment">//1. 把FileInputStream 转成InputStreamReader</span></span><br><span class="line"><span class="comment">//2. 指定编码gbk</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"><span class="comment">//3. 把InputStreamReader 传入BufferedReader</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"><span class="comment">//将2 和3 合写</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line"><span class="comment">//4. 读取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">System.out.println(<span class="string">&quot;读取内容=&quot;</span> + s);</span><br><span class="line"><span class="comment">//5. 关闭外层流</span></span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><h4 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h4><p><img src="/img/OutputstreamWriter.png" alt="utputstreamWrite"></p><h3 id="打印流PrintStream-和PrintWriter"><a href="#打印流PrintStream-和PrintWriter" class="headerlink" title="打印流PrintStream 和PrintWriter"></a>打印流PrintStream 和PrintWriter</h3><ul><li>打印流只有输出流，没有输入流</li><li><code>PaintStream</code> 是 <code>OutputStream</code> 的子类。<code>PaintWriter</code> 是 <code>Writer</code> 的子类。</li><li>默认情况下，<code>System.out</code> 输出位置是 标准输出（即：显示器）</li></ul><h4 id="字节打印流PrintStream"><a href="#字节打印流PrintStream" class="headerlink" title="字节打印流PrintStream"></a>字节打印流PrintStream</h4><p><img src="/img/PrintStream.jpg" alt="rintStrea"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">out.print(<span class="string">&quot;...&quot;</span>);</span><br><span class="line"><span class="comment">//print源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">        s = <span class="string">&quot;null&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    write(s);<span class="comment">//print 底层使用的是write</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以直接调用write 进行打印/输出</span></span><br><span class="line">out.write(<span class="string">&quot;...&quot;</span>.getBytes());</span><br><span class="line">out.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//setOut()修改打印流输出位置</span></span><br><span class="line">System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;e:\\f1.txt&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;...&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="字符打印流PrintWriter"><a href="#字符打印流PrintWriter" class="headerlink" title="字符打印流PrintWriter"></a>字符打印流PrintWriter</h4><p><img src="/img/PrintWriter.jpg" alt="rintWrite"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(System.out);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:\\f2.txt&quot;</span>));</span><br><span class="line">pw.print(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">pw.close();<span class="comment">//关闭流, 才会将数据写入到文件</span></span><br></pre></td></tr></table></figure><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><ul><li><p><code>Properties</code> 是专门用于读写配置文件的集合类</p><p>底层维护了一个 <code>Entry</code> 数组</p></li><li><p>配置文件格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">键=值</span><br><span class="line">键=值</span><br></pre></td></tr></table></figure><p><strong>注意：键值对不需要空格，值不需要引号（值默认 String）</strong></p></li><li><p>常见方法</p><ul><li><p><code>load(InputStream)</code></p><p><code>load(Reader)</code>：加载配置文件的键值对到 <code>Properties</code> 对象</p></li><li><p><code>list(PaintStream)</code></p><p><code>list(PaintWriter)</code>：将数据显示到指定设备</p></li><li><p><code>getProperty(key)</code>：根据键获取值</p></li><li><p><code>setProperty(key, value)</code>：设置键值对到 <code>Properties</code> 对象</p><p>如果没有该 key，就是创建。如有，就是替换。</p></li><li><p><code>store(Writer, String)</code></p><p><code>store(OutputStream, String)</code>：把 <code>Properties</code> 中的键值对存储到配置文件。</p><p>后面的 <code>String</code> 是注释。如有，会被用 <code>#</code> 标记并写在文件最上方。注释可以为 null。</p><p>IDEA 中，如果含有中文，会储存为 unicode 码</p></li></ul></li></ul><p><strong>读取操作：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建Properties 对象</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//2. 加载指定配置文件</span></span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="comment">//3. 把k-v 显示控制台</span></span><br><span class="line">properties.list(System.out);</span><br><span class="line"><span class="comment">//4. 根据key 获取对应的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;用户名=&quot;</span> + user);</span><br><span class="line">System.out.println(<span class="string">&quot;密码是=&quot;</span> + pwd);</span><br></pre></td></tr></table></figure><p><strong>创建&#x2F;修改配制文件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">Properties.setProperties(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="comment">//1.如果该文件没有key 就是创建</span></span><br><span class="line"><span class="comment">//2.如果该文件有key ,就是修改</span></span><br><span class="line"><span class="comment">//将k-v 存储文件中即可</span></span><br><span class="line">properties.store(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\mysql2.properties&quot;</span>), <span class="literal">null</span>);<span class="comment">//空代表注释</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·多线程基础</title>
      <link href="/2024/09/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/09/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h2><ul><li>进程：<ul><li>指运行中的程序，如每启动一个app就启动了一个进程。操作系统就会为该进程分配内存空间</li><li>进程是程序的一次执行过程，或是正在运行的一个程序，是动态过程，有自身产生、存在和消亡过程</li></ul></li><li>线程：<ul><li>线程是由进程创建的，是进程的一个实体</li><li>一个进程可以有多个线程（比如同时下载多个文件时）</li><li><strong>单线程</strong>：同一时刻只允许一个线程</li><li><strong>多线程</strong>：同时多个线程（同时多个聊天窗口，同时下载多个软件）</li><li><strong>并发</strong>：同时多个任务交替快速执行（单核CPU），形成”同时进行“的错觉</li><li><strong>并行</strong>：同时多任务同时执行（多核CPU，也有可能并发并行同时存在）</li></ul></li><li>线程的作用：<ul><li><strong>简化程序结构</strong>：使用多线程可以将复杂的、需要等待的任务（如网络通信、文件I&#x2F;O）从主线程中分离出来，简化程序结构，使代码更易于理解和维护。</li><li><strong>实现异步操作</strong>：线程允许程序执行非阻塞操作，即一个线程可以继续执行其任务，同时另一个线程处理耗时操作，比如后台任务或定时任务。</li></ul></li></ul><h2 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h2><h3 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h3><ol><li><p>继承Thread类，重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span><span class="comment">//可见 Thread 也实现了 Runable 接口</span></span><br></pre></td></tr></table></figure></li><li><p>实现Runnable接口，重写run方法</p></li></ol><h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><ul><li>一个类继承Thread后可当作线程使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法：进入主方法时启动一个mian线程</span></span><br><span class="line"> <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Type</span>();</span><br><span class="line"> type.start();<span class="comment">//开始线程：再启动一个Thread-0线程（主线程不会阻塞，继续执行）</span></span><br><span class="line">    <span class="comment">//如果用 run 方法，则还是停留在主线程，那样，相当于 串行。执行完毕才继续</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;<span class="comment">//先继承 Thread 类</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         System.out.println(i);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Thread.sleep(<span class="number">100</span>);<span class="comment">//线程休眠 100 毫秒</span></span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             <span class="comment">//如果线程在休眠期间被中断，InterruptedException会被抛出</span></span><br><span class="line">             <span class="comment">//捕获是为了优雅地处理线程的中断，确保程序的健壮性和可维护性。</span></span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (i++ == <span class="number">10</span>) &#123;<span class="comment">//i = 10 时停止循环</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程名：<code>Thread.currentThread().getName()</code></li><li>多线程中并不是主线程死亡，进程就消亡；如果还有其它子线程，进程并不会结束</li></ul><p><img src="/img/%E7%BA%BF%E7%A8%8B.png"></p><h4 id="调用start方法的原因"><a href="#调用start方法的原因" class="headerlink" title="调用start方法的原因"></a>调用start方法的原因</h4><ul><li><p>因为run方法为普通方法，并没有真正启动线程，直接调用要求执行完毕后再继续执行（相当于串行化）</p></li><li><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">    start0();<span class="comment">//start() 方法调用了一个 start0() 底层方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;<span class="comment">//start0 是 native。即，本地方法，JVM调用，底层是C/C++</span></span><br></pre></td></tr></table></figure><ul><li>真正的多线程效果，是 <code>start0()</code>，而不是 <code>run()</code></li><li><code>start()</code> 方法调用 <code>start0()</code> 方法后，该线程不一定会立刻执行，只是将线程变成了可运行状态。具体何时运行，由 CPU 统一调度</li></ul></li></ul><h3 id="实现Runnable"><a href="#实现Runnable" class="headerlink" title="实现Runnable"></a>实现Runnable</h3><ul><li>Java是单继承机制，如果类已经有父类，无法继承Thread来创建线程，这时就需要实现Runnable接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">Runnable</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Type</span>();<span class="comment">//Runable 没有 start()方法</span></span><br><span class="line"> <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(type);<span class="comment">//所以，这里使用了 静态代理(一种设计模式)</span></span><br><span class="line"> thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Type</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//这部分和 Thread 相似</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">         System.out.println(i &lt;&lt; i);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Thread.sleep(<span class="number">100</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (++i &gt; <span class="number">15</span>)&#123;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代理模式-静态代理"><a href="#代理模式-静态代理" class="headerlink" title="代理模式-静态代理"></a>代理模式-静态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="type">Tiger</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>();<span class="comment">//实现了Runnable</span></span><br><span class="line"><span class="type">ThreadProxy</span> <span class="variable">threadProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadProxy</span>(tiger);</span><br><span class="line">threadProxy.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎嗷嗷叫....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程代理类, 模拟了一个极简的Thread 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadProxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//你可以把Proxy 类当做ThreadProxy</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//属性，类型是Runnable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();<span class="comment">//动态绑定（运行类型Tiger）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadProxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0();<span class="comment">//这个方法时真正实现多线程方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承Thread-vs-实现Runnable-的区别"><a href="#继承Thread-vs-实现Runnable-的区别" class="headerlink" title="继承Thread vs 实现Runnable 的区别"></a>继承Thread vs 实现Runnable 的区别</h3><ol><li>从 Java 设计来看，两者本质上没有区别。<code>Thread</code> 类本身就实现了 <code>Runable</code> 接口</li><li>实现 <code>Runable</code> 接口的方式更加适合多个线程共享一个资源的情况，且避免了单继承的限制。建议使用。</li></ol><h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3><ol><li>当线程结束后，会自动退出</li><li>还可以通过使用变量来控制 <code>run</code> 方法退出的方式来停止线程，即 <strong>通知</strong>方式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">t1.start();</span><br><span class="line">t1.sleep(<span class="number">10</span>*<span class="number">1000</span>);<span class="comment">//休眠10秒后再退出</span></span><br><span class="line">t1.setActive(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程类</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">active</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//控制变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">while</span> (active) &#123;<span class="comment">//这个场合，只要外部控制 active 即可</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread.sleep(<span class="number">1</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     move();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActive</span><span class="params">(active)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.active = active;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h3><ul><li><p><code>setName(name)</code>：设置线程名称，使之与参数 name 相同</p></li><li><p><code>getName()</code>：返回线程名称</p></li><li><p><code>start()</code>：线程开始执行。JVM 调用 <code>start0</code> 方法</p><p>该方法会创建新的线程，新线程调用 <code>run</code>。</p></li><li><p><code>run()</code>：到下面玩跑步</p><p>就是简单的方法调用，不会产生新线程</p></li><li><p><code>setPriority(int priority)</code>：更改线程优先级</p><p><code>getPriority()</code>：获取线程优先级</p></li><li><p><code>sleep(int millsecond)</code>：让线程休眠指定的时间</p><p>该方法是 Thread 类的静态方法，可以直接调用</p></li><li><p><code>interrupt()</code>：中断线程（不是 中止），进入异常处理语句，一般用于中断正在休眠的线程</p></li></ul><h3 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h3><ul><li><p><code>yield()</code>：线程的礼让。让出 CPU 让其他线程执行。因为礼让的时间不确定，所以不一定礼让成功。</p><p>本质是 RUNNING 切换为 READY，即让当前线程放弃执行权</p></li><li><p><code>join()</code>：线程的插队。插队的线程一旦插入成功，则必定先执行完插队线程的<strong>所有</strong>任务</p><p>将导致其他线程的等待，直到 <code>join()</code> 方法的线程结束</p><p><code>join(long timeout)</code>：join，但是时间到后也能结束其他线程的等待</p></li></ul><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><ul><li>用户线程：也叫工作线程，任务完成或接到通知时线程结束</li><li>守护线程：为工作线程服务，当所有用户线程结束，守护线程自动结束（如垃圾回收机制）</li></ul><p>将线程设置为守护线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="type">MyDeamonThread</span> <span class="variable">myDeamonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDeamonThread</span>();</span><br><span class="line">myDeamonThread.start();</span><br><span class="line">myDaemonThread.setDeamon(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.jpg" alt="程状态转换"></p><ul><li><p><strong>新建（New）：</strong></p><p>线程对象刚刚创建，还未启动（New）。此时还处于不可运行状态，但已有了相应内存空间及其他资源</p></li><li><p><strong>可运行（Runnable）：</strong></p><p>此时线程已经启动，处于线程的 <code>run()</code> 方法中。这种情况下线程可能正在运行；也可能没有运行，但只要 CPU 空闲就会立刻运行。</p><p>可以运行但没在运行的线程都排在一个队列中，这个队列称为就绪队列。</p><p>可运行状态下，运行中的线程处于<strong>运行状态（Running）</strong>，未运行线程处于<strong>就绪状态（Ready）</strong>。</p><p>调用 <code>start()</code> 方法可以让线程进入可运行状态。</p></li><li><p><strong>WAITING</strong>：正等待另一个线程执行特定动作的线程</p></li><li><p><strong>TIMED_WAITING</strong>：正等待另一个线程执行特定动作达到等待时间的线程</p></li><li><p><strong>TERMINATED</strong>：已退出的线程。可能<code>run()</code> 方法最后一个语句执行完毕，或线程遇到异常退出</p></li><li><p><strong>阻塞（Blocked）：</strong></p><p>一个正常运行的线程因为特殊原因被暂停执行，就进入阻塞状态（Blocked）。</p><p>阻塞时线程不能进入就绪对流排队，必须等到引起阻塞的原因消除，才能重新进入队列排队。</p><p>引起阻塞的方法很多，<code>sleep()</code> 和 <code>wait()</code> 是两个常用的阻塞方法</p></li></ul><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><ul><li><p>在多线程编程，一些敏感数据不允许被多个线程同时访问。此时就用同步访问技术，保证数据在任意时刻，最多有一个线程同时访问，以保证数据的完整性。</p></li><li><p>也可以这样理解：线程同步，即当有一个线程对内存进行操作时，其他线程都不能对这个内存地址进行操作（被阻塞），直到该线程完成操作，再让下一线程进行操作</p></li><li><p>同步具体方法-Synchronized：(相当于上锁再解锁)</p><ul><li><p>同步代码块（推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (对象) &#123;<span class="comment">//得到对象的锁，才能操作同步代码</span></span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>synchronized还可以放在方法声明中，表示整个方法为同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pubilc <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span>&#123;<span class="comment">//这时锁在this对象</span></span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><ol><li>在 Java 语言中，引入了 “对象互斥锁” 的概念，也称为监视器，来保证共享数据操作的完整性</li><li>每个对象都对应一个可称为 “互斥锁” 的标记，这个标记用来保证在任一时刻都只能有一个线程访问对象。</li><li>Java 语言中，有 2 种方式实现互斥锁：<ul><li>用关键字 volatile 声明一个共享数据（变量）。一般很少使用该关键字</li><li>用关键字 synchronized 声明共享数据的一个方法或一个代码</li></ul></li><li>同步的局限性：导致程序的执行效率要降低。</li><li>非静态的对象，同步方法的锁可以是 <strong>this</strong>，也可以是其他<strong>对象</strong>（要求是同一对象）</li><li>静态对象，同步方法的锁为当前**类.**class本身</li></ol><p>(要求多个线程的锁对象为同一个)</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><ul><li>多个线程都占用了对方的资源，不肯相让，就导致了死锁。编程时要避免死锁的产生。</li></ul><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><ul><li><p>以下操作会释放锁</p><ol><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步方法、同步代码块中遇到 <code>break</code>、<code>return</code></li><li>当前线程在同步方法、同步代码块中出现了未处理的 <code>Error</code></li><li>当前线程在同步方法、同步代码块中执行了 <code>wait()</code> 方法，当前线程暂停，并释放锁</li></ol></li><li><p>以下操作不会释放锁</p><ol><li><p>执行同步方法、同步代码块时，程序调用 <code>Thread.sleep()</code> 或 <code>Thread.yield()</code> 方法暂停当前线程的执行，不会释放锁</p></li><li><p>线程执行同步代码块时，其他线程调用了该线程的 <code>suspend()</code> 方法将该线程挂起，该线程不会释放锁</p><p>所以，应尽量避免使用 <code>suspend()</code> 和 <code>resume()</code> 来控制线程</p></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-背包问题</title>
      <link href="/2024/09/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2024/09/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划-01背包问题"><a href="#动态规划-01背包问题" class="headerlink" title="动态规划-01背包问题"></a>动态规划-01背包问题</h1><blockquote><p>刷代码随想录时的理解随笔，参考了其它论坛上的一些资料</p><p><a href="https://kamacoder.com/problempage.php?pid=1046">卡码网第46题 </a></p></blockquote><h2 id="问题简述"><a href="#问题简述" class="headerlink" title="问题简述"></a>问题简述</h2><p>​有一个有最大容量的背包，要求任取占据不同空间、不同价值的物品装入背包，返回能装入物品的最大价值，每种物品只有一件。</p><ul><li>此类问题使用  贪心算法  无法保证全局最优，背包的容量有限，如优先拿价值与体积比值最大的物体，可能导致无法选择更有价值的物品组合</li><li>动态规划  则通过考虑所有可能的子集并<strong>存储</strong>这些子问题的解来构建解决方案，避免了重复计算，并确保了每个子问题的解都是最优的，最终通过<strong>组合</strong>这些子问题的解来得到原问题的最优解。</li></ul><h2 id="解题思路（二维数组）"><a href="#解题思路（二维数组）" class="headerlink" title="解题思路（二维数组）"></a>解题思路（二维数组）</h2><ol><li><p>确定存储子问题解的载体：dp数组</p><p>使用二维数组的两个维度分别表示：物品 和 背包容量</p></li></ol><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/01%E8%83%8C%E5%8C%85dp%E6%95%B0%E7%BB%84.png" alt="1背包dp数"></p><p>​<code>dp[i][j]</code>表示从<strong>前</strong><code>i</code>件物品中选取时能达到的最大价值</p><ol start="2"><li><p>确定递推公式&#x2F;状态转移方程 </p><p>对每个物品有两种选择：1. 不放入该物品；2. 放入该物品</p><ul><li><p><strong>不放入该物品：</strong>第i次决策后的最大价值和第 <strong>i-1</strong> 次决策（上一个物品）时候的价值是一样的</p><p>若背包装不下则只有该选择，所以在递推前要<strong>做判断</strong></p></li><li><p><strong>放入该物品：</strong>第i次决策后的价值为 <strong>第i-1次决策时的价值</strong> 加上 **当前物体的价值v[j]**。物体放入背包后会使背包容量变为 j ，即没放物体之前背包的容量为j - weight[i]</p></li></ul><p>比较两者价值来决定是否放入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br></pre></td></tr></table></figure><p><code>j - weight[i]</code>：理解为背包需要留出这个物品 i 的容量才可以放物品 i ，因此在表格上寻找放入物品 i 后，<strong>剩余</strong>空间能够达到的最大价值</p></li><li><p>初始化</p><ul><li><p>初始化时注意<code>dp[i][j]</code>是由哪些方向的解推导出来的，则那些方向的下标0一定要初始化</p></li><li><p>容量为零时无法放入物品：<code>dp[i][0]</code> &#x3D; 0，因为int数组创建后默认值为0，不用再额外初始化</p></li><li><p>i 是由 i-1 推导出来，则 i 为0时要初始化，从  <code>j = weight[0]</code>  （放得下物品0时）开始初始化</p></li></ul></li></ol><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/01%E8%83%8C%E5%8C%85%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="1背包初始"></p><p>​</p><ol start="4"><li>遍历填表</li></ol><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%AE%8C%E6%95%B4%E8%83%8C%E5%8C%85.png" alt="整背"></p><ol start="5"><li>返回右下角结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//需要先接收输入数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();<span class="comment">//物品种数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bagweight</span> <span class="operator">=</span> scanner.nextInt();<span class="comment">//背包空间</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] weight = <span class="keyword">new</span> <span class="title class_">int</span>[n];<span class="comment">//物品所占空间</span></span><br><span class="line">        <span class="type">int</span>[] value = <span class="keyword">new</span> <span class="title class_">int</span>[n];<span class="comment">//物品价值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            weight[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            value[j] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][bagweight + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line"><span class="comment">// j &lt; weight[0]已在上方被初始化为0</span></span><br><span class="line">    <span class="comment">// j &gt;= weight[0]的值就初始化为value[0]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> weight[<span class="number">0</span>]; j &lt;= bagweight; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = value[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= bagweight; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; weight[i]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(dp[n - <span class="number">1</span>][bagweight]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思路（滚动-一维数组）"><a href="#解题思路（滚动-一维数组）" class="headerlink" title="解题思路（滚动&#x2F;一维数组）"></a>解题思路（滚动&#x2F;一维数组）</h2><ul><li>不放入物品的选择中，<code>dp[i][j]</code> 与<code>dp[i-1][j]</code>数值一致，因而可以直接简化为一维数组（满足上一层可直接拷贝到当前层），优化了空间复杂度</li></ul><ol><li><p>确定dp数组含义</p><p>dp[j] ：容量为 j 的背包所装物品最大价值</p></li><li><p>递推公式</p><p>去除 i 维度即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] = Math.max(dp[j], dp[j - costs[i]] + values[i]);</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><p>容量为零时，价值初始化为零</p><p>其它下标只需要初始值不会覆盖遍历数据即可，又因价值都是正整数，保持int数组默认值即可</p></li><li><p>遍历填表</p><p>此处需要<strong>从大到小</strong>遍历背包，且一定<strong>先遍历物品再遍历背包容量</strong></p><ul><li><p>从大到小遍历：</p><p>若从最小的背包开始遍历，子问题的解依赖于<strong>已经计算过</strong>的子问题的解，<code>j-costs[i]</code> 可能已经考虑过了物品 <code>i</code>，导致多次放入；因为此时dp数组的含义已经不是从<strong>前</strong><code>i</code>件物品中任取，而是每种容量的背包考虑<strong>所有</strong>物品，每次都会考虑物品 <code>i</code>。</p><p>若从最大的背包开始遍历，每次取得状态不会和之前取得状态重合，因为<code>j-costs[i]</code>此时对应的是默认值0，相当于先考虑物品 <code>i</code><strong>不被放入</strong>的情况，再考虑放入的情况。</p></li><li><p>先遍历物品嵌套遍历背包：一定要倒序遍历的情况下，每个dp[j]只会放入一个物品</p></li></ul></li><li><p>返回数组末尾结果</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取 M 和 N</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> scanner.nextInt();  <span class="comment">// 研究材料的数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> scanner.nextInt();  <span class="comment">// 行李空间的大小</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] costs = <span class="keyword">new</span> <span class="title class_">int</span>[M];   <span class="comment">// 每种材料的空间占用</span></span><br><span class="line">        <span class="type">int</span>[] values = <span class="keyword">new</span> <span class="title class_">int</span>[M];  <span class="comment">// 每种材料的价值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入每种材料的空间占用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            costs[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入每种材料的价值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">            values[j] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个动态规划数组 dp，初始值为 0</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 外层循环遍历每个类型的研究材料</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            <span class="comment">// 内层循环从 N 空间逐渐减少到当前研究材料所占空间</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> N; j &gt;= costs[i]; j--) &#123;</span><br><span class="line">                <span class="comment">// 考虑当前研究材料选择和不选择的情况，选择最大值</span></span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - costs[i]] + values[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出 dp[N]，即在给定 N 行李空间可以携带的研究材料的最大价值</span></span><br><span class="line">        System.out.println(dp[N]);</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划-完全背包问题"><a href="#动态规划-完全背包问题" class="headerlink" title="动态规划-完全背包问题"></a>动态规划-完全背包问题</h1><blockquote><p><a href="https://kamacoder.com/problempage.php?pid=1052">卡码网第52题</a></p></blockquote><h2 id="问题简述-1"><a href="#问题简述-1" class="headerlink" title="问题简述"></a>问题简述</h2><p>​有一个有最大容量的背包，要求任取占据不同空间、不同价值的物品装入背包，返回能装入物品的最大价值（与01背包几乎相同），与01背包不同的地方在于每种物品有无数件。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>确定dp数组</p><p>i 与 j 分别表示 物品 与 背包容量</p><p><code>dp[i][j]</code>表示在前 i 件物品中任选能装入物品的最大价值</p></li><li><p>递推公式</p><p>对每个物品有两种选择：1. 不放入该物品；2. 放入k件该物品</p><p>则在01背包的基础上重量与价格乘k即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - k * weight[i]] + k * value[i]);</span><br></pre></td></tr></table></figure><p>然而这样需要 i , j , k 三个维度，复杂度高</p></li><li><p>初始化：同01背包</p></li><li><p>遍历顺序</p><p>接着联系完全背包与01背包的特点可以得出，01背包从后向前遍历背包容量的原因是<strong>从前向后遍历时同样的物品会被放多次</strong>，要减低复杂度，需要减少数组维度、改变遍历顺序</p><p>递推公式去除 i 维度，让遍历顺序代替k的作用：</p><p>留意保证<code>j - weight[i]</code>大于0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weight.length; i++)&#123; <span class="comment">// 遍历物品</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> weight[i]; j &lt;= bagWeight; j++)&#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">          dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;<span class="comment">//在通常场景下遍历先后没有影响</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="动态规划-多重背包"><a href="#动态规划-多重背包" class="headerlink" title="动态规划-多重背包"></a>动态规划-多重背包</h1><blockquote><p><a href="https://kamacoder.com/problempage.php?pid=1066">卡码网第56题，多重背包</a></p></blockquote><h2 id="问题简述-2"><a href="#问题简述-2" class="headerlink" title="问题简述"></a>问题简述</h2><p>​有一个有最大容量的背包，要求任取占据不同空间、不同价值的物品装入背包，返回能装入物品的最大价值（与01背包几乎相同），与01背包不同的地方在于每种物品是有限件数。如果把同种物品的每一件拆出来，就与01背包相同。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">multi_pack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> bagWeight, n;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取用户输入数据，中间用空格隔开，回车键换行</span></span><br><span class="line">        bagWeight = sc.nextInt();<span class="comment">//背包容量</span></span><br><span class="line">        n = sc.nextInt();<span class="comment">//物品种类</span></span><br><span class="line">        <span class="type">int</span>[] weight = <span class="keyword">new</span> <span class="title class_">int</span>[n];<span class="comment">//每种物品占据空间</span></span><br><span class="line">        <span class="type">int</span>[] value = <span class="keyword">new</span> <span class="title class_">int</span>[n];<span class="comment">//每种物品价值</span></span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];<span class="comment">//每种物品件数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) weight[i] = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) value[i] = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) nums[i] = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[bagWeight + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先遍历物品再遍历背包，作为01背包处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> bagWeight; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">                <span class="comment">//遍历每种物品的个数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= nums[i] &amp;&amp; (j - k * weight[i]) &gt;= <span class="number">0</span>; k++) &#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j - k * weight[i]] + k * value[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[bagWeight]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="途中迷思"><a href="#途中迷思" class="headerlink" title="途中迷思"></a>途中迷思</h2><ul><li><p>为什么背包数组不需要排序也能考虑到所有子问题：</p><p><code>dp[i][j]</code>表示从<strong>前</strong><code>i</code>件物品中<strong>任取</strong>时能达到的最大价值</p><p>由于循环会遍历所有可能的重量，每个物品都会被考虑放入或不放入背包的所有情况，不依赖于物品的顺序。</p></li><li><p>问题可以有多种问法：</p><ul><li>问能否能装满背包（或者最多装多少）：<code>dp[j] = Math.max(dp[j], dp[j - nums[i]] + nums[i]);</code></li><li>问装满背包有几种方法：<code>dp[j] += dp[j - nums[i]]</code></li><li>问背包装满最大价值：<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]); </code></li><li>问装满背包所有物品的最小个数：<code>dp[j] = Math.min(dp[j - coins[i]] + 1, dp[j]);</code></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·图形界面设计</title>
      <link href="/2024/09/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
      <url>/2024/09/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="绘图坐标体系"><a href="#绘图坐标体系" class="headerlink" title="绘图坐标体系"></a>绘图坐标体系</h2><p><strong>坐标</strong></p><ul><li>坐标原点位于左上角，以像素为单位</li><li>在Java坐标体系中，x坐标表示水平方向距离坐标原点x个像素，y坐标表示垂直方向距离坐标原点y个像素</li></ul><p><img src="/img/%E5%9D%90%E6%A0%87.png"></p><p><strong>像素</strong></p><ul><li>计算机显示内容由屏幕上每一个像素组成，例如显示器分辨率800 * 600表示屏幕每一行由800个点组成，共600行。像素是密度单位，厘米是长度单位</li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li><p>顶层容器： Java中，顶层窗口（没有包含在其它窗口的窗口）称为框架。使用<strong>JFrame</strong>创建，该窗口带有标题行和控制按钮（最小化、恢复&#x2F;最大化、关闭）。</p><ul><li><p><code>setSize(int width, int height)</code>：设置窗口大小</p></li><li><p><code>setBackground(Color bg)</code>：设置框架背景色</p><p><code>setForeground(Color fg)</code>：设置框架前景色</p></li><li><p><code>setVisible(boolean aFlag)</code>：设置可见性</p></li></ul></li><li><p>面板：普通面板（<strong>JPanel</strong>）和滚动面板（JScrollPanel）都是用途广泛的容器。面板与顶层容器不同，不能独立存在，而必须添加到其他容器内部。面板可以嵌套，由此可以设计出复杂的图形用户界面。</p></li><li><p>创建框架并绘图：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawCircle</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123; <span class="comment">//JFrame 对应窗口,可以理解成是一个画框</span></span><br><span class="line">    <span class="comment">//定义一个面板</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MyPanel</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DrawCircle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawCircle</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="comment">//初始化面板</span></span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">MyPanel</span>();</span><br><span class="line">        <span class="comment">//把面板放入到窗口(画框)</span></span><br><span class="line">        <span class="built_in">this</span>.add(mp);</span><br><span class="line">        <span class="comment">//设置窗口的大小</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">//当点击窗口的小×，程序完全退出.</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//可以显示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.先定义一个MyPanel, 继承JPanel 类， 画图形，就在面板上画</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPanel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line">    <span class="comment">//说明:</span></span><br><span class="line">    <span class="comment">//1. MyPanel 对象就是一个画板</span></span><br><span class="line">    <span class="comment">//2. Graphics g 把g 理解成一支画笔</span></span><br><span class="line">    <span class="comment">//3. Graphics 提供了很多绘图的方法</span></span><br><span class="line">    <span class="comment">//Graphics g</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;<span class="comment">//绘图方法（paint方法何时被调用？看下节）</span></span><br><span class="line">        <span class="built_in">super</span>.paint(g);<span class="comment">//调用父类的方法完成初始化.</span></span><br><span class="line">        <span class="comment">//画出一个圆形.</span></span><br><span class="line">        g.drawOval(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘图技术"><a href="#绘图技术" class="headerlink" title="绘图技术"></a>绘图技术</h2><p><strong>原理</strong></p><p>Component类提供两个重要绘图方法：</p><ol><li><code>paint(Graphics g)</code>绘制组件外观<ul><li>paint()方法会被调用的情况<ul><li><strong>组件首次显示时</strong>：当组件第一次被添加到可见的容器中，或者容器的窗口首次变得可见时</li><li>窗口最小化后最大化</li><li>窗口大小发生变化</li><li>repaint()方法被调用</li></ul></li></ul></li><li><code>repaint()</code>刷新组件外观</li></ol><h3 id="Graphics类常用方法"><a href="#Graphics类常用方法" class="headerlink" title="Graphics类常用方法"></a>Graphics类常用方法</h3><ul><li><p>画直线<code>drawLine(int x1,int y1,int x2,int y2)</code>：x1,y1为起点坐标，x2,y3为终点坐标</p></li><li><p>画矩形边框<code>drawRect(int x, int y, int width, int height)</code></p></li><li><p>画椭圆边框<code>drawOval(int x, int y, int width, int height)</code></p></li><li><p>填充矩形<code>fillRect(int x, int y, int width, int height)</code>：可以通过设置画笔填充颜色</p><p>设置画笔颜色<code>g.setColor.(Color.blue);</code></p></li><li><p>填充椭圆<code>fillOval(int x, int y, int width, int height)</code></p></li><li><p>画图片<code>drawImage(Image img, int x, int y, ..)</code></p><ul><li><p>获取图片资源, &#x2F;bg.png 表示在该项目的根目录去获取bg.png 图片资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(<span class="string">&quot;/bg.png&quot;</span>));</span><br><span class="line"><span class="comment">//图片需放在项目根目录</span></span><br><span class="line">g.drawImage(image, <span class="number">10</span>, <span class="number">10</span>, <span class="number">175</span>, <span class="number">221</span>, <span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>画字符串<code>drawString(String str, int x, int y)</code>写字：可以设置颜色与字体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g.setColor(Color.red);</span><br><span class="line">g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;隶书&quot;</span>, Font.BOLD, <span class="number">50</span>));<span class="comment">//BOLD表示粗体</span></span><br><span class="line"><span class="comment">//这里设置的100， 100， 是&quot;北京你好&quot;左下角坐标</span></span><br><span class="line">g.drawString(<span class="string">&quot;北京你好&quot;</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>设置画笔字体<code>setFont(Font font);</code></p></li></ul><h2 id="事件处理机制"><a href="#事件处理机制" class="headerlink" title="事件处理机制"></a>事件处理机制</h2><ul><li>Java事件处理采取 委派事件模型。事件发生时 事件源 会将 “信息” 传递给 事件监听者 做处理，信息指java.awt.event事件类库里某个类所创建的对象</li><li>事件源：一个产生事件的对象，如按钮、窗口等</li><li>事件：承载事件源状态改变信息的对象<ul><li>XXXEvent 事件类的接口名就是 XXXListener。</li></ul></li></ul><table><thead><tr><th>事件类</th><th>组件</th><th>方法及说明</th></tr></thead><tbody><tr><td>ActionEvent</td><td>JButton、JCheckBox、JComboBox、JMenuItem、JRaidoButton</td><td>actionPerformed(e) 单击按钮、选择菜单项或在文本框中按回车时</td></tr><tr><td>AdjustmentEvent</td><td>JScrollBar</td><td>adjustmentValueChanged(e) 当改变滚动条滑块位置时</td></tr><tr><td>ComponentEvent</td><td>JComponent 及其子类</td><td>componentMoved(e) 组件移动时；componentHidden(e) 组件隐藏时；componenetResized(e) 组件缩时；componentShown(e) 组件显示时</td></tr><tr><td>ContainerEvent</td><td>JContainer 及其子类</td><td>containerAdded(e) 添加组件时；containerMoved(e)移除组件时</td></tr><tr><td>FocusEvent</td><td>同 ComponentEvent</td><td>focusGained(e) 组件获得焦点时；focusLost(e) 组件失去焦点时</td></tr><tr><td>ItemEvent</td><td>JCheckBox、JCheckboxMenuItem、JComboBox</td><td>itemStateChanged(e) 选择复选框、选项框、单击列表框、选中带复选框菜单时</td></tr><tr><td>KeyEvent</td><td>同 ComponentEvent</td><td>keyPressed(e) 键按下时；keyReleased(e) 键释放时；keyTaped(e) 击键时</td></tr><tr><td>MouseEvent</td><td>同 ComponentEvent</td><td>mousePressed(e) 鼠标按下时；mouseEntered(e) 鼠标进入时；mouseExited(e) 鼠标离开时；mouseClicked(e) 鼠标点击时；mouseReleased(e) 鼠标释放时</td></tr><tr><td>MouseMotionEvent</td><td>同 ComponentEvent</td><td>mouseDragged(e) 鼠标拖放时；mouseMoved(e) 鼠标移动时</td></tr><tr><td>TextEvent</td><td>JTextField、JTextArea</td><td>textValueChanged(e) 文本框、多行文本框内容修改时</td></tr><tr><td>WindowEvent</td><td>JFrame、JWindow、JDialog</td><td>windowOpened(e) 窗口打开时；windowClosing(e) 窗口关闭时；windowClosed(e) 窗口关闭后；windowActived(e) 窗口激活时；windowDeactivated(e) 窗口失去焦点时；windowIconified(e) 窗口最小化时；WindowDeiconified(e) 窗口最小化还原时</td></tr></tbody></table><ul><li><p>事件监听接口：</p><ul><li>当事件源产生事件时，传递给事件监听者</li><li>事件监听者实际上是一个类，该类实现某个事件监听器接口</li><li>不同事件监听器接口可监听不同事件，一个类可以实现多个监听接口</li><li>这些接口在java.awt.event和javax.swing.event包中定义</li></ul></li><li><p>小球运动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BallMove</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123; <span class="comment">// 窗口</span></span><br><span class="line">    <span class="type">MyPanel</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BallMove</span> <span class="variable">ballMove</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BallMove</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BallMove</span><span class="params">()</span> &#123;</span><br><span class="line">        mp = <span class="keyword">new</span> <span class="title class_">MyPanel</span>();</span><br><span class="line">        <span class="built_in">this</span>.add(mp);</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">// 窗口JFrame对象可以监听键盘事件, 即可以监听到面板发生的键盘事件</span></span><br><span class="line">        <span class="built_in">this</span>.addKeyListener(mp);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面板, 可以画出小球</span></span><br><span class="line"><span class="comment">// KeyListener 是监听器, 可以监听键盘事件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPanel</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span> &#123;</span><br><span class="line">    <span class="comment">// 为了让小球可以移动, 把他的左上角的坐标(x,y)设置变量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);</span><br><span class="line">        g.fillOval(x, y, <span class="number">20</span>, <span class="number">20</span>); <span class="comment">// 默认黑色</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有字符输出时，该方法就会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当某个键按下，该方法会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.println((char)e.getKeyCode() + &quot;被按下..&quot;);</span></span><br><span class="line">        <span class="comment">// 根据用户按下的不同键，来处理小球的移动(上下左右的键)</span></span><br><span class="line">        <span class="comment">// 在java 中，会给每一个键，分配一个值(int)</span></span><br><span class="line">        <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_DOWN) &#123; <span class="comment">// KeyEvent.VK_DOWN 就是向下的箭头对应的code</span></span><br><span class="line">            y++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_UP) &#123;</span><br><span class="line">            y--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_LEFT) &#123;</span><br><span class="line">            x--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_RIGHT) &#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 让面板重绘</span></span><br><span class="line">        <span class="built_in">this</span>.repaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当某个键释放(松开)，该方法会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·泛型</title>
      <link href="/2024/09/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%B3%9B%E5%9E%8B/"/>
      <url>/2024/09/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>泛型（generic）：又称 参数化类型。是JDK 5 出现的新特性。类声明或实例化时只要制定好需要的具体类型，从而解决数据类型的安全性问题。</li><li>用现有方法不能对加入的数据类型进行约束，不安全；且遍历时需要进行类型转换，影响效率</li></ul><h2 id="泛型语法"><a href="#泛型语法" class="headerlink" title="泛型语法"></a>泛型语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Dog&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Dog&gt;();</span><br></pre></td></tr></table></figure><ul><li>上例表示存放到 arrayList 中的必须是 <code>Dog</code> 类型。</li><li>如果编译器发现添加类型不符合要求，即报错。</li><li>遍历时，可以直接取出 <code>Dog</code> 而非 <code>Object</code></li></ul><ol><li><p>编译时，检查添加元素的类型。可以保证如果程序在编译时没发出警告，运行就不会产生 ClassCastException 异常。提高了安全性，使代码更加简洁、健壮。</p></li><li><p>也减少了转换的次数，提高了效率。</p></li><li><p>泛型的作用是：可以在类声明是通过一个标识表示类中某个<strong>属性</strong>的类型，或某个方法<strong>返回值</strong>的类型，或<strong>参数</strong>类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Person&lt;String&gt; stringPerson = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//E的具体类型在创建对象时指定，将E替换为String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;E&gt; &#123;</span><br><span class="line">    E s ;</span><br><span class="line">    <span class="comment">//E 表示s 的数据类型, 该数据类型在定义Person 对象的时候指定</span></span><br><span class="line">    <span class="comment">//即在编译期间，就确定E 是什么类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(E s)</span> &#123;<span class="comment">//E 也可以是参数类型</span></span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">f</span><span class="params">()</span> &#123;<span class="comment">//返回类型使用E</span></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(s.getClass());<span class="comment">//显示s 的运行类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>泛型的声明：</strong><code>interface 接口&lt;T&gt;&#123;&#125;</code> 或 <code>class 类&lt;K,V&gt;&#123;&#125;</code></p><ul><li>K,T,V不代表值，而是表示类型，任意字母都可（常用T表示，Type；K(Key)，V(Value)）</li></ul><p><strong>泛型的实例化：</strong>在类后面指定类型参数的值（类型）</p><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ul><li><p>T泛型指定数据类型时只能是引用类型</p></li><li><p>给泛型指定具体类型后，可以传入该类型或其子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Pig&lt;A&gt; aPig = <span class="keyword">new</span> <span class="title class_">Pig</span>&lt;A&gt;(<span class="keyword">new</span> <span class="title class_">A</span>());</span><br><span class="line">aPig.f();</span><br><span class="line">Pig&lt;A&gt; aPig2 = <span class="keyword">new</span> <span class="title class_">Pig</span>&lt;A&gt;(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">aPig2.f();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span>&lt;E&gt; &#123;<span class="comment">//</span></span><br><span class="line">    E e;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pig</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(e.getClass()); <span class="comment">//运行类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>泛型的使用形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//实际开发中往往简写，编译器会进行类型推断</span></span><br><span class="line">List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//如果这样写，默认泛型为Object</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure></li></ul><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">10000</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>.MyDate(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Amy&quot;</span>, <span class="number">17000</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>.MyDate(<span class="number">2001</span>, <span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Mike&quot;</span>, <span class="number">12000</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>.MyDate(<span class="number">2002</span>, <span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        employees.add(employee1);</span><br><span class="line">        employees.add(employee2);</span><br><span class="line">        employees.add(employee3);</span><br><span class="line"></span><br><span class="line">        System.out.println(employee1.toString());</span><br><span class="line"></span><br><span class="line">        employees.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Employee o1, Employee o2)</span> &#123;</span><br><span class="line">                <span class="comment">//先对传入的参数进行验证</span></span><br><span class="line">                <span class="keyword">if</span> (!(o1 <span class="keyword">instanceof</span> Employee &amp;&amp; o2 <span class="keyword">instanceof</span> Employee)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//比较name</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> o1.getMyDate().compareTo(o2.getMyDate());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(employees.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sal;</span><br><span class="line">    MyDate myDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> sal, MyDate myDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">        <span class="built_in">this</span>.myDate = myDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSal</span><span class="params">(<span class="type">int</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getMyDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyDate</span><span class="params">(MyDate myDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myDate = myDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&quot;, myDate=&quot;</span> + myDate.getYear() +</span><br><span class="line">                <span class="string">&quot;-&quot;</span>+ myDate.getMonth() +<span class="string">&quot;-&quot;</span> +</span><br><span class="line">                myDate.getDay() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyDate</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;MyDate&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把日期比较功能做到MyDate类中</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(MyDate o)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="built_in">this</span>.year - o.getYear();</span><br><span class="line">            <span class="keyword">if</span> (year != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> year;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mouth</span> <span class="operator">=</span> <span class="built_in">this</span>.month - o.getMonth();</span><br><span class="line">            <span class="keyword">if</span> (mouth != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> mouth;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o.getDay() - o.getDay();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.year = year;</span><br><span class="line">            <span class="built_in">this</span>.month = month;</span><br><span class="line">            <span class="built_in">this</span>.day = day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> year;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.year = year;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> month;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.month = month;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.day = day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Name</span>&lt;A, B...&gt; &#123;...&#125;<span class="comment">//泛型标识符 可有多个，一般是单个大写字母表示</span></span><br></pre></td></tr></table></figure><ol><li><p>普通成员可以使用泛型（属性、方法）</p></li><li><p>泛型类的类型，是在创建对象时确定的。</p><p>因此：静态方法中不能使用类的泛型；使用泛型的数组，也不能初始化。</p></li><li><p>创建对象时不指定的场合，默认 Object。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&lt;T, R, M&gt; &#123;</span><br><span class="line">    String name;</span><br><span class="line">    R r; <span class="comment">//属性使用到泛型</span></span><br><span class="line">    M m;</span><br><span class="line">    T t;</span><br><span class="line">    <span class="comment">//因为数组在new 不能确定T 的类型，就无法在内存开空间</span></span><br><span class="line">    T[] ts;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(R r, M m, T t)</span> &#123;<span class="comment">//构造器使用泛型</span></span><br><span class="line">    <span class="built_in">this</span>.r = r;</span><br><span class="line">    <span class="built_in">this</span>.m = m;</span><br><span class="line">    <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为静态是和类相关的，在类加载时，对象还没有创建</span></span><br><span class="line">    <span class="comment">//所以，如果静态方法和静态属性使用了泛型，JVM 就无法完成初始化</span></span><br><span class="line">    <span class="comment">// static R r2;</span></span><br><span class="line">    <span class="comment">// public static void m1(M m) &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名 &lt;T,R...&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>接口中，静态成员也不能使用泛型</li><li>泛型接口的类型在<strong>继承</strong>接口或<strong>实现</strong>接口时确定</li><li>没有指定类型，默认为Object</li></ol><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;T,R...&gt; 返回类型 方法名（参数列表）&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><p>泛型方法可以定义在普通类中，也可以定义在泛型类中（字母最好区分开）</p></li><li><p>当泛型方法被调用时，类型会确定</p></li><li><p><code>public void eat(E e)&#123;&#125;</code>修饰符没有<code>&lt;T,R...&gt;</code>，该方法不是泛型方法，而是使用了（类声明的）泛型</p></li><li><p>泛型方法可以使用类声明的泛型，也可以使用自己声明的泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法</span></span><br><span class="line">Fish&lt;String, ArrayList&gt; fish = <span class="keyword">new</span> <span class="title class_">Fish</span>&lt;&gt;();</span><br><span class="line">fish.hello(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">11.3f</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span>&lt;T, R&gt; &#123;<span class="comment">//泛型类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>&lt;U,M&gt; <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(U u, M m)</span> &#123;<span class="comment">//泛型方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">//1. 下面hi 方法不是泛型方法</span></span><br><span class="line">    <span class="comment">//2. 是hi 方法使用了类声明的泛型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//泛型方法，可以使用类声明的泛型，也可以使用自己声明泛型</span></span><br><span class="line">    <span class="keyword">public</span>&lt;K&gt; <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(R r, K k)</span> &#123;</span><br><span class="line">        System.out.println(r.getClass());<span class="comment">//ArrayList</span></span><br><span class="line">        System.out.println(k.getClass());<span class="comment">//Float</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="泛型继承与通配符"><a href="#泛型继承与通配符" class="headerlink" title="泛型继承与通配符"></a>泛型继承与通配符</h2><ul><li><p>泛型不具备继承性</p><p>创建一个可以存储Object泛型列表，其元素类型为<code>String</code>：<code>List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</code>是错误的</p></li><li><p><code>&lt;?&gt;</code>：支持任意泛型类型</p></li><li><p><code>&lt;? extends A&gt;</code>：支持A类及其子类，规定了泛型的上限</p></li><li><p><code>&lt;? super A&gt;</code>：支持A类及其父类，不限于直接父类，规定了泛型的下限</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;AA&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;BB&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;CC&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是List&lt;?&gt; c ，可以接受任意的泛型类型</span></span><br><span class="line">        printCollection1(list1);</span><br><span class="line">        printCollection1(list2);</span><br><span class="line">        printCollection1(list3);</span><br><span class="line">        printCollection1(list4);</span><br><span class="line">        printCollection1(list5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? extends AA&gt; c： 表示上限，可以接受AA 或者AA 子类</span></span><br><span class="line">        <span class="comment">// printCollection2(list1);//×</span></span><br><span class="line">        <span class="comment">// printCollection2(list2);//×</span></span><br><span class="line">        printCollection2(list3);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list4);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list5);<span class="comment">//√</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? super AA&gt; c: 支持AA 类以及AA 类的父类，不限于直接父类</span></span><br><span class="line">        printCollection3(list1);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list2);//×</span></span><br><span class="line">        printCollection3(list3);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list4);//×都是子类</span></span><br><span class="line">        <span class="comment">//printCollection3(list5);//×</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ? extends AA 表示上限，可以接受AA 或者AA 子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection2</span><span class="params">(List&lt;? extends AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说明: List&lt;?&gt; 表示任意的泛型类型都可以接受</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection1</span><span class="params">(List&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123; <span class="comment">// 通配符，取出时，就是Object</span></span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ? super 子类类名AA:支持AA 类以及AA 类的父类，不限于直接父类，</span></span><br><span class="line">    <span class="comment">//规定了泛型的下限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection3</span><span class="params">(List&lt;? <span class="built_in">super</span> AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JUnit使用"><a href="#JUnit使用" class="headerlink" title="JUnit使用"></a>JUnit使用</h2><ul><li>一个类有多个功能代码需要测试，为了测试，就要写入 <code>main</code> 方法中</li><li>如果有多个功能代码测试，需要反复撤销，过程繁琐</li><li>JUnit 是一个 Java 语言单元测试框架</li><li>多数 Java 开发环境都已集成了 JUnit 作为单元测试工具</li><li>加入 <code>@Test</code>，然后 <code>alt + enter</code> 引入 JUnit 5，最后运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;m1 方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·集合</title>
      <link href="/2024/09/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9B%86%E5%90%88/"/>
      <url>/2024/09/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="集合的框架体系"><a href="#集合的框架体系" class="headerlink" title="集合的框架体系"></a>集合的框架体系</h2><ul><li><p>Java 提供了一系列集合容器，以方便程序员<strong>动态</strong>保存元素。并提供了一系列方便的操作对象的<strong>方法</strong>。</p></li><li><p>Java 集合主要分为两组：单列集合（Collection）、双列集合（Map）</p><p><img src="/img/Collection.jpg" alt="ollectio"></p><p><img src="/img/Map.jpg" alt="a"></p></li></ul><h2 id="单列集合接口Collection"><a href="#单列集合接口Collection" class="headerlink" title="单列集合接口Collection"></a>单列集合接口Collection</h2><ul><li>Collection接口有两个重要的子接口List（有序集合）、Set（无序集合），它们实现的子类都是单列集合（存放单列数据）</li><li>Collection实现子类可以存放多个元素（可以是Object）</li><li>有些实现子类可以存放重复的元素，有些不能；有些是有序的，有些不是</li><li>Collection接口没有直接的实现子类，是通过它的子接口Set和List来实现的</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><ul><li><p><code>add</code>：添加单个元素 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="string">&quot;jack&quot;</span>);<span class="comment">//有自动装箱的过程</span></span><br><span class="line">list.add(<span class="literal">true</span>);</span><br><span class="line">list.add(<span class="number">10</span>);<span class="comment">//相当于List.add(new Integer(10));</span></span><br></pre></td></tr></table></figure></li><li><p><code>remove</code>：删除单个元素，若删除指定对象返回是否删除成功的布尔值，按索引删除返回对象本身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(<span class="number">0</span>)<span class="comment">// 删除编号 0 的元素。上例中会删除 &quot;jack&quot;</span></span><br><span class="line">list.remove((Integer)<span class="number">10</span>);<span class="comment">// 删除上例的 10 要这样写</span></span><br></pre></td></tr></table></figure></li><li><p><code>contains()</code>：检查元素是否存在</p></li><li><p><code>size()</code>：获取元素个数</p></li><li><p><code>isEmpty()</code>：判断是否为空</p></li><li><p><code>clear()</code>：清空</p></li><li><p><code>addAll()</code>：添加多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list2.add(<span class="number">111</span>);</span><br><span class="line">list2.add(<span class="string">&quot;idea&quot;</span>);</span><br><span class="line">list.addAll(list2);<span class="comment">// 这里可以输入所有实现了 Collection 接口的集合</span></span><br></pre></td></tr></table></figure></li><li><p><code>containsAll</code>：检查多个元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.contaionsAll(list2);<span class="comment">// 同上，放一个实现了 Collection 接口的集合</span></span><br></pre></td></tr></table></figure></li><li><p><code>removeAll</code>：删除多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.removeAll(list2);<span class="comment">// 同上</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h3><ul><li>Collection 继承的 Iterable 接口中，提供了 <code>iterator()</code> 方法，会返回一个迭代器对象。</li><li>迭代器用于遍历Collection集合中的元素，Iterator 对象仅用于遍历集合，本身不存放元素</li><li>所有实现了Collection接口的子类都有 <code>iterator()</code> 方法</li></ul><h4 id="遍历元素："><a href="#遍历元素：" class="headerlink" title="遍历元素："></a>遍历元素：</h4><p><strong>方法一：迭代器遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> c.iterator();<span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;<span class="comment">// [2]，快捷键itit+回车，生成while循环</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();<span class="comment">// [3]，编译类型是Object，运行类型取决与存放什么对象</span></span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>boolean hasNext()</code>：该方法判断是否有下一个元素。</li><li><code>T next()</code>：该方法会将指针下移，然后返回下移后的位置上的元素</li></ul><ol><li><p>获取迭代器</p></li><li><p>判断有无下一元素</p></li><li><p>将迭代器后移，并返回那个后移位置上的元素</p><p>while 循环结束后，指针指向最后元素的位置。再次 <code>next()</code> 会报错。</p><p>如果需要再次遍历，需要重置迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iterator = list.iterator();<span class="comment">// 重置了迭代器</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>方法二：for循环增强</strong></p><ul><li>就是简化版的iterator，底层也仍然是迭代器，只能用于遍历集合或数组</li><li>快捷键：I（大写i）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object o : list)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有序集合接口-List"><a href="#有序集合接口-List" class="headerlink" title="有序集合接口 List"></a>有序集合接口 List</h2><ul><li>List 是 Collection 接口的子类接口</li><li>List 是有序（添加顺序和取出顺序一致）的，可重复的</li><li>List 中的每个元素都有其对应的整数型顺序索引（从 0 开始编号），即支持索引</li><li>实现List接口的常用实现类有：ArrayList、LinkList和Vector</li></ul><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p><code>add(int, obj)</code>：在 int 位置插入 obj 元素。返回 true</p><p><code>add(obj)</code>：在末尾插入 obj。返回 true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="number">111</span>);</span><br><span class="line">list.add(<span class="number">0</span>, <span class="number">110</span>);<span class="comment">// 在第 1 个位置插入数字 110</span></span><br></pre></td></tr></table></figure></li><li><p><code>addAll(int, collection)</code>：在 int 位置插入 collection 中的所有元素</p></li><li><p><code>get(int)</code>：返回 int 位置的元素</p></li><li><p><code>indexOf(obj)</code>：返回 obj 首次出现时的位置</p></li><li><p><code>lastIndexOf(obj)</code>：返回 obj 最后一次出现时的位置</p></li><li><p><code>remove(int)</code>：移除 int 位置的元素，并返回那个被移除的元素</p></li><li><p><code>set(int, obj)</code>：设置 int 位置的元素为 obj。相当于替换。返回那个被替换元素的下标</p></li><li><p><code>subList(int1, int2)</code>：返回 [int1, int2) 范围的元素构成的子集合</p></li></ul><h3 id="三种遍历方式"><a href="#三种遍历方式" class="headerlink" title="三种遍历方式"></a>三种遍历方式</h3><ol><li><p>迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>其它List接口的实现类遍历方法也是一致的</li></ul><h3 id="可变数组ArrayList"><a href="#可变数组ArrayList" class="headerlink" title="可变数组ArrayList"></a>可变数组ArrayList</h3><ul><li>可以放任何值，可加入多个null</li><li>由数组来实现存储</li><li>基本等同于Vector，但线程不安全（执行效率高）</li></ul><h4 id="底层结构与源码分析"><a href="#底层结构与源码分析" class="headerlink" title="底层结构与源码分析"></a>底层结构与源码分析</h4><ul><li>ArrayList 中维护了一个 Object 类型的数组 elementData。该数组就是用来存放元素的数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="comment">//transient表示该属性不会被序列化</span></span><br></pre></td></tr></table></figure><ol><li>创建 ArrayList 对象时，如果使用<strong>无参构造器</strong>，则 elementData[] 初始容量为 0，第一次添加，扩容为10，如需再次扩容，则扩容为1.5倍</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建了一个空的elementData数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    <span class="comment">//rivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行add()方法时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(e)</span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);<span class="comment">//每次都要确认是否要扩容</span></span><br><span class="line">    <span class="comment">//进入方法内：先确认数组是否为空，如果是则在10与size + 1（0+1）中取大者赋给minCapacity</span></span><br><span class="line">    <span class="comment">//然后进入另一方法，确认当前容量小于minCapacity，才调用grow()方法扩容</span></span><br><span class="line">    elementData[size++] = e;<span class="comment">//执行赋值操作，注意是后++</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 扩容方法，传入的参数 minCapacity 是容器现有元素数量 + 1 的值</span></span><br><span class="line"><span class="comment">如果是无参构造器生成的默认数组，此时传入固定值 10 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">/* 计算新的容量（旧容量的 1.5 倍）</span></span><br><span class="line"><span class="comment">    此处 &gt;&gt; 为位运算符，等同于 newC = oldC + oldC / 2; */</span></span><br><span class="line">    <span class="comment">//第二次及以后按照旧容量1.5倍扩容</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/* 这里如果原容量是特殊值（1 或 0），容量会变为那个 minCapacity 的值 */</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);<span class="comment">//保证原先数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果使用<strong>指定大小构造器</strong>，则初始容量为指定大小。如需再次扩容，则扩容为1.5倍</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">        <span class="comment">//创建了指定大小的数组</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* 这个场合，与默认构造器的不同之处在于</span></span><br><span class="line"><span class="comment">扩容时，该 0 容量变为 1，而默认构造器会变为 10 */</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变数组Vector"><a href="#可变数组Vector" class="headerlink" title="可变数组Vector"></a>可变数组Vector</h3><ul><li>定义说明：Vector 是 List 的实现子类。</li><li>底层也是一个对象数组<code>protected Object[] elementData;</code></li><li>在开发中，需要考虑线程安全时，建议使用 Vector</li></ul><h4 id="Vector与ArrayList的比较"><a href="#Vector与ArrayList的比较" class="headerlink" title="Vector与ArrayList的比较"></a>Vector与ArrayList的比较</h4><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全（同步）效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全，效率高</td><td>有参1.5倍，无参：第一次10，第二次1.5倍</td></tr><tr><td>Vector</td><td>可变数组Object[]</td><td>jdk1.0</td><td>安全，效率不高</td><td>无参10，满后2倍；有参直接2倍</td></tr></tbody></table><h4 id="底层结构与源码分析-1"><a href="#底层结构与源码分析-1" class="headerlink" title="底层结构与源码分析"></a>底层结构与源码分析</h4><ol><li><p>底层维护了一个 Object 类型的数组 elementData。用以存放元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br></pre></td></tr></table></figure></li><li><p>使用无参构造器创建对象时，默认大小是 10</p><p>使用有参构造器的场合，默认是那个指定大小（initialCapaticy）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//——————————————————————再进入到带参的构器———————————————————</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用vector.add(i)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1 下面这个方法就添加数据到vector 集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;<span class="comment">//记录修改次数</span></span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);<span class="comment">//确认容量是否足够</span></span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.2 确定是否需要扩容条件： minCapacity - elementData.length&gt;0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">    grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>扩容的场合，容量变成 2 倍</p><p>使用有参构造器改变了 capacityIncrement 的场合，增量是那个指定数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">/* 计算新的容量（按照指定的增速扩容），</span></span><br><span class="line"><span class="comment">    在调用构造器时没有指定capacityIncrement的值，则默认为0</span></span><br><span class="line"><span class="comment">    capacityIncrement表示增长速度</span></span><br><span class="line"><span class="comment">    那个指定无效或未指定时，容量变为 2 倍 */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="链表LinkedList"><a href="#链表LinkedList" class="headerlink" title="链表LinkedList"></a>链表LinkedList</h3><ul><li>底层实现了双向链表和双端队列特点</li><li>可以添加任意元素。包括null，可重复</li><li>线程不安全，没有实现同步</li><li>添加和删除不是通过数组完成，效率更高</li></ul><p><img src="/img/LinkedList.png" alt="inkedLis"></p><h4 id="底层结构与源码分析-2"><a href="#底层结构与源码分析-2" class="headerlink" title="底层结构与源码分析"></a>底层结构与源码分析</h4><ol><li><p>LinkedList 只有默认构造器和一个拷贝构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时first=null，last=null</span></span><br><span class="line"><span class="comment">//————————————————————————————————————————————</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LinkedList 底层维护了一个 双向链表</p><p>两个属性 first、last 分别指向 首节点 和 尾节点</p><p>每个节点（Node 对象），里面又维护了 prev、next、item 属性。</p><p>其中通过 prev 指向前一个节点，通过 next 指向后一个节点。最终实现双向链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将新的结点，加入到双向链表的最后</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;<span class="comment">//l指向最后一个节点，如果没有节点则指向null</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);<span class="comment">//pre指向l</span></span><br><span class="line">    last = newNode;<span class="comment">//last指向每一次的新节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)&#123;</span><br><span class="line">        first = newNode;<span class="comment">//first，last都指向该新节点</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;   <span class="comment">//该新节点两头为null</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;<span class="comment">//链表大小</span></span><br><span class="line">    modCount++;<span class="comment">//修改次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LinkedList 不需要扩容。其增删元素时只要改变节点的指向即可。</p><p>也因此，其添加、删除元素效率比数组更高</p></li><li><p>调用<code>linkedList.remove();</code>默认删除第一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 执行removeFirst</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 执行</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">null</span>)&#123;<span class="comment">//检查有没有第一个节点，否则报错</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 执行unlinkFirst, 将f 指向的双向链表的第一个结点删除</span></span><br><span class="line"><span class="keyword">private</span> E <span class="title function_">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> &#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="literal">null</span>;</span><br><span class="line">    f.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>)&#123;</span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;<span class="comment">//返回删除内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="ArrayList-和-LinkedList-的比较"><a href="#ArrayList-和-LinkedList-的比较" class="headerlink" title="ArrayList 和 LinkedList 的比较"></a>ArrayList 和 LinkedList 的比较</h3><table><thead><tr><th>底层结构</th><th>增删效率</th><th>改查效率</th><th></th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>低（数组扩容）</td><td>高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>高（链表追加）</td><td>低</td></tr></tbody></table><ul><li>如果改查操作多，选择 ArrayList。一般来说，在程序中，80% - 90% 都是查询。大部分情况下，选择 ArrayList。</li><li>如果增删操作多，选择 LinkedList</li></ul><h2 id="无序集合接口Set"><a href="#无序集合接口Set" class="headerlink" title="无序集合接口Set"></a>无序集合接口Set</h2><h3 id="共同特性"><a href="#共同特性" class="headerlink" title="共同特性"></a>共同特性</h3><ul><li>无序，添加和取出顺序不一样，没有索引</li><li>不允许重复元素，最多只能包含一个null</li><li>常用子接口为HashSet与TreeSet</li></ul><p><strong>常用接口</strong></p><p>Set也是Collection的子接口，常用方法与Collection一致</p><p><strong>遍历方式</strong></p><p>同Connection接口</p><ol><li>可以使用迭代器</li><li>增强for</li><li><strong>不能</strong>使用索引的方式获取</li></ol><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li>实现了Set接口，底层是HashMap（数组+链表+红黑树）</li><li>添加和取出顺序不一样，但取出的顺序是固定的（底层是数组加链表）</li></ul><h4 id="底层结构与源码分析-3"><a href="#底层结构与源码分析-3" class="headerlink" title="底层结构与源码分析"></a>底层结构与源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>));<span class="comment">//加入成功，返回true</span></span><br><span class="line">set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>));<span class="comment">//加入失败，false，与源码有关</span></span><br></pre></td></tr></table></figure><ol><li>第一次添加元素时，table数组扩容到16，临界值（threshold）是16*加载因子（loadFactor）0.75 &#x3D; 12</li><li>添加元素时，先得到哈希值，再转成索引值</li><li>如果数组达到临界值就会扩容到16*2 &#x3D; 32，新临界值是32 * 0.75 &#x3D; 24，以此类推</li><li>临界值指只要每条链表挂载的<strong>对象总数</strong>超过就扩容，不是指table占据超过12</li><li>到数据存储表table，查看该索引是否存放元素，若无，直接加入</li><li>若有，调用equals方法比较，若相同，则放弃添加，若不同，则添加到链表最后</li><li>Java8中，若一条链表的元素个数到达<code>TREEIFY_THRESHOLD</code>(默认是8)，并且table大小大于等于<code>MIN_TREEIFY_CAPACITY</code>(默认64)，就会进行树化（红黑树）</li></ol><p><strong>源码分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();<span class="comment">//[1]</span></span><br><span class="line">hashSet.add(<span class="string">&quot;java&quot;</span>);<span class="comment">//到此位置，第1 次add 分析完毕.</span></span><br><span class="line">hashSet.add(<span class="string">&quot;aka&quot;</span>);<span class="comment">//到此位置，第2 次add 分析完毕</span></span><br><span class="line">hashSet.add(<span class="string">&quot;java&quot;</span>);<span class="comment">//第三次add，不添加</span></span><br><span class="line">System.out.println(<span class="string">&quot;set=&quot;</span> + hashSet);</span><br></pre></td></tr></table></figure><ol><li><p>执行HashSet()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//底层是HashMap</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;<span class="comment">//e = &quot;java&quot;字符串常量</span></span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//(static) PRESENT = new Object();属于占位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用put方法，该方法会执行hash(key) 得到key 对应的hash 值(不等于hash code)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;<span class="comment">//key = &quot;java&quot;， value = PRESENT 共享</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);<span class="comment">//hash(key)得出哈希值且 ！= hashCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行putVal</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;<span class="comment">//定义了辅助变量</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//table 就是HashMap 的一个数组，类型是Node[]</span></span><br><span class="line">        <span class="comment">//if 语句表示如果当前table 是null, 或者大小=0</span></span><br><span class="line">        <span class="comment">//就resize()第一次扩容，到16 个空间.并计算扩容临界值12</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//(1)根据key，得到hash 去计算该key 应该存放到table 表的哪个索引位置</span></span><br><span class="line">        <span class="comment">// 并把这个位置的对象，赋给p</span></span><br><span class="line">        <span class="comment">//(2)判断p 是否为null</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//(2.1) 如果p 为null, 表示还没有存放元素, 就创建一个Node (key=&quot;java&quot;,value=PRESENT)</span></span><br><span class="line">        <span class="comment">//(2.2) 就放在tab[i] = newNode(hash, key, value, null)</span></span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//第三次add进入else</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;<span class="comment">//开发时，在需要局部变量(辅助变量)时候，再创建</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;<span class="comment">//若当前索引位置对应链表的第一个元素与准备添加的key哈希值相等</span></span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">//并且准备添加的key与p指向的key是同一对象 或者 内容相同，就不加入</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//判断是不是红黑树，如果是就调用putTreeVal</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//table对应索引位置已是一个链表，开始循环比较</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;<span class="comment">//死循环</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;<span class="comment">//与每个元素都不相同，挂到最后</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">//判断是否达到8个节点</span></span><br><span class="line">                        treeifyBin(tab, hash);<span class="comment">//达到则进入判断是否转成红黑树</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;<span class="comment">//链表中有一个元素相同，直接退出</span></span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;<span class="comment">//每一次，p都指向新节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">//size 就是我们每加入一个结点Node(k,v,h,next), size++</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)<span class="comment">//看大小是否大于临界值</span></span><br><span class="line">        resize();<span class="comment">//扩容</span></span><br><span class="line">    afterNodeInsertion(evict);<span class="comment">//空方法，为了让子类实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//代表成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><ul><li>LinkedHashSet 是 HashSet 的子类</li><li>LinkedHashSet 底层是一个 LinkedHashMap，维护了一个数组 + 双向链表。<del>有其父必有其子</del></li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置。同时，使用链表维护元素的次序。这使得元素看起来是以插入顺序保存的，并得以按照放入顺序取出</li></ul><h4 id="底层结构与源码分析-4"><a href="#底层结构与源码分析-4" class="headerlink" title="底层结构与源码分析"></a>底层结构与源码分析</h4><ul><li><p>在LinkedHashSet中维护一个LinkedHashMap（是HashMap的子类）</p></li><li><p>底层结构是数组table和双向链表（有head和tail）</p></li><li><p>双向链表每个节点有before和after属性形成双向链表</p><p><code>tail.next = newElement;</code></p><p><code>newElement.pre = tail;</code></p><p><code>tail =  newElement;</code></p></li><li><p>添加元素时操作同HashSet，这样遍历在LinkedHashSet时能够保证<strong>插入顺序与遍历顺序一致</strong></p></li></ul><p><img src="/img/LinkedHashSet%E5%BA%95%E5%B1%82%E6%9C%BA%E5%88%B6.png" alt="inkedHashSet底层机"></p><ul><li><p>练习，重写equals方法与hashCode方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSetExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedHashSet&lt;Car&gt; linkedHashSet = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥拓&quot;</span>, <span class="number">1000</span>)); <span class="comment">// OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>)); <span class="comment">// OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;法拉利&quot;</span>, <span class="number">10000000</span>)); <span class="comment">// OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>)); <span class="comment">// 加入不了</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;保时捷&quot;</span>, <span class="number">70000000</span>)); <span class="comment">// OK</span></span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>)); <span class="comment">// 加入不了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;linkedHashSet=&quot;</span> + linkedHashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\nCar&#123;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">               <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">               <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写equals方法和hashCode</span></span><br><span class="line">    <span class="comment">// 当name和price相同时，就返回相同的hashCode值, equals返回true</span></span><br><span class="line">    <span class="comment">//使用Alt+Insert自动生成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) o;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(car.price, price) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">               Objects.equals(name, car.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ul><li><p>TreeSet 实现了 Set 接口，其底层是一个 TreeMap。</p></li><li><p>使用无参构造器创建时，是无序的</p></li><li><p>使用可传入比较器的构造器（匿名内部类）并指定排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="comment">//下面调用String 的compareTo 方法进行字符串大小比较</span></span><br><span class="line">        <span class="comment">//要求加入的元素，按照长度大小排序</span></span><br><span class="line">        <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">        <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">        <span class="comment">//按字母大小排序</span></span><br><span class="line">        <span class="keyword">return</span> ((String) o2).compareTo((String) o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//________________________源码说明___________________________</span></span><br><span class="line"><span class="comment">//1. 构造器把传入的比较器对象，赋给了TreeSet 的底层的TreeMap 的属性this.comparator</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 在调用treeSet.add(&quot;sth&quot;), 在底层会执行到</span></span><br><span class="line"><span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;<span class="comment">//cpr 就是我们的匿名内部类(对象)</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        parent = t;</span><br><span class="line">        <span class="comment">//动态绑定到我们的匿名内部类(对象)compare</span></span><br><span class="line">        cmp = cpr.compare(key, t.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        t = t.left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">        t = t.right;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//如果相等，即返回0,这个Key 就没有加入</span></span><br><span class="line">        <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">    &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="双列集合接口Map"><a href="#双列集合接口Map" class="headerlink" title="双列集合接口Map"></a>双列集合接口Map</h2><h3 id="Map接口实现类的特点"><a href="#Map接口实现类的特点" class="headerlink" title="Map接口实现类的特点"></a>Map接口实现类的特点</h3><ul><li>Map接口的实现子类是双列集合，存放的是key和value（存放双列数据）</li><li>Map接口的常用实现类：HashMap,HashTable,Proprties</li></ul><p><strong>适用于 JDK 8 的环境</strong></p><ul><li>Map 与 Collection 并列存在，用于保存具有映射关系的数据：key - value（双列元素）</li><li>Map 的 key 和 value 可以是任何类型的引用数据类型，会封装到HashMap$Node对象中</li><li>Map 的 key 不允许重复，value 可以重复。key 和 value 存在单一对应关系。通过特定的 key 一定能找到指定的 value。当有相同的key，等价为替换</li><li>Map 的 key和value都可以为null，key为null只能有一个，value为null可有多个</li><li>常用String类作为Map的key</li><li>一组 k - v 会被封装到一个 Entry 对象中。Entry 是一个内部接口。Map 的实现子类中都包含一个实现这个接口的内部类。</li></ul><h3 id="Map接口和常用方法"><a href="#Map接口和常用方法" class="headerlink" title="Map接口和常用方法"></a>Map接口和常用方法</h3><p><strong>Map接口的特点</strong></p><ol><li><strong>键值对封装</strong>:<ul><li>在Map接口中，每个键值对都被封装在一个实现了Map.Entry接口的HashMapNode对象中。即<code>EntrySet&lt;Map.Entry&lt;K, V&gt;&gt;</code></li><li>Map.Entry接口定义了键值对的基本操作，如获取键（getKey()）和获取值（getValue()，从而轻松地访问和修改Map中的键值对</li></ul></li><li><strong>EntrySet集合</strong>:<ul><li>Map接口提供了一个<code>entrySet()</code>方法，它可以返回一个集合，这个集合包含了Map中所有的键值对。</li><li>这个集合被称为<code>EntrySet</code>，它存放的是Map.Entry类型的对象，每个对象的两个引用各自指向键和值。</li></ul></li><li><strong>键值对的存储</strong>:<ul><li>在实现Map接口的类（如HashMap）中，每个键值对实际上是通过一个实现了Map.Entry接口的类（如HashMap中的Node类）来存储的。</li><li>这意味着虽然<code>EntrySet</code>中定义的类型是Map.Entry，但实际上存放的是具体的实现类（如HashMap中的Node类）的实例。</li></ul></li></ol><ul><li>Map接口提供了一种抽象的方式，允许存储和操作键值对。通过实现Map.Entry接口的类，你可以将键值对存储在各种数据结构中，如链表、红黑树等。而<code>EntrySet</code>集合则提供了一种方便的方式来遍历和操作这些键值对。</li><li><code>Map</code>接口定义了键值对集合的框架和操作，而<code>Map.Entry</code>接口则定义了键值对的具体表示和行为。</li></ul><p><strong>常用方法</strong></p><ul><li><p><code>put()</code>：添加。已存在的场合，实行替换。（key 不替换，value 替换）</p></li><li><p><code>remove()</code>：根据键删除映射关系</p></li><li><p><code>get()</code>：根据键获取值</p></li><li><p><code>size()</code>：元素个数</p></li><li><p><code>isEmpty()</code>：判断个数是否为 0</p></li><li><p><code>clear()</code>：清空</p></li><li><p><code>containsKey()</code>：查找键是否存在</p></li><li><p><code>Set&lt;K&gt; keySet()</code>：获取所有 键 构成的集合</p><p><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>：获取所有 Entry 构成的集合</p><p><code>Collection&lt;V&gt; values()</code>：获取所有 值 构成的集合</p></li></ul><h3 id="Map接口遍历方式"><a href="#Map接口遍历方式" class="headerlink" title="Map接口遍历方式"></a>Map接口遍历方式</h3><ul><li><p>第一组：取出所有的key，通过key取出对应value</p><ul><li><p>法一：增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.KeySet();</span><br><span class="line"><span class="keyword">for</span> (Object key: keyset) &#123;</span><br><span class="line">    System.out.println(key +<span class="string">&quot;-&quot;</span>+ map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>法二：迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keyset.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(key +<span class="string">&quot;-&quot;</span>+ map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第二组：把所有的value取出，可以使用所有Collection的遍历方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line"><span class="comment">//增强for</span></span><br><span class="line">System.out.println(<span class="string">&quot;---取出所有的value 增强for----&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> values.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> iterator2.next();</span><br><span class="line">        out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三组：通过EntrySet 来获取k-v</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();<span class="comment">// EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span></span><br><span class="line"><span class="comment">//增强for</span></span><br><span class="line"><span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">    <span class="comment">//将entry 转成Map.Entry</span></span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">    System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator3</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator3.hasNext()) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span> iterator3.next();</span><br><span class="line">        <span class="comment">//System.out.println(next.getClass());本质是Node</span></span><br><span class="line">        <span class="comment">//HashMap$Node -实现-&gt; Map.Entry (getKey,getValue)</span></span><br><span class="line">        <span class="comment">//向下转型Map.Entry</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">        System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="散列表HashMap"><a href="#散列表HashMap" class="headerlink" title="散列表HashMap"></a>散列表HashMap</h2><ul><li>HashMap 是 Map 接口使用频率最高的实现类。</li><li>HashMap以key-value对的方式来存储数据（HashMap$Node类型），一组数据会被封装到一个 Node 对象中。</li><li>key不能重复，但value可以，允许null键与null值</li><li>添加相同key，则覆盖原来的k-v</li><li>HashMap 没有实现同步（没有 synchronized），是线程不安全的</li></ul><p><img src="/img/HashMap.jpg" alt="ashMa"></p><h3 id="底层机制及源码解析"><a href="#底层机制及源码解析" class="headerlink" title="底层机制及源码解析"></a>底层机制及源码解析</h3><ul><li>JDK 7 前，HashMap 底层是 数组 + 链表。JDK 8 后，底层是 数组 + 链表 + 红黑树。HashMap 不保证映射的顺序</li><li>扩容机制与HashSet完全一致</li></ul><ol><li><p>HashMap 底层维护了 Node 类型的数组 table。默认为 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure></li><li><p>创建对象时，默认构造器将加载因子（loadfactor）初始化为 0.75。</p><p>也能指定那些初始容量和加载因子。</p><p>默认构造器第一次添加元素的场合，table 扩容为 16，临界值为 16 * 0.75 &#x3D; 12。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;<span class="comment">// 这个默认构造的场合，其他参数都是默认值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(...);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(...);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加时容量不够的场合，需要扩容。</p><p>默认构造器第一次添加元素的场合，table 扩容为 16，临界值为 16 * 0.75 &#x3D; 12。</p><p>扩容的场合，容量变为 2 倍。临界值相应变化。</p><p>临界值不会超过那个指定的 MAXIMUM_CAPACITY（1 &lt;&lt; 30），否则变成 Integer.MAX_VALUE。</p><p>JDK 8 中，如果一条链表的元素个数超过 TREEIFY_THRESHOLD（默认是 8），并且 <code>table</code> 的大小 &gt;&#x3D; MIN_TREEIFY_CAPACITY（默认 64），会进行树化。</p><p>剪枝：红黑树的元素减少到一定程度，会被重新转化为 链表 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;<span class="comment">// &lt;- 旧的数据数组 table</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;<span class="comment">// &lt;- 旧的 table 的容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;<span class="comment">// &lt;- 旧的临界值</span></span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;<span class="comment">// &lt;- 新的容量、临界值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 旧的数组不为空时，</span></span><br><span class="line"><span class="comment">    如果容量已达指定的 MAXIMUM_CAPACITY，则不扩容</span></span><br><span class="line"><span class="comment">    否则扩容为 2 倍容量，临界值也变为 2 倍 */</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        newCap = oldCap &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 旧的数组为空，但临界值已被指定（原因是：指定构造器传入初始容量为 0） */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">/* 旧的数组为空，临界值为 0（原因是：使用默认构造器）</span></span><br><span class="line"><span class="comment">    默认构造器初始化容量为 16，默认临界因子为 0.75f */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 到这里，newThr（新临界值）为 0 的原因可能是：</span></span><br><span class="line"><span class="comment">    1. 旧容量小于那个最小容量（16）</span></span><br><span class="line"><span class="comment">    2. 扩容后容量大于那个最大容量</span></span><br><span class="line"><span class="comment">    3. 旧的临界值为 0 或 Integer.MIN_VALUE</span></span><br><span class="line"><span class="comment">    4. 构造器传入初始容量为 0 */</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 按照 新容量 * 临界因子 的方法计算临界值。临界值不会超过一个指定的最大值 */</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 确定了容量和临界值，下面把旧数组元素移至新数组。</span></span><br><span class="line"><span class="comment">    那个移动的场合，会以新容量重新计算所有元素的下标位置 */</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>添加 k - v 时，通过 key 的哈希值得到其在 table 的索引，判断索引位置是否被占用。</p><p>未占用的场合，直接添加。</p><p>占用的场合，判断其 key 是否相等。相等的场合，替换 value。否则，按照 树 或 链表 的方式处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 会先对放入元素的哈希值进行一次计算，得到一个数字：hash */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h ^ (h &gt;&gt;&gt; <span class="number">16</span>));<span class="comment">// 位运算符：&gt;&gt;&gt; 无符号右移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* put 方法会调用该 putVal 方法。</span></span><br><span class="line"><span class="comment">那些传入值是：hash、key、  value、 false、     true */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab = table; <span class="comment">// &lt;- 是那个存放数据的 table 数组</span></span><br><span class="line">    <span class="type">int</span> n;<span class="comment">// &lt;- 是 table.length</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果原先的 table 为空，则对其重新分配空间 */</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">        tab = resize();</span><br><span class="line">        n = tab.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 用方才计算的 hash 数，得到要放入元素的下标值 i</span></span><br><span class="line"><span class="comment">    n - 1 是数据数组的最大下标，(n - 1) &amp; hash 必定不大于 n - 1 */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (n - <span class="number">1</span>) &amp; hash;<span class="comment">// 位运算符：&amp; 按位与</span></span><br><span class="line">    Node&lt;K,V&gt; p = tab[i];<span class="comment">// 得到 table 中，位于那个插入位置的元素</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 倘若该位置为空，则直接放入 */</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 该位置不为空，意味着可能添加了重复元素 */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; </span><br><span class="line">        <span class="comment">// &lt;- 被发现重复的那个 Node。无重复时结果为 null。这个 Node 的 value 会被替换。</span></span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> p.key;<span class="comment">// &lt;- 当前取出进行比较的 key 值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 为了验证其是否重复，这里要进行如下比较：</span></span><br><span class="line"><span class="comment">        1. 比较两者的 hash 数。不同的场合是不同元素</span></span><br><span class="line"><span class="comment">        2. 使用 == 和 equals 两种方法比较 key。不同的场合是不同元素 </span></span><br><span class="line"><span class="comment">        如果是相同元素，则该节点的值会被替换 */</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; (k  == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            e = p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 此处节点结构是 树 的场合，还需遍历比较树的每个节点 */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 此处节点结构是 链表 的场合，还需遍历比较每个链表节点 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                e = p.next;</span><br><span class="line">                <span class="comment">/* e == null 意味着遍历结束，全部不同。这样，在此处添加那个新的 Node */</span></span><br><span class="line">                <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/* 故技重施，如果发现相同，则替换那个新元素 */</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 经历上述比较后，e != null 意味着有元素要被替换了 */</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="comment">/* 传入的参数 onluIfAbsent == false，所以此处一定是 true */</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);<span class="comment">// &lt;- HashMap 中，该方法为空实现。</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果到达这里，说明添加了元素（而非替换），要查看大小是否超过临界值 */</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);<span class="comment">// &lt;- HashMap 中，该方法为空实现。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="散列表HashTable"><a href="#散列表HashTable" class="headerlink" title="散列表HashTable"></a>散列表HashTable</h2><ul><li>Hashtable 和 HashMap 基本一致，但Hashtable 是线程安全的 。但也因为如此，Hashtable 的效率低下。</li><li>Hashtable不允许键和值为空</li></ul><p><strong>Hashtable 与 HashMap 的比较：</strong></p><table><thead><tr><th></th><th>版本</th><th>线程安全（同步）</th><th>效率</th><th>是否允许 null值</th></tr></thead><tbody><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不允许</td></tr><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>允许</td></tr></tbody></table><h3 id="底层机制"><a href="#底层机制" class="headerlink" title="底层机制"></a>底层机制</h3><ol><li><p>Hashtable底层为数组HashTable$Entry[]，初始大小为11</p></li><li><p>临界值threshhold是 11 * 0.75 &#x3D; 8。</p></li><li><p>扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;<span class="comment">//即，原容量 * 2 + 1</span></span><br></pre></td></tr></table></figure></li><li><p>Hashtable 不会树化</p></li></ol><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul><li>Properties 继承自 Hashtable 并实现了 Map 接口。也使用键值对的方式保存数据</li><li>Properties 使用特点与 Hashtable 相似，k-v不能为空</li><li>Properties 还可以用于 xxx.properties 文件中，加载数据到 Properties 对象，进行读取和修改</li><li>xxx.properties 文件常作为配置文件(详见IO流)</li></ul><p><strong>基本使用</strong></p><p><code>Peoperties peoperties = new Properties();</code></p><ol><li><p>增加<code>properties.put(&quot;John&quot;, 100)</code></p></li><li><p>通过k获取对应值<code>properties.get(&quot;John&quot;);</code></p></li><li><p>删除<code>properties.remove(&quot;John&quot;);</code></p></li><li><p>修改<code>properties.put(&quot;John&quot;, 10000);</code></p></li><li><p>查找<code>properties.get(&quot;John&quot;);</code>  <code>properties.getProperty(&quot;John&quot;);</code></p><p>​</p></li></ol><h2 id="红黑树TreeMap"><a href="#红黑树TreeMap" class="headerlink" title="红黑树TreeMap"></a>红黑树TreeMap</h2><ul><li><p>TreeMap 实现了 Map 接口。底层使用 红黑树 存储数据。</p></li><li><p>默认构造器创建TreeMap是无序的（也没有排序）</p></li><li><p>传入比较器指定排序方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="comment">//按照传入的k(String) 的大小进行排序</span></span><br><span class="line">        <span class="comment">//按照K(String) 的长度大小排序</span></span><br><span class="line">        <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">        <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//_____________________________________________________________</span></span><br><span class="line"><span class="comment">//1. 构造器. 把传入的实现了Comparator 接口的匿名内部类(对象)，传给给TreeMap 的comparator</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 调用put 方法</span></span><br><span class="line"><span class="comment">//2.1 第一次添加, 把k-v 封装到Entry 对象，放入root</span></span><br><span class="line">Entry&lt;K,V&gt; t = root;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">    compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line">    root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);<span class="comment">//封装</span></span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    modCount++;<span class="comment">//记录修改次数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.2 以后添加</span></span><br><span class="line">Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line"><span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123; <span class="comment">//遍历所有的key , 给当前key 找到适当位置</span></span><br><span class="line">        parent = t;</span><br><span class="line">        cmp = cpr.compare(key, t.key);<span class="comment">//动态绑定到匿名内部类的compare</span></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            t = t.left;<span class="comment">//给当前key设置适当位置</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            t = t.right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//如果遍历过程中，发现准备添加Key 和当前已有的Key 相等，就不添加</span></span><br><span class="line">            <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">    &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="集合选型规则"><a href="#集合选型规则" class="headerlink" title="集合选型规则"></a>集合选型规则</h2><p>在开发中，选择什么集合实现类，主要取决于<strong>业务操作特点</strong>，然后根据集合实现类特性进行分析选择。</p><p>判断存储的类型（一组对象 [单列]，或一组键值对 [双列]）</p><ul><li>一组对象：Collection 接口<ul><li>允许重复：List<ul><li>增删多：<code>LinkedList</code> （双向链表）</li><li>改查多：ArrayList （<code>Object[]</code> 数组）</li></ul></li><li>不允许重复：Set<ul><li>无序：HashSet （数组 + 链表 + 红黑树，底层是 HashMap）</li><li>排序：<code>TreeSet</code></li><li>顺序一致：LinkedHashSet （数组 + 双向链表，底层是 <code>LinkedHashMap</code>）</li></ul></li></ul></li><li>一组键值对：Map<ul><li>键无序：HashMap （数组 + 链表 + 红黑树 [ JDK 8 以后 ] ）</li><li>键排序：<code>TreeMap</code></li><li>键顺序一致：<code>LinkedHashMap</code> （底层是 HashMap）</li><li>读取文件：Properties</li></ul></li></ul><h2 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h2><ul><li>Collections 工具类是一个操作 Set、List、Map 等集合的工具类</li><li>其中提供了一系列静态方法，对集合元素进行 排序、查询和修改等操作</li></ul><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong>排序：</strong></p><ul><li><code>Collections.reverse(List)</code>：反转 List 中元素的排序</li><li><code>Collections.shuffle(List)</code>：对 <code>List </code>中元素进行随机排序</li><li><code>Collections.sort(List)</code>：根据元素的自然顺序(首字母大小)对指定 List 集合元素升序排列</li><li><code>Collections.reverse(List, Comparator)</code>：根据指定 Comparator 对 List 排序</li><li><code>Collections.swap(List, int, int)</code>：将两处元素位置互换</li></ul><p><strong>查找、替换：</strong></p><ul><li><p><code>Collections.max(Collection)</code>：根据元素的自然排序，返回集合中最大的元素</p></li><li><p><code>Collections.max(Collection, Comparator)</code>：根据比较器，返回最大元素（如长度最大）</p></li><li><p><code>Collections.min(Collection)</code>：根据元素的自然排序，返回最小元素</p></li><li><p><code>Collections.min(Collection, Comparator)</code>：根据比较器，返回最小元素</p></li><li><p><code>Collections.frequency(Collection, Object)</code>：返回集合中指定元素的出现次数（int）</p></li><li><p><code>Collections.copy(List dest, List list)</code>：将 list的内容复制到 dest 中</p><p>这个场合，要保证 dest 的大小不小于list。所以，可能需要先给 dest 赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">    dest.add(<span class="string">&quot;&quot;</span>);<span class="comment">//赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Collections.replaceAll(List list, Object oldVal, Object newVal)</code>：用 newVal 替换所有 oldVal 值</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·常用类</title>
      <link href="/2024/09/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2024/09/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ul><li>针对 八种基本数据类型 相应的 引用类型。有了类的特点，就可以调用类中的方法</li></ul><table><thead><tr><th>基本数据类型</th><th>包装类</th><th>父类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td><td>Object</td></tr><tr><td>char</td><td>Character</td><td>Object</td></tr><tr><td>int</td><td>Integer</td><td>Number</td></tr><tr><td>float</td><td>Float</td><td>Number</td></tr><tr><td>double</td><td>Double</td><td>Number</td></tr><tr><td>long</td><td>Long</td><td>Number</td></tr><tr><td>short</td><td>Short</td><td>Number</td></tr><tr><td>byte</td><td>Byte</td><td>Number</td></tr><tr><td>void</td><td>Void</td><td>Object</td></tr></tbody></table><p><img src="/img/Boolean%E5%8C%85%E8%A3%85%E7%B1%BB.jpg" alt="oolean包装"></p><p><img src="/img/Number%E5%8C%85%E8%A3%85%E7%B1%BB.jpg" alt="umber包装"></p><h3 id="包装类和基本数据类型的相互转换"><a href="#包装类和基本数据类型的相互转换" class="headerlink" title="包装类和基本数据类型的相互转换"></a>包装类和基本数据类型的相互转换</h3><ul><li><p>手动装箱与拆箱（JDK5以前）：基本类型 &lt;–&gt; 包装类型（对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//基本数据类型</span></span><br><span class="line"><span class="comment">//手动装箱 int --&gt; integer</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(n1);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> Integer.valueOf(n1);</span><br><span class="line"><span class="comment">//手动装箱 integer --&gt; int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer.intValue();</span><br></pre></td></tr></table></figure></li><li><p>自动装箱与拆箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n2 = <span class="number">200</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer3</span> <span class="operator">=</span> n2;<span class="comment">// 自动装箱,底层使用的是Integer.valueOf(n2)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> integer3;<span class="comment">// 自动拆箱</span></span><br></pre></td></tr></table></figure></li><li><p>其它包装类用法类似</p></li><li><p>Integer创建机制</p><ul><li><p>虽然可以自动装箱、拆箱，但使用 &#x3D;&#x3D; 直接比较两个包装类时，仍然是比较其地址。以下比较通常会失败：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">ia</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ib</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.print(ia == ib);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>Byte、Boolean 以及 Short、Integer 中 <strong>[-128, 127]</strong> 间的值已被包装到固定的对象中。对他们的比较可以成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">ia</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ib</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.print(ia == ib);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>由此可见，使用 &#x3D;&#x3D; 直接比较两个包装类会带来不确定性。<strong>尽量使用 equals 方法对包装类进行比较。</strong></p><p>装箱与拆箱是 <strong>编译器</strong> 的工作。在生成可执行的字节码文件时，编译器已经插入了必要的方法调用。</p><p>（<code>==</code>只要有基本数据类型，判断的是值是否相等,有<code>new</code>一定是不同对象）</p></li></ul></li></ul><h3 id="包装类和-String-的相互转换"><a href="#包装类和-String-的相互转换" class="headerlink" title="包装类和 String 的相互转换"></a>包装类和 <code>String</code> 的相互转换</h3><ul><li><p>包装类转 <code>String</code>：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;<span class="comment">//方法1（自动拆箱），对原先i无影响</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> i.toString();<span class="comment">//方法2（toString方法）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(i);<span class="comment">//方法3（自动拆箱）</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>String</code> 转包装类：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> Integer.parseInt(str4);<span class="comment">//方法1（自动装箱）</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str4);<span class="comment">//方法2（构造器）</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="包装类的常用方法"><a href="#包装类的常用方法" class="headerlink" title="包装类的常用方法"></a>包装类的常用方法</h3><ul><li><p><code>Integer.MIN_VALUE</code>：返回最大值</p><p><code>Double.MAX_VALUE</code>：返回最小值</p></li><li><p><code>Character.isDigit(int)</code>：判断是不是数字</p><p><code>Character.isLetter(int)</code>：判断是不是字母</p><p><code>Character.isUpperCase(int)</code>：判断是不是大写字母</p><p><code>Character.isLowerCase(int)</code>：判断是不是小写字母</p><p><code>Characher.isWhitespace(int)</code>：判断是不是空格</p></li><li><p><code>Character.toUpperCase(int)</code>：转成大写字母</p><p><code>Character.toLowerCase(int)</code>：转成小写字母</p></li></ul><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ul><li><p><strong>String对象</strong>用于保存字符串，也就是一组字符序列</p></li><li><p><strong>字符串常量对象</strong>是用双引号扩起的字符序列。例如 <code>&quot;你好&quot;</code></p></li><li><p>字符串的字符使用 Unicode 字符编码。一个字符（不论字母汉字）占 2 字节</p></li><li><p>常用构造器：</p><ul><li><p><code>String str1 = new String();</code></p></li><li><p><code>String str2 = new String(String original);</code></p></li><li><p><code>String str3 = new String(char[] a);</code></p></li><li><p><code>String str4 = new String(char[] a, int startIndex, int count);</code></p><p>这句意思是：<code>char[]</code> 从 <code>startIndex</code> 起的 <code>count</code> 个字符</p></li></ul></li><li><p><code>String</code> 实现了接口 <code>Serializable</code> 和 <code>Comparable</code> ，可以 串行化和 比较大小</p><p><strong>串行化：即，可以被网络传输，也能保存到文件</strong></p></li><li><p><code>String</code> 是 <code>final</code> 类，不能被继承</p></li><li><p><code>String</code> 有属性 <code>private final char[] value;</code> 用于存放字符串内容。</p><p><code>value</code> 是 <code>final</code> 属性。其在栈中的<strong>地址</strong>不能修改，但堆中的内容可以修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">char</span>[] value = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span>[] v2 = &#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;m&#x27;</span>&#125;;</span><br><span class="line">value[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;<span class="comment">//正确</span></span><br><span class="line">value = v2;<span class="comment">//错误，不可以修改value的地址</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="String对象创建方法"><a href="#String对象创建方法" class="headerlink" title="String对象创建方法"></a>String对象创建方法</h3><ul><li><p>直接赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>先从方法区的常量池看是否已有存储 <code>&quot;Hello&quot;</code> 的数据空间。有的场合，指向那个空间；否则重新创建然后指向，<code>str1</code> 指向 常量池中的地址。</p></li><li><p>调用构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>先在堆中创建空间，里面维护一个 <code>value</code> 属性，<strong>指向 或 创建后指向</strong> 常量池的 <code>&quot;Hello&quot;</code> 空间，<code>str2</code> 指向 堆中的地址</p></li><li><p>最终两个对象名指向的地址不同，不是同一对象</p></li></ul><p><img src="/img/String%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png" alt="tring的内存布"></p><ul><li><p><strong>str.intern()方法</strong>：如果池中已包含一个内容相同的String对象，则返回该字符串地址，否则将此对象添加到池中并返回其地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//续上代码</span></span><br><span class="line">System.out.println(str2 == str2.intern());<span class="comment">//输出False</span></span><br><span class="line"><span class="comment">//str2指向堆中value，str2.intern()指向常量池中字符串，二者不是相同地址</span></span><br><span class="line">System.out.println(str1 == str2.intern());<span class="comment">//输出True</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h3><ul><li><p>String是一个final类，代表不可变的字符序列，字符串对象一旦被分配，其内容是不可变的</p></li><li><p>字符串常量相加，指向常量池。编译器会判断各自是否有引用指向，否则优化为一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span> + <span class="string">&quot;World&quot;</span>;<span class="comment">//创建一个对象</span></span><br></pre></td></tr></table></figure></li><li><p>变量相加，指向堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> b + c;<span class="comment">//一共三个对象</span></span><br><span class="line"><span class="comment">//StringBuilder sb = new StringBuilder();该对象内部有一个存储内容的数组</span></span><br><span class="line"><span class="comment">//sb.append(a);</span></span><br><span class="line"><span class="comment">//sb.append(b);</span></span><br><span class="line"><span class="comment">//String c = sb.toString();调用StringBuilder的toString方法</span></span><br><span class="line"><span class="comment">//将数组内容转换成在堆中String对象，再指向方法池，最后将地址返回给d</span></span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;HelloWorld&quot;</span><span class="comment">//但d与e地址不同</span></span><br></pre></td></tr></table></figure></li></ul><p>（一定看源码学习）</p><ul><li><p>练习题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test1类中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str,<span class="type">char</span> ch[])</span>&#123;</span><br><span class="line">    str = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">    ch[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mian方法</span></span><br><span class="line"><span class="type">Test1</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">ex.change(ex.str,ex.ch);</span><br><span class="line">System.out.print(ex.str + <span class="string">&quot; and &quot;</span>);</span><br><span class="line">System.out.print(ex.ch);<span class="comment">//整体输出hello and hava</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="String类的常见方法"><a href="#String类的常见方法" class="headerlink" title="String类的常见方法"></a>String类的常见方法</h3><ul><li><p><code>equals(String s)</code>：区分大小写，判断内容是否相等，返回Boolean</p><p><code>equalsIgnoreCase(String s)</code>：判断内容是否相等（忽略大小写），返回Boolean</p></li><li><p><code>length()</code>：获取字符（<strong>代码单元</strong>）的个数，返回int</p></li><li><p><code>indexOf(String str)</code>：获取字符（串）在字符串中第一次出现的索引。如果找不到，返回 -1</p><p><code>lastIndexOf(String str)</code>：获取字符在字符串中最后一次出现的索引。如果找不到，返回 -1</p></li><li><p><code>substring(int start, int end)</code>：返回截取指定范围 [start, end**)** 的 <strong>新</strong> 字符串</p><p><code>substring(int index)</code>：截取 index（包含）之后的部分</p></li><li><p><code>compareTo(String another)</code>：按照字典顺序比较两个字符串（的大小）。</p><p>(1) 如果长度相同，并且每个字符也相同，就返回0<br>(2) 如果长度相同或者不相同，但是在进行比较时，可以区分大小，return c1 - c2;<br>(3) 如果前面的部分都相同，就返回str1.len - str2.len</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ca&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ccc111abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;cac&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> str1.compareTo(str2);<span class="comment">//2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> str1.compareTo(str3);<span class="comment">//-6</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> str1.compareTo(str1);<span class="comment">//0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> str1.compareTo(str4);<span class="comment">//2</span></span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> anotherString.value.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lim</span> <span class="operator">=</span> Math.min(len1, len2);</span><br><span class="line">        <span class="type">char</span> v1[] = value;<span class="comment">//字符数组</span></span><br><span class="line">        <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; lim) &#123;<span class="comment">//遍历字符数组</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> v1[k];</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> v2[k];</span><br><span class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="comment">//当前位置的两个字符不相等，则返回它们之间的差值。</span></span><br><span class="line">            <span class="comment">//这个差值是两个字符在Unicode编码中的差值</span></span><br><span class="line">                <span class="keyword">return</span> c1 - c2;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len1 - len2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>toCharArray()</code>：转换成字符数组</p></li><li><p><code>toUperCase()</code>：返回字母全部转为大写的新字符串</p><p><code>toLowerCase()</code>：返回字母全部转为小写的新字符串</p></li><li><p><code>concat(String another)</code>：返回拼接字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;宝玉&quot;</span>;</span><br><span class="line">s1 = s1.concat(<span class="string">&quot;林黛玉&quot;</span>).concat(<span class="string">&quot;薛宝钗&quot;</span>).concat(<span class="string">&quot;together&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>replace(char oldChar, char newChar)</code>：替换字符串中的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str1.replace(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;New&quot;</span>);<span class="comment">//str1不变，str2为改变的值</span></span><br></pre></td></tr></table></figure></li><li><p><code>split(String regex)</code>：分割字符串，返回一个数组</p><p>对于某些分割字符，我们需要转义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class="line">String[] strs1 = str1.split(<span class="string">&quot;,&quot;</span>);<span class="comment">//这个场合，strs = &#123;&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;&#125;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;aaa\bbb\ccc&quot;</span>;</span><br><span class="line">String[] strs2 = str2.split(<span class="string">&quot;\\&quot;</span>);<span class="comment">//&quot;\&quot; 是特殊字符，需要转义为 &quot;\\&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toCharArray()</code>：转换成字符数组</p></li><li><p><code>format(String format, Object... args)</code>：（静态方法）格式字符串</p><ol><li>%s , %d , %.2f %c 称为占位符</li><li>这些占位符由后面变量来替换</li><li>%s 表示后面由字符串来替换</li><li>%d 是整数来替换</li><li>%.2f 表示使用小数来替换，只会保留小数点两位, 并且进行四舍五入的处理</li><li>%c 使用char 类型来替换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Cloris&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">19</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> <span class="string">&quot;dream&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">formatStr</span> <span class="operator">=</span> <span class="string">&quot;I am %s, I am %d old, I am a %s&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.format(formatStr, name, age, state);</span><br></pre></td></tr></table></figure><p>​</p><p>​</p></li></ul><h2 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h2><ul><li><p><code>java.lang.StringBuffer</code> 代表可变的字符序列。可以对字符串内容进行增删。</p><p>很多方法和 <code>String</code> 相同，但 <code>StringBuffer</code> 是可变长度。同时，<code>StringBuffer</code> 是一个容器</p><ol><li><code>StringBuffer</code> 的直接父类是 <code>AbstractStringBuffer</code></li><li><code>StringBuffer</code> 实现了 <code>Serialiazable</code>，对象可以串行化</li><li>在父类中，<code>AbstractStringBuffer</code> 有属性 <code>char[] value</code> 不是 <code>final</code>，该数组在<strong>堆中</strong>存放字符串内容</li><li><code>StringBuffer</code> 是一个 <code>final</code> 类，不能被继承</li></ol><p><strong>String 对比 StringBuffer</strong></p><ul><li><code>String</code> 保存字符串常量，其中的值不能更改。每次更新实际上是更改地址，效率较低</li><li><code>StringBuffer</code> 保存字符串变量，里面的值可以更改。每次更新是更新内容，不用每次更新地址（即不是每次创建新对象）。</li></ul></li></ul><h3 id="StringBuffer构造方法"><a href="#StringBuffer构造方法" class="headerlink" title="StringBuffer构造方法"></a>StringBuffer构造方法</h3><ol><li><p>无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">strb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></table></figure><p>创造一个 16 位容量的空 <code>StringBuffer</code></p></li><li><p>传入字符串构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcabc&quot;</span>;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">strb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str1);</span><br></pre></td></tr></table></figure><p>创造一个 str1.length + 16 容量的 <code>StringBuffer</code></p></li><li><p>指定容量构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">strb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>创造一个 3 容量的空 <code>StringBuffer</code></p></li></ol><h3 id="String和StringBuffer的转换"><a href="#String和StringBuffer的转换" class="headerlink" title="String和StringBuffer的转换"></a>String和StringBuffer的转换</h3><ul><li><p>String —&gt; StringBuffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//法一：使用构造器</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"><span class="comment">//法二：使用append方法</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">stringBuffer2 = stringBuffer2.append(str);</span><br></pre></td></tr></table></figure></li><li><p>StringBuffer –&gt;String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="comment">//法一：使用StringBuffer提供的toString方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> stringBuffer3.toString();</span><br><span class="line"><span class="comment">//法二：使用构造器</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stringBuffer3);</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="StringBuffer的常用方法"><a href="#StringBuffer的常用方法" class="headerlink" title="StringBuffer的常用方法"></a>StringBuffer的常用方法</h3><ul><li><p><code>append(char c)</code>：增加</p><p><code>append(String s)</code> 参数也能是字符串</p><p>特别的，<code>append(null);</code> 的场合，等同于 <code>append(&quot;null&quot;);</code></p></li><li><p><code>delete(start, end)</code>：删减 [start, end) 的内容</p></li><li><p><code>replace(start, end, string)</code>：将 [start , end) 间的内容替换为 string</p></li><li><p><code>indexOf(string)</code>：查找指定字符串第一次出现时的索引。没找到的场合返回 -1</p></li><li><p><code>insert(index,string)</code>：在指定索引位置之前插入指定字符串</p></li><li><p><code>length()</code>：返回字符长度</p><p><code>capacity()</code>：返回当前的容量</p><p>String 类对象分配内存时，按照对象中所含字符个数等量分配。</p><p>StringBuffer 类对象分配内存时，除去字符所占空间外，会另加 16 字符大小的缓冲区。</p><p>对于 <code>length()</code> 方法，返回的是字符串长度。对于 <code>capacity()</code> 方法，返回的是 字符串 + 缓冲区 的大小。</p></li></ul><h2 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h2><ul><li>一个可变的字符序列。此类提供一个与 <code>StringBuffer</code> 兼容的 API，但不保证同步（有线程安全问题）。该类被设计成 <code>StringBuffer</code> 的一个简易替换，<strong>用在字符串缓冲区被单个线程使用的时候</strong>。如果可能，建议优先使用该类。因为在大多数实现中，它比起 <code>StringBuffer</code> 要快。</li><li>在 <code>StringBuilder</code> 是的主要操作是 <code>append</code> 和 <code>insert</code> 方法。可以重载这些方法，以接受任意类型的数据。</li></ul><ol><li><code>StringBuilder</code> 也继承了 <code>AbstractStringBuffer</code></li><li><code>StringBuilder</code> 也实现了 <code>Serialiazable</code>，对象可以串行化（网络传输，保存到文件）</li><li>仍然是在父类中有属性 <code>char[] value</code> ，而且不是 <code>final</code></li><li><code>StringBuilder</code> 也是一个 <code>final</code> 类，不能被继承</li><li><code>StringBuilder</code> 的方法，没有做互斥的处理（没有 <code>synchronize</code>），故而存在线程安全问题</li></ol><h3 id="String、StringBuffer和StringBuilder的比较"><a href="#String、StringBuffer和StringBuilder的比较" class="headerlink" title="String、StringBuffer和StringBuilder的比较"></a>String、StringBuffer和StringBuilder的比较</h3><ol><li><p><code>StringBuilder</code> 和 <code>StringBuffer</code> 类似，均代表可变字符序列，而且方法也一样</p></li><li><p><code>String</code>：不可变字符序列，效率低，但复用率高</p></li><li><p><code>StringBuffer</code>：可变字符序列，效率较高（增删），线程安全</p></li><li><p><code>StringBuilder</code>：可变字符序列，效率最高，存在线程安全问题</p></li><li><p>String的使用注意说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;aa&quot;</span>;<span class="comment">//创建了一个字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; <span class="number">100</span>; n++)&#123;</span><br><span class="line">str1 += <span class="string">&quot;bb&quot;</span>;<span class="comment">//这里，原先的字符串被丢弃，创建新字符串</span></span><br><span class="line">&#125;<span class="comment">//多次执行后，大量副本字符串留在内存中</span></span><br><span class="line"><span class="comment">//导致效率降低，也会影响程序性能</span></span><br></pre></td></tr></table></figure><p><code>String</code> 大量修改的场合，不要使用 <code>String</code></p></li></ol><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><ul><li><p><code>Math.abs(n)</code>：求绝对值，返回 |n1|</p></li><li><p><code>Math.pow(n, i)</code>：求幂，返回 n3 ^ i</p></li><li><p><code>Math.ceil(n)</code>：向上取整，返回 &gt;&#x3D; n3 的最小整数（转成double）</p></li><li><p><code>Math.floor(n)</code>：向下取整，返回 &lt;&#x3D;n4 的最小整数（转成double）</p></li><li><p><code>Math.round(n)</code>：四舍五入，相当于 <code>Math.floor(n5 + 0.5)</code></p></li><li><p><code>Math.sqrt(n)</code>：求开方。负数的场合，返回 <code>NaN</code></p></li><li><p><code>Math.random()</code>：返回一个 [0, 1) 区间的随机小数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个[a,b)区间的随机小数</span></span><br><span class="line"><span class="type">double</span> <span class="variable">randomValue</span> <span class="operator">=</span> a + (b - a) * Math.random();</span><br></pre></td></tr></table></figure></li><li><p><code>Math.max()</code> <code>Math.min()</code>返回最大值和最小值</p><p>​</p></li></ul><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul><li><p><code>Arrays.toString()</code>：返回数组的字符串形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">33</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Array.toString(nums);<span class="comment">//此时，str = &quot;[0, 1, 33]&quot;</span></span><br></pre></td></tr></table></figure><p>输入为 null 时返回 “null”</p></li><li><p><code>Arrays.sort(arr)</code>：排序（也可以直接使用冒泡排序）</p><p>因为数组是引用类型，使用 sort 排序后，会直接影响到实参。</p><p>默认（自然排序）从小到大排序。</p><p><code>Arrays.sort(arr, Comparator c)</code>：按照传入的<strong>实现Comparator接口的匿名内部类</strong>的决定排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySortCus</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; </span><br><span class="line">        <span class="comment">// 使用 Integer 而不是 int，因为 Comparator 接口适用于对象，不适用于基本数据类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用自定义比较器进行降序排序</span></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> (Integer) o1; <span class="comment">// 向下转型，以便使用Integer类的减法操作</span></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> (Integer) o2; <span class="comment">// 向下转型</span></span><br><span class="line">                <span class="keyword">return</span> i2 - i1; <span class="comment">// 正负影响排序方式，此处是降序排序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出排序后的数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码解释：</p><ol><li>当<code>Arrays.sort</code>方法执行时，它会遍历数组<code>arr</code>中的元素，并多次调用比较器实例的<code>compare</code>方法来比较数组中的元素。</li><li><code>Arrays.sort</code>方法会接收数组<code>arr</code>中的两个元素作为实参，并传递给比较器的<code>compare</code>方法。</li></ol></li></ul><h3 id="Arrays其它方法"><a href="#Arrays其它方法" class="headerlink" title="Arrays其它方法"></a>Arrays其它方法</h3><ul><li><p><code>Arrays.binarySearch(array, num)</code>：通过二分搜索法查找。前提是必须先排序。</p><p>找不到的场合，返回 - (low + 1)。即，其应该在的位置的负值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] nums2 = &#123;-<span class="number">10</span>, -<span class="number">5</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(nums2, <span class="number">7</span>);<span class="comment">// 此时 index = -7</span></span><br><span class="line"><span class="comment">// 如果 7 存在，应该在第 7 个位置</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>Arrays.copyOf(arr, n)</code>：从 <code>arr</code> 中，复制 n 个元素（成为新的数组）。</p><p>n &gt; arr.length 的场合，在多余的位置添加 <code>null</code>。n &lt; 0 的场合，抛出异常。</p><p>该方法的底层使用的是 <code>System.arraycopy</code></p></li><li><p><code>Arrays.fill(arr, o)</code>：用 o 填充 <code>num</code> 的所有元素。</p></li><li><p><code>Arrays.equals(arr1, arr2)</code>：比较两个数组元素是否完全一致（<code>true</code>&#x2F;<code>false</code>）</p></li><li><p><code>Arrays.asList(a, b, c, d)</code>：将输入数据转成一个 <code>List</code> 集合</p><p>返回的编译类型是 List（接口），运行类型是Arrays.ArrayList（Arrays类的静态内部类）</p></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExercise</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Book[] books = <span class="keyword">new</span> <span class="title class_">Book</span>[<span class="number">4</span>];</span><br><span class="line">books[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="number">100</span>);</span><br><span class="line">books[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;金瓶梅新&quot;</span>, <span class="number">90</span>);</span><br><span class="line">books[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;青年文摘20 年&quot;</span>, <span class="number">5</span>);</span><br><span class="line">books[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;java 从入门到放弃~&quot;</span>, <span class="number">300</span>);</span><br><span class="line">Arrays.sort(books, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"><span class="comment">//这里是对Book 数组排序，因此o1 和o2 就是Book 对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> (Book) o1;</span><br><span class="line"><span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> (Book) o2;</span><br><span class="line"><span class="type">double</span> <span class="variable">priceVal</span> <span class="operator">=</span> book2.getPrice() - book1.getPrice();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(priceVal &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//或者-1，则从小到大</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(priceVal &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//或者1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//按照书名长度从大到小</span></span><br><span class="line"><span class="comment">//续上，只需改double priceVal = book2.getPrice() - book1.getPrice();为</span></span><br><span class="line"><span class="keyword">return</span> book2.getName().length() - book1.getName().length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><ul><li><p><code>System.exit(0)</code>：退出当前程序。0 表示一个状态，正常状态是 0</p></li><li><p><code>System.arraycopy(arr, 0, newArr, 0 ,3)</code>：复制数组元素。</p><p>上例是：arr 自下标 0 起开始，向 newArr 自下标 0 开始，依次拷贝 3 个值</p><p>这个方法比较适合底层调用。我们一般使用 <code>Arrays.copyOf</code> 来做</p></li><li><p><code>System.currentTimeMillis</code>：返回当前时间距离 1970 - 1 - 1 的毫秒数</p></li><li><p><code>System.gc</code>：运行垃圾回收机制</p></li><li><p><code>BigInteger</code>：需要处理大整数且超过long范围时使用</p><p><code>BigInteger bigInteger = new BigInteger(&quot;10000000000000000000000000000&quot;);</code></p><p>进行加减乘除时需要使用对应的方法，可另创建BigInteger再操作</p></li></ul><h2 id="BigInteger-和-BigDecimal类"><a href="#BigInteger-和-BigDecimal类" class="headerlink" title="BigInteger 和 BigDecimal类"></a>BigInteger 和 BigDecimal类</h2><h3 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h3><ul><li><p>需要处理大整数且超过long范围时使用</p><p><code>BigInteger bigInteger = new BigInteger(&quot;10000000000000000000000000000&quot;);</code>，通过字符串构建</p><p>进行加减乘除时需要使用对应的方法，可另创建BigInteger再操作</p></li></ul><ul><li><p><code>BigInteger add(bigInteger)</code>：加法运算。返回新的大数</p></li><li><p><code>BigInteger subtract(bigInteger)</code>：减法</p></li><li><p><code>BigInteger multiply(bigInteger)</code>：乘法</p></li><li><p><code>BigInteger divide(bigInteger)</code>：除法运算</p></li><li><p>一些常量：</p><p><code>BigInteger.ONE</code>、<code>BigInteger.ZERO</code>、<code>BigInteger.TEN</code> 分别是 1、0、10</p></li></ul><h3 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h3><ul><li><p>适合保存精度更大的浮点数</p><p>构造方法及其常用方法类似BigInteger</p></li><li><p><code>divide()</code>该方法可能抛出异常。因为可能产生是无限长度小数。</p><p>解决方法（保留分子精度）：<code>bigDecimal.divide(bigDecimal, BigDecimal.ROUND_CELLING)</code></p><p>结果保留原分子精度</p></li></ul><h2 id="Date日期类、Calendar日历类及新的日期"><a href="#Date日期类、Calendar日历类及新的日期" class="headerlink" title="Date日期类、Calendar日历类及新的日期"></a>Date日期类、Calendar日历类及新的日期</h2><h3 id="第一代日期类"><a href="#第一代日期类" class="headerlink" title="第一代日期类"></a>第一代日期类</h3><ul><li><p>Date：精确到毫秒，代表特定瞬间。类在 java.util包，有默认的日期格式，需要转换格式</p></li><li><p>SimpleDateFormat：格式和解析日期的类。允许进行格式化（日期–》文本）、解析（文本–》日期）和规范化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>)</span><br><span class="line"><span class="comment">//格式使用的字母是规定好的</span></span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(d1);<span class="comment">// format:将日期转换成指定格式的字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前日期=&quot;</span> + format);</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/format.png" alt="orma"></p><ul><li><p><code>Date d1 = new Date();</code>：调用默认无参构造器，获取当前系统时间。</p><p>默认输出日期格式是国外的格式，因此通常需要进行格式转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy.MM.dd HH.mm.ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dateFormated</span> <span class="operator">=</span> sdf.(d1);<span class="comment">//日期转成指定格式。</span></span><br></pre></td></tr></table></figure></li><li><p>通过指定毫秒数转换对应时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">10000000000</span>);</span><br></pre></td></tr></table></figure></li><li><p>把一个格式化的字符串转成对应的 Date：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH点mm分 E&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">d3</span> <span class="operator">=</span> sdf2.parse(<span class="string">&quot;2024年09月17日 17点24分 星期二&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个场合，给定的字符串格式应和 <code>sdf2</code> 格式相同，否则会抛出异常</p></li></ul><h3 id="第二代日期类"><a href="#第二代日期类" class="headerlink" title="第二代日期类"></a>第二代日期类</h3><ul><li><p>Calendar：是一个抽象类，该类同样在java.util包，构造器是私有的，要通过 getInstance 方法获取实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">c1</span> <span class="operator">=</span> Calendar.genInstance();<span class="comment">//获取实例的方法</span></span><br></pre></td></tr></table></figure></li><li><p>提供大量方法和字段提供给程序员使用</p><ul><li><p><code>c1.get(Calendar.YEAR)</code>：获取年份数</p></li><li><p><code>c1.get(Calendar.MONTH)</code>：获取月份数</p><p>特别的，实际月份是 返回值 +1。因为 Calendar 的月份是从 0 开始编号的</p></li><li><p><code>c1.get(Calendar.DAY_OF_MONTH)</code>：获取日数</p></li><li><p><code>c1.get(Calendar.HOUR)</code>：获取小时数（12小时制）</p><p><code>c1.get(Calendar.HOUR_OF_DATE)</code>：获取小时数（24小时制）</p></li><li><p><code>c1.get(Calendar.MINUTE)</code>：获取分钟数</p></li><li><p><code>c1.get(Calendar.SECOND)</code>：获取秒数</p></li></ul><p>Calendar 没有专门的格式化方法，需要程序员自己组合来输出</p></li></ul><h3 id="第三代日期类"><a href="#第三代日期类" class="headerlink" title="第三代日期类"></a>第三代日期类</h3><ul><li>Calendar 存在不足：</li></ul><ol><li>可变性：像日期和实际这样的类应该是不可改变的</li><li>偏移性：年份都是从 1900 年开始，月份都是从 0 开始</li><li>格式化：只对 Date 有用，对 Calendar 没用</li><li>其他问题：如不能保证线程安全，不能处理闰秒（每隔 2 天多 1 秒）</li></ol><ul><li>在 JDK 8 加入了以下新日期类：<ul><li>LocalDate：只包含 日期（年月日），可以获取 日期字段</li><li>LocalTime：只包含 时间（时分秒），可以获取 时间字段</li><li>LocalDateTime：包含 日期 + 时间，可以获取 日期 + 时间字段</li><li>DateTimeFormatter：格式化日期</li><li>Instant：时间戳</li></ul></li></ul><h4 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h4><ol><li><p>使用 <code>now()</code> 方法返回当前时间的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();<span class="comment">//获取当前时间</span></span><br></pre></td></tr></table></figure></li><li><p>获取各字段方法：</p><ul><li><p><code>ldt.getYear();</code>：获取年份数</p></li><li><p><code>ldt.getMonth();</code>：获取月份数（英文）</p><p><code>ldt.getMonthValue();</code>：获取月份数（数字）</p></li><li><p><code>ldt.getDayOfMonth();</code>：获取日数</p></li><li><p><code>LocalDateTime ldt2 = ldt.plusDays(100);</code>：获取 ldt 时间 100 天后的时间实例</p></li><li><p><code>LocalDateTime ldt3 = ldt.minusHours(100);</code>：获取 ldt 时间 100 小时前的时间实例</p></li></ul></li><li><p>格式化日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTimeFormatter</span>(<span class="string">&quot;yyyy.MM.dd HH.mm.ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> dtf.format(ldt);<span class="comment">//获取格式化字符串</span></span><br></pre></td></tr></table></figure></li><li><p><code>Instant</code> 和 <code>Date</code> 类似</p><ul><li>获取当前时间戳：<code>Instant instant = Instant.now();</code></li><li>转换为 <code>Date</code>：<code>Date date = Date.form(instant);</code></li><li>由 <code>Date</code> 转换：<code>Instant instant = date.toInstant;</code></li></ul></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="String指定部分反转"><a href="#String指定部分反转" class="headerlink" title="String指定部分反转"></a>String指定部分反转</h3><ol><li>将字符串转换为数组</li><li>双指针分别从start和end相对行进，在前指针下标大于后指针之前，交换前后的内容</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start, j = end; i &lt; j; i++, j--)&#123;</span><br><span class="line">        temp = chars[i];</span><br><span class="line">        chars[i] = chars[j];</span><br><span class="line">        chars[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册处理"><a href="#注册处理" class="headerlink" title="注册处理"></a>注册处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="keyword">class</span> <span class="title class_">Homework02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;ti@i@sohu.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userRegister(name,pwd,email);</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜你，注册成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入用户名、密码、邮箱，如果信息录入正确，则提示注册成功，否则生成异常对象</span></span><br><span class="line"><span class="comment">     * 要求：</span></span><br><span class="line"><span class="comment">     * (1) 用户名长度为2或3或4</span></span><br><span class="line"><span class="comment">     * (2) 密码的长度为6，要求全是数字  isDigital</span></span><br><span class="line"><span class="comment">     * (3) 邮箱中包含@和.   并且@在.的前面</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路分析</span></span><br><span class="line"><span class="comment">     * (1) 先编写方法 userRegister(String name, String pwd, String email) &#123;&#125;</span></span><br><span class="line"><span class="comment">     * (2) 针对 输入的内容进行校核，如果发现有问题，就抛出异常，给出提示</span></span><br><span class="line"><span class="comment">     * (3) 单独的写一个方法，判断 密码是否全部是数字字符 boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">userRegister</span><span class="params">(String name, String pwd, String email)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再加入一些校验</span></span><br><span class="line">        <span class="keyword">if</span>(!(name != <span class="literal">null</span> &amp;&amp; pwd != <span class="literal">null</span> &amp;&amp; email != <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;参数不能为null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过关</span></span><br><span class="line">        <span class="comment">//第一关</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">userLength</span> <span class="operator">=</span> name.length();</span><br><span class="line">        <span class="keyword">if</span> (!(userLength &gt;= <span class="number">2</span> &amp;&amp; userLength &lt;= <span class="number">4</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名长度为2或3或4&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二关</span></span><br><span class="line">        <span class="keyword">if</span> (!(pwd.length() == <span class="number">6</span> &amp;&amp; isDigital(pwd))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;密码的长度为6，要求全是数字&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三关</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> email.indexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> email.indexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!(i &gt; <span class="number">0</span> &amp;&amp; j &gt; i)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;邮箱中包含@和.   并且@在.的前面&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单独的写一个方法，判断 密码是否全部是数字字符 boolean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDigital</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chars[i] &lt; <span class="string">&#x27;0&#x27;</span> || chars[i] &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·异常</title>
      <link href="/2024/09/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%BC%82%E5%B8%B8/"/>
      <url>/2024/09/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>在 Java 语言中，将程序执行中发生的不正常情况称为 “异常”（开发过程中的语法错误和逻辑错误不是异常）</p></li><li><p>这些 异常事件 可分为两类：</p><ul><li><p>Error（错误）：Java 虚拟机无法解决的严重问题。</p><p>如：JVM 系统内部错误，资源耗尽等严重情况。Error 是严重错误，程序会崩溃。</p></li><li><p>Exception：其他因编程错误或偶然的外部因素导致的一般性问题，可以使用针对性的代码进行处理。</p><p>如：空指针访问，试图读取不存在的文件，网络中断等等。</p><p>Exception 又分为两大类：</p><ul><li>运行时异常（程序运行时，发生的异常）</li><li>编译时异常（编程时，编译器检查出的异常）</li></ul></li></ul></li></ul><h2 id="异常体系图"><a href="#异常体系图" class="headerlink" title="异常体系图"></a>异常体系图</h2><p><img src="/img/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E5%9B%BE.jpg" alt="常体系"></p><ul><li>运行时异常编译器检查不出来，一般是编程时的逻辑错误，程序员应该避免</li><li>运行时异常可不作处理，因其普遍且可能影响可读性与运行效率</li><li>编译时异常是编译器要求必须处理的异常</li></ul><h2 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h2><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p><strong>空指针异常</strong>   NullPointerException</p><ul><li>当应用程序试图在需要对象的地方使用 null 时，抛出该异常。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length;<span class="comment">//这里，出现了 空指针异常</span></span><br></pre></td></tr></table></figure></blockquote><p>**数学运算异常 **   ArithmeticException</p><ul><li>当出现异常的运算条件时，抛出该异常。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span> / <span class="number">0</span>;<span class="comment">//这里，出现了 数学运算异常</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>数组下标越界异常</strong>   ArrayIndexOutOfBoundsException</p><ul><li>用非法索引（为负或超出范围）访问数组时，抛出该异常。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">nums[-<span class="number">50</span>] = <span class="number">100</span>;<span class="comment">//这里，出现了 数组下标越界异常</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>类型转换异常</strong>   ClassCastException</p><ul><li>当试图把对象强制转换为不是实例的子类时，抛出该异常。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A1</span>();</span><br><span class="line">        <span class="type">A2</span> <span class="variable">a1</span> <span class="operator">=</span> (A2)a1;<span class="comment">//这里，出现了 类型转换异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>数字格式不正确异常</strong>   NumberFormatException</p><ul><li>当应用程序试图将字符串转成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);<span class="comment">//这里，出现了 数字格式不正确异常</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="编译异常"><a href="#编译异常" class="headerlink" title="编译异常"></a>编译异常</h3><ul><li>SQLException：操作数据库时，查询表可能发生异常</li><li>IOException：操作文件时，发生的异常</li><li>FileNotFoundException：操作一个不存在的文件时，发生的异常</li><li>ClassNotFoundException：加载类，而该类不存在时，发生的异常</li><li>EOFException：操作文件，到文档末尾，发生的异常</li><li>IllegalArguementException：参数异常</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li>异常发生时，对异常的处理方式。如果没有显式异常处理，默认处理方式是 <code>throws</code><ul><li><code>try - catch - finally</code>：程序员在代码中捕获发生的异常，自行处理</li><li><code>throws</code>：将发生的异常抛出，交给调用者（方法）来处理。最顶级的处理者就是 JVM</li></ul></li></ul><h3 id="try-catch异常处理"><a href="#try-catch异常处理" class="headerlink" title="try-catch异常处理"></a>try-catch异常处理</h3><ul><li>快捷键：选中代码按Ctrl+Alt+T</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//可疑代码</span></span><br><span class="line"><span class="comment">//将异常生成对应的异常对象，传递给 catch 块</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="comment">//如果发生异常，执行这些代码</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//无论是否异常，都执行这些代码</span></span><br><span class="line">    <span class="comment">//finally 块可以不写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ol><li><p>如果异常发生了，则异常发生后面的代码块都不执行，直接进入 catch 块</p></li><li><p>如果异常未发生，则顺序执行 try 代码块，catch 块不执行</p></li><li><p>如果希望不管是否异常，都执行一些代码，则使用 finally</p></li><li><p>可以有多个 catch 捕获不同的异常。要求 子类异常在前，父类异常在后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以进行 try - finally 配合使用（不写 catch）。这种用法相当于没有捕获异常，此时程序如果出错会直接退出。</p><p>应用场景，就是写一段代码，不管是否发生异常，都必须执行某个业务逻辑。</p></li><li><p>如果没有出现异常，执行 try 中所有语句，不执行 catch 语句，最后执行 finally 语句。</p></li><li><p>如果出现异常，则 try 块异常发生后，剩余语句不执行。之后执行 catch 语句，最后，执行 finally 语句。</p></li></ol><h3 id="throws异常处理"><a href="#throws异常处理" class="headerlink" title="throws异常处理"></a>throws异常处理</h3><ul><li>如果一个方法可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显式地声明抛出异常，表明该方法将不对这些异常进行处理，而由调用者负责处理</li><li>在方法中声明 <code>throws</code> 语句可以声明抛出异常的列表。<code>throws</code> 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">metord</span><span class="params">()</span> <span class="keyword">throws</span> FileNontFoundException ,NullPointerException &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h4><ol><li><p>对于 <strong>编译异常</strong>，程序中必须处理。</p></li><li><p>对于 <strong>运行异常</strong>，程序中诺没有处理，默认处理是 <code>throws</code></p></li><li><p>子类 重写 父类方法时，子类方法抛出的异常类型必须和父类一致，或者是父类抛出异常类型的子类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException &#123;<span class="comment">//父类型异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException &#123;<span class="comment">//子类型异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果有 <code>try - catch</code> 就不必 <code>throws</code> 了</p></li></ol><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li>当程序中出现了某些 “错误”，但该信息并未在 <code>Throwable</code> 子类中描述处理，这时候可以自己设计异常类，用于描述该错误信息</li></ul><ol><li>定义类：自定义异常类名，继承 RuntimeException 或 Exception</li><li>如果继承 Exception，属于 编译异常。</li><li>如果继承 RuntimeException，属于 运行异常。（一般来说，选这个。这样利用了默认处理机制，更方便）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="comment">/*throws AgeException*/</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">180</span>;</span><br><span class="line">        <span class="comment">//要求范围在18 – 120 之间，否则抛出一个自定义异常</span></span><br><span class="line">        <span class="keyword">if</span>(!(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>)) &#123;</span><br><span class="line">            <span class="comment">//这里我们可以通过构造器，设置信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄需要在18~120 之间&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的年龄范围正确.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写异常时，先确定正确的情况，然后取反。</li></ul><h2 id="throw-和throws-的区别"><a href="#throw-和throws-的区别" class="headerlink" title="throw 和throws 的区别"></a>throw 和throws 的区别</h2><table><thead><tr><th>意义</th><th>位置</th><th>后面跟的东西</th><th></th></tr></thead><tbody><tr><td><code>throws</code></td><td>异常处理的一种方式</td><td>方法声明时</td><td>异常类型</td></tr><tr><td><code>throw</code></td><td>手动生成异常对象关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·枚举，注解</title>
      <link href="/2024/09/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%9E%9A%E4%B8%BE%EF%BC%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>/2024/09/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%9E%9A%E4%B8%BE%EF%BC%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>枚举类（enumeration）：一种特殊的类，里面只包含一组有限且特定的对象</li><li>实现方法：<ol><li>自定义枚举</li><li><code>enum</code> 关键字枚举</li></ol></li></ul><h3 id="自定义枚举"><a href="#自定义枚举" class="headerlink" title="自定义枚举"></a>自定义枚举</h3><ol><li><p>构造器私有化，防止用户直接构造</p></li><li><p>去掉set方法，可保留get，防止属性被修改</p></li><li><p>在类内部创建对外暴露的固定对象：使用<code>public</code>  、<code>final</code>与<code>static</code>修饰，对象名全大写</p></li><li><p>枚举对象根据需要，也可以有多个属性</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//描述</span></span><br><span class="line">    <span class="comment">//定义了四个对象, 固定.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum关键字枚举"><a href="#enum关键字枚举" class="headerlink" title="enum关键字枚举"></a>enum关键字枚举</h3><ol><li>使用关键字enum替代class</li><li>对象名（实参列表）</li><li>多个对象用逗号间隔</li><li>注意将定义的常量对象写在最前面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Season2</span> &#123;<span class="comment">//类</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>), WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>), </span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>),SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season2</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ul><li>当我们使用enum 关键字开发一个枚举类时，默认会继承Enum 类, 而且是一个final 类</li><li>类使用enum 关键字后，就不能再继承其它类，因为Java是单继承机制</li><li>但枚举类与普通类一样可以实现接口implements</li><li>传统的语句简化成对象名(实参列表)，要清楚调用的是哪个构造器</li><li>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略</li></ul><h4 id="enum常用方法"><a href="#enum常用方法" class="headerlink" title="enum常用方法"></a>enum常用方法</h4><ul><li><p><code>name</code>:得到当前枚举常量的名称，如<code>autumn.name()</code>，建议优先使用<code>toString</code></p></li><li><p><code>ordinal</code>：输出该枚举对象的次序&#x2F;编号（从 0 开始编号。如上例<code>autumn.ordinal() = 2</code></p></li><li><p><code>values</code>：返回一个数组 <code>Season2[]</code>，其中包含定义的所有枚举对象</p></li><li><p><code>valueOf</code>：将字符串转换成枚举对象。要求字符串必须是已有的常量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Season2</span> <span class="variable">autumn1</span> <span class="operator">=</span> Season2.valueOf(<span class="string">&quot;AUTUMN&quot;</span>);</span><br><span class="line"><span class="comment">//autumn1与其它AUTUMN的对象是同一对象，autumn1输出Season&#123;name=&#x27;秋天&#x27;,desc=&#x27;凉爽&#x27;&#125;</span></span><br></pre></td></tr></table></figure><ol><li>根据输入的字符串到类的枚举对象查找</li><li>找到就返回，没有就报错</li></ol></li><li><p><code>compareTo</code>：比较两个枚举常量的编号（调用常量编号 减去 传入常量编号）输出差值</p></li><li><p><code>toString</code>：若未改写，返回枚举常量名称name</p></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li>注解（Annotation）也被称为元数据（Metadata）。用于修饰 包、类、方法、属性、构造器、局部变量 等数据信息</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li><li>在 JavaSE 中，注解的使用目的比较简单，例如 标记过时的功能，忽略警告 等。在 JavaEE 中注解占据了更重要的角色，例如用于配置应用程序的任何切面，代替 JavaEE 旧版中所遗留的繁冗代码和 XML 配置等。<ol><li>使用 <code>@Annotation</code> 时要在前面增加 <code>@</code> 符号，并把该注解当成一个修饰符使用。用于修饰它支持的程序元素。</li><li>三个基本的@Annotation：<ul><li><code>@Override</code>：限定某个方法，是 重写 父类方法。该注解只能用于方法。如果你写了该注解，编译器会替你校验，看看是不是真的 重写 了父类方法。</li><li><code>@Deprecated</code>：用于表示某个程序元素（类、方法等）已经过时</li><li><code>@SuppressWarnings()</code>：抑制编辑器警告</li></ul></li><li>如果发现 <code>public @interface XXX&#123;&#125;</code> 这种东西，说明是定义了一个注解类 <code>XXX</code>。这里的 <code>@interface</code> 不代表接口（<code>interface</code>）。</li></ol></li></ul><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><ol><li><code>@Override</code> 表示指定重写父类的方法（从编译器层面验证），如果父类没有该方法，就报错</li><li>不写该注解，重写依然构成重写</li><li><code>@Override</code> 只能修饰方法，不能修饰其他 类、包、属性等</li><li>查看 <code>@Override</code> 注解源码为 <code>@Target(ElementType.METHOD)</code> 说明只能修饰方法</li><li><code>@Target</code> 是修饰注解的注解，称为 元注解</li></ol><h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h3><ol><li><p><code>@Deprecated</code> 表示指定的某个程序元素（类、方法等）已过时</p></li><li><p>该元素不推荐使用，但仍能使用</p></li><li><p>可以修饰方法、类、字段、包、参数</p><p><code>@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</code></p></li><li><p><code>@Deprecated</code> 可以做到新旧版本的兼容和过度</p></li></ol><h3 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings()"></a>@SuppressWarnings()</h3><ol><li><p>当我们不想看到警告信息时，用 <code>@SuppressWarnings()</code></p><p>语法：<code>@SuppressWarnings(&#123;&quot;...&quot;&#125;)</code></p><p>在后面 <code>(&#123;&quot;unused&quot;, &quot;unchecked&quot;&#125;)</code> 这样写入你希望抑制的信息</p><table><thead><tr><th><strong>关键字</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>all</td><td>抑制所有警告</td></tr><tr><td>boxing</td><td>抑制与装箱&#x2F;解装箱操作相关的警告</td></tr><tr><td>cast</td><td>抑制与强制转换操作相关的警告</td></tr><tr><td>dep-ann</td><td>抑制与已弃用注释相关的警告</td></tr><tr><td>deprecation</td><td>抑制与弃用有关的警告</td></tr><tr><td>fallthrough</td><td>抑制与 switch 语句中丢失断点相关的警告</td></tr><tr><td>finally</td><td>抑制不返回的 finally 块的相关警告</td></tr><tr><td>hiding</td><td>抑制与隐藏变量的局部变量相关的警告</td></tr><tr><td>incomplete-switch</td><td>抑制与 switch 语句中缺少条目相关的警告（enum）</td></tr><tr><td>nls</td><td>抑制与 非nls 字符串字面值相关的警告</td></tr><tr><td>null</td><td>抑制相对于null分析的警告</td></tr><tr><td>rawtypes</td><td>在类参数上使用泛型时，抑制与非特定类型相关的警告</td></tr><tr><td>restriction</td><td>抑制与不推荐或禁止引用有关的警告</td></tr><tr><td>serial</td><td>抑制与可序列化类缺少serialVersionUID字段相关的警告</td></tr><tr><td>static-access</td><td>抑制与不正确的静态访问有关的警告</td></tr><tr><td>synthetic-access</td><td>抑制与未优化的内部类访问相关的警告</td></tr><tr><td>unchecked</td><td>抑制与未检查的操作相关的警告</td></tr><tr><td>unqualified-field-access</td><td>抑制与字段访问不合格相关的警告</td></tr><tr><td>unused</td><td>抑制与未使用代码相关的警告</td></tr></tbody></table></li><li><p>作用范围与你放置的位置相关</p></li></ol><h3 id="JDK-的元注解（了解）"><a href="#JDK-的元注解（了解）" class="headerlink" title="JDK 的元注解（了解）"></a>JDK 的元注解（了解）</h3><ul><li>用于修饰其他注解的注解</li></ul><ol><li><p><code>@Rentention</code>：指定注解的作用范围，有三种范围 <code>SOURCE</code> <code>CLASS</code> <code>RUNTIME</code></p><p><code>@Rentention</code> 的三种值：</p><ul><li><code>RententionPolicy.SOURCE</code>：编译器使用后，直接丢弃这种策略的注释</li><li><code>RententionPolicy.CLASS</code>：编译器把注解记录在 class 文件中。当运行 Java 程序时， JVM 不会保留注释。这是默认值</li><li><code>RententionPolicy.RUNTIME</code>：编译器把注解记录在 class 文件中。当运行 Java 程序时，JVM 会保留注解。程序可以通过反射获取该注解</li></ul></li><li><p><code>@Target</code>：指定注解的使用范围</p><p><code>@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</code></p></li><li><p><code>@Documented</code>：指定该注解会不会在 Javadoc 体现</p></li><li><p><code>@Inherited</code>：子类会继承父类注解</p></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统</span></span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>； i &lt; nums.length; i++) &#123;</span><br><span class="line">    System.out.println(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增强,两种作用一样</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i: nums) &#123;<span class="comment">//每次取一个元素赋给i，取完退出</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·面向对象编程（高级）</title>
      <link href="/2024/09/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/"/>
      <url>/2024/09/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><ul><li><p>类变量：也叫 静态变量&#x2F;静态属性。是该类所有对象共享的变量。任何一个该类对象访问时都是相同的值，任何一个该类对象修改时也是同一个变量。</p></li><li><p>语法（推荐）：<code>访问修饰符 static 数据类型 变量名;</code></p><p>或者：<code>static 访问修饰符 数据类型 变量名;</code></p></li><li><p>访问类变量：<code>类名.类变量名;</code> 或 <code>对象名.类变量名;</code> ，但 Java 设计者推荐我们用 <code>类名.类变量名;</code> 来访问。（需满足访问权限和范围）</p></li></ul><h3 id="类变量内存刨析"><a href="#类变量内存刨析" class="headerlink" title="类变量内存刨析"></a>类变量内存刨析</h3><ul><li>根据 JDK 版本的不同，类变量存放在 堆 中或 方法区 中</li><li>在方法区加载类后会在堆中生成对应的包含类变量的class对象</li><li>对象空间会指向类变量</li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>什么时候需要用类变量：</p><p>当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量（静态变量）</p></li><li><p>类变量 与 实例变量（普通属性）的区别：</p><p>类变量 是该类所有对象共享的，而 实例变量 是每个对象独享的</p></li><li><p>加上 <code>static</code> 称为 类变量 或 静态变量。否则称为 实例变量&#x2F;普通成员变量&#x2F;非静态变量</p></li><li><p>类变量 是在加载类时就初始化了。所以，没有创建对象实例也能访问。</p></li><li><p>类变量 的生命周期是随着 类的加载 开始，随着 类的消亡 而销毁。</p></li></ol><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><ul><li>方法使用 <code>static</code> 修饰后，就是 静态方法。</li><li>静态方法就能访问静态属性。如果我们希望不创建实例，也能调用方法，这个场合把方法做成静态方法是合适的，开发工具类时就可以如此做。</li></ul><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在 方法区。</li><li>类方法中不允许使用和对象有关的关键字。所以，类方法没有 <code>this</code> 或 <code>super</code></li><li>类方法可以通过类名调用，也能通过对象名调用。普通方法不能通过类名调用。</li><li>类方法 中只能访问 类变量 或 类方法</li><li>普通方法既可以访问普通方法也可以访问类方法</li></ol><h2 id="main方法语法"><a href="#main方法语法" class="headerlink" title="main方法语法"></a>main方法语法</h2><ul><li><code>public static void main(String[] args)&#123;...&#125;</code></li></ul><ol><li><p><code>main</code> 方法 是 JVM 调用的方法，不在同一类。所以该方法的 访问权限 必须为 <code>public</code></p></li><li><p>JVM 在执行 <code>main</code> 方法时不必创建对象，所以 <code>main</code>方法 必须为 <code>static</code></p></li><li><p>该方法接收 <code>String</code> 类型的数组参数。该数组中保存<strong>执行 Java 命令 时</strong>传递给所运行的类的参数。</p><blockquote><p>工作台中：<code>javac 执行的程序.java</code></p><p> <code>java 执行的程序 参数1(arg[0]) 参数2(arg[1]) 参数3(arg[2]) ..</code></p></blockquote></li><li><p>在 <code>main</code> 方法 中，我们可以直接调用 <code>main</code> 方法 所在类的静态方法或静态属性。</p><p>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例后才能通过该实例访问非静态成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main01</span> &#123;</span><br><span class="line">    <span class="comment">//静态的变量/属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;韩顺平教育&quot;</span>;</span><br><span class="line">    <span class="comment">//非静态的变量/属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Main01 的hi 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//非静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Main01 的cry 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 静态方法main 可以访问本类的静态成员</span></span><br><span class="line">    System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">    hi();</span><br><span class="line">    <span class="comment">//2. 静态方法main 不可以访问本类的非静态成员</span></span><br><span class="line">    <span class="comment">//System.out.println(&quot;n1=&quot; + n1);//错误</span></span><br><span class="line">    <span class="comment">//cry();</span></span><br><span class="line">    <span class="comment">//3. 静态方法main 要访问本类的非静态成员，需要先创建对象, 再调用即可</span></span><br><span class="line">    <span class="type">Main01</span> <span class="variable">main01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main01</span>();</span><br><span class="line">    System.out.println(main01.n1);<span class="comment">//ok</span></span><br><span class="line">    main01.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li>又称为 初始化块。属于类中的成员。类似于方法，将逻辑语句封装在方法体中，通过 <code>&#123; &#125;</code> 包围起来</li><li>和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类 显式调用，而是加载类时，或创建对象时 隐式调用。</li><li>语法：<code>[修饰符]&#123;代码&#125;;</code></li></ul><h3 id="说明注意"><a href="#说明注意" class="headerlink" title="说明注意"></a>说明注意</h3><ol><li>修饰符 是可选项，可不写。要写的话，只能写 <code>static</code></li><li>代码块分为两类：<ul><li>静态代码块：有 <code>static</code></li><li>普通代码块：无 <code>static</code></li></ul></li><li>逻辑语句可以为任意的逻辑语句（输入、输出、方法调用、循环、判断等）</li><li><code>;</code> 可以写，也可以省略。建议写上。</li><li>代码块相当于另一种形式的构造器（构造器的补充机制），可以做初始化操作</li><li>如果多个构造器中都有重复语句，就可以抽取到初始化块中，提高代码复用率。这样，不管用哪个构造器，都会执行代码块。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Movie</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String director;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(1) 下面的三个构造器都有相同的语句</span></span><br><span class="line">    <span class="comment">//(2) 这样代码看起来比较冗余</span></span><br><span class="line">    <span class="comment">//(3) 这时我们可以把相同的语句，放入到一个代码块中，即可</span></span><br><span class="line">    <span class="comment">//(4) 这样当我们不管调用哪个构造器，创建对象，都会先调用代码块的内容</span></span><br><span class="line">    <span class="comment">//(5) 代码块调用的顺序优先于构造器..</span></span><br><span class="line">    &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;电影屏幕打开...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;广告开始...&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;电影正式开始...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Movie(String name) 被调用...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String name, <span class="type">double</span> price, String director)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Movie(String name, double price, String director) 被调用...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li><p><code>static</code> 代码块：也叫<strong>静态</strong>代码块，作用是对类进行初始化。<strong>随着 类的加载 会且只会执行一次</strong>。相对的：普通代码块每创建一个对象就执行一次。</p></li><li><p>**类什么时候被加载？ **</p><ul><li>创建对象实例时（new）</li><li>创建子类对象实例，父类也会加载</li><li>使用类的静态成员时（父类也会加载），JVM会检查这个类是否已经被加载。如果还没有，JVM会加载这个类。同样，如果静态成员所在的类有父类，那么父类也会被加载。</li></ul><p>以上情况下类会被加载。加载后不需要再次加载，所以，静态代码块也只会执行<strong>一次</strong>。</p></li><li><p><strong>普通</strong>的代码块只在<strong>创建对象实例</strong>时会被隐式地调用，创建一次调用一次。</p><p>如果只是使用类地静态成员，静态代码块会执行，普通代码块不会执行。</p></li><li><p>创建一个对象时，在 <strong>一个类里</strong> 调用顺序是：</p></li></ol><ul><li><p>调用静态代码块 和 静态属性初始化：这两者优先级相同，多个存在时按照定义的顺序依次执行。</p></li><li><p>调用普通代码块 和 普通属性初始化：这两者优先级也相同。</p></li><li><p>调用构造器。</p><p><code>private static int n1 = getVal();</code> 就是静态变量初始化</p></li></ul><ol start="5"><li><p><code>构造器</code> 的最前面其实隐含了 <code>super();</code> 和 <code>调用普通代码块</code>。而静态相关的代码块，属性初始化，在类加载时就执行完毕了。</p><p>这样，创建一个对象时，在 <strong>有继承关系的多个类里</strong> 调用顺序是：</p></li></ol><ul><li><p>父类 静态代码块 和 静态初始化</p></li><li><p>子类 静态代码块 和 静态初始化</p><p><strong>（因为静态与类加载相关，先加载类，再创建对象，然后从子类构造器开始）</strong></p><p><strong>（又隐藏的super()上溯到父类无参，然后是调用普通代码块，接着父类构造器本身）</strong></p></li><li><p>父类 普通代码块 和 普通初始化</p></li><li><p>父类 构造器</p><p><strong>（隐藏子类super()执行完调用普通代码块，最后是子类构造器本身）</strong></p></li><li><p>子类 普通代码块 和 普通初始化</p></li><li><p>子类 构造器</p></li></ul><ol start="6"><li>静态代码块 只能调用 静态成员。普通代码块 能调用 任意成员。</li></ol><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><ul><li>什么是设计模式：设计模式是在大量的实践中总结和理论化后优选的代码结构、编程风格、解决问题的思考方式。设计模式就像是经典的棋谱，免去我们自己再思考和摸索。</li><li>单例设计模式：采取一定的方法，保证再整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</li></ul><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>还未使用对象时，加载类信息时已经自行创建，可能造成资源浪费</p><p>步骤如下：</p><ol><li>构造器私有化（防止用户直接 new，保证只能创建一个对象）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;Mary&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;構造器被調用.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>等到需要使用对象时，再进行创建，但存在线程安全问题</p><p>步骤如下：</p><ol><li>构造器私有化</li><li>定义一个静态属性对象</li><li>提供一个静态的公共方法，可以返回对象。如果静态对象为空，则创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat ; <span class="comment">//默認是null</span></span><br><span class="line">    <span class="comment">//懶漢式，只有當用戶使用getInstance 時，才返回cat 對象, </span></span><br><span class="line">    <span class="comment">//後面再次調用時，會返回上次創建的cat 對象，從而保證了單例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;構造器調用...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cat == <span class="literal">null</span>) &#123;<span class="comment">//如果還沒有創建cat 對象</span></span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小可愛&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ul><li><p><code>final</code> 可以修饰 类、属性、方法、局部变量</p><p>以下情况下，可能用到 <code>final</code></p><ol><li><code>final</code> 修饰类：该类不能被继承</li><li><code>final</code> 修饰方法：该方法不能被重写</li><li><code>final</code> 修饰值：该值不能被修改</li></ol></li></ul><h3 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h3><ol><li><p><code>final</code> 修饰的属性又叫常量，一般用 XX_XX_XX 来命名（全大写字母+下划线）</p></li><li><p><code>final</code> 修饰的属性在定义时，必须赋初始值，且之后不能再修改。赋值可以在下列位置之一：</p><ul><li>定义时</li><li>构造器中</li><li>代码块中</li></ul><p>注意：如果 <code>final</code> 修饰的属性是静态的，则只能在以下位置赋值。</p><ul><li>定义时</li><li>静态代码块中（类加载时就要给值）</li></ul></li><li><p><code>final</code> 类不能继承，但能实例化对象。</p></li><li><p>如果不是 <code>final</code> 类，但含有 <code>final</code> 方法，虽然该方法不能重写，但能被继承。</p></li><li><p><code>final</code> 类可以有 <code>final</code> 方法。不能继承也就不能重写，没必要。</p></li><li><p><code>final</code> 不能修饰构造方法。</p></li><li><p><code>final</code> 和 <code>static</code> 搭配修饰属性，效率更高（顺序不限，推荐 <code>static</code> 在前）。底层编译器做了优化处理。这样做，调用 <strong>属性（定义时赋值）</strong> 时 <strong>不会造成类的加载</strong></p></li><li><p>包装类（Integer、Double、Float、Boolean、String等）都是 <code>final</code> 类，都不能被继承。</p></li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li><p>当父类的某些方法需要声明，却不知道如何实现时，可以将其声明为抽象方法。那个场合，要将该类声明为 <code>abstract</code> 类。</p></li><li><p>抽象类的价值更多是用于设计。设计者设计好后，让子类继承并实现。也是考官爱问的考点。</p></li><li><p>定义抽象类：<code>访问修饰符 abstract 类名&#123;...&#125;</code></p><p>定义抽象方法（注意：无方法体）：<code>访问修饰符 abstract 返回值 方法名(形参列表);</code></p></li></ul><h3 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h3><ol><li>抽象类不能被实例化</li><li>抽象类不一定包含抽象方法。也就是说，抽象类可以没有 <code>abstract</code>方法，还可以有实现的方法</li><li>一旦包含 <code>abstract</code> 方法，则该类一定要声明为 <code>abstract</code></li><li><code>abstract</code> 只能修饰 类 和 方法，不能修饰其他。</li><li>抽象类可以有任意成员（非抽象方法、构造器、静态属性等）。即，抽象类本质还是类。</li><li>抽象方法不能有主体。即，抽象方法不能实现。×<code>&#123;&#125;</code></li><li>如果一个类继承了 <code>abstract</code> 类，则其必须实现所有 <code>abstract</code> 方法，除非其自己也是 <code>abstract</code> 类。实现指有方法体大括号。</li><li>抽象方法不能用 <code>private</code> <code>final</code> <code>static</code> 来修饰。因为，这些关键词都和 重写 相违背。</li></ol><h3 id="实践：模板设计模式"><a href="#实践：模板设计模式" class="headerlink" title="实践：模板设计模式"></a>实践：模板设计模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123; <span class="comment">//抽象类-模板设计模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculateTime</span><span class="params">()</span> &#123;<span class="comment">//实现方法，调用job 方法</span></span><br><span class="line">        <span class="comment">//得到开始的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        job(); <span class="comment">//动态绑定机制</span></span><br><span class="line">        <span class="comment">//得的结束的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;任务执行时间&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">extends</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="comment">//计算任务</span></span><br><span class="line">    <span class="comment">//1+....+ 800000</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123; <span class="comment">//实现Template 的抽象方法job</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">800000</span>; i++) &#123;</span><br><span class="line">            num += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">aa.calculateTime(); <span class="comment">//这里还是需要有良好的OOP 基础，对多态</span></span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要用的时候，再根据具体情况把这些方法写出来。</p></li><li><p>语法：<code>interface 接口名&#123;...&#125;</code></p><p>​    <code>class 类名 implements 接口名&#123;...必须实现接口的抽象方法...&#125;</code></p><p>注意：JDK 7.0 以前，接口中只能是抽象方法。而 JDK 8.0 后，接口可以有静态（<code>static</code>）方法、默认（<code>default</code>）方法。</p><p>在接口中，抽象方法可以省略 <code>abstract</code></p></li></ul><p>接口中可以存在：</p><ul><li>属性（只有静态 <code>static</code> 属性，可以不加 <code>static</code> 关键字）</li><li>方法（抽象 <code>abstract</code> 方法、默认 <code>default</code> 实现方法、静态 <code>static</code> 方法）</li></ul><h3 id="细节-5"><a href="#细节-5" class="headerlink" title="细节"></a>细节</h3><ol><li>接口 不能被实例化。</li><li>接口中所有方法都是 <code>public</code> 方法。接口中的 抽象方法 可以不用 <code>abstract</code> 修饰。</li><li>一个普通类实现接口，就必须把该接口所有方法都实现。（快捷键 <code>alt + enter</code>）</li><li>抽象类实现接口，可以不用实现接口的方法，把实现留给其子类。</li><li>一个类可以同时实现多个接口。<code>class Name implements In1,In2&#123;...&#125;</code></li><li>接口中的属性只能是 <code>final</code> 的，并且是 <code>public static final</code> 修饰符。修饰符就算不写，还是这样。</li><li>接口中属性的访问形式：<code>接口名.属性名</code></li><li>接口不能 <strong>继承</strong> 其他的类，但可以 <strong>继承</strong> <em>多个</em>别的接口。</li><li>接口的修饰符只能是 <code>public</code> 和 默认。这点和类的修饰符相同。</li></ol><h3 id="实现接口VS继承类"><a href="#实现接口VS继承类" class="headerlink" title="实现接口VS继承类"></a>实现接口VS继承类</h3><ol><li>当子类继承父类，就自动拥有父类的所有功能。如果需要扩展功能，可以通过接口方式扩展。</li><li>可以认为，接口 是对于 Java 单继承机制的补充。</li><li>继承的价值主要在于：解决代码的复用性和可维护性。</li><li>接口的价值主要在于：设计。设计好各种规范，让其他类去实现这些方法。</li><li>接口比继承更加灵活。继承需要满足 is - a 的关系，而接口只需要满足 like - a 关系。</li><li>接口在一定程度上实现代码解耦。（即：接口规范性 + 动态绑定机制）</li></ol><h3 id="接口的多态特征"><a href="#接口的多态特征" class="headerlink" title="接口的多态特征"></a>接口的多态特征</h3><ol><li><p>多态参数（接口的引用可以指向实现了接口的类的对象）</p><p><code>viod work(Inerface01 i1)&#123;...&#125;</code> 参数可以传入任意实现该接口的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyParameter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//接口的多态体现</span></span><br><span class="line">        <span class="comment">//接口类型的变量if01 可以指向实现了IF 接口类的对象实例</span></span><br><span class="line">        <span class="type">IF</span> <span class="variable">if01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line">        if01 = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//继承体现的多态</span></span><br><span class="line">        <span class="comment">//父类类型的变量a 可以指向继承AAA 的子类的对象实例</span></span><br><span class="line">        <span class="type">AAA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BBB</span>();</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">CCC</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IF</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> <span class="keyword">implements</span> <span class="title class_">IF</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">IF</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AAA</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BBB</span> <span class="keyword">extends</span> <span class="title class_">AAA</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCC</span> <span class="keyword">extends</span> <span class="title class_">AAA</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>多态数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyArr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//多态数组-&gt; 接口类型数组：可以存放实现接口的类的实例</span></span><br><span class="line">        Usb[] usbs = <span class="keyword">new</span> <span class="title class_">Usb</span>[<span class="number">2</span>];</span><br><span class="line">        usbs[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Phone_</span>();</span><br><span class="line">        usbs[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Camera_</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; usbs.length; i++) &#123;</span><br><span class="line">            usbs[i].work();<span class="comment">//动态绑定..</span></span><br><span class="line">            <span class="comment">//和前面一样，我们仍然需要进行类型的向下转型</span></span><br><span class="line">            <span class="keyword">if</span>(usbs[i] <span class="keyword">instanceof</span> Phone_) &#123;<span class="comment">//判断他的运行类型是Phone_,调用特有方法</span></span><br><span class="line">                ((Phone_) usbs[i]).call();<span class="comment">//向下转型</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机可以打电话...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口存在多态传递现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyPass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//接口类型的变量可以指向，实现了该接口的类的对象实例</span></span><br><span class="line">        <span class="type">IG</span> <span class="variable">ig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="comment">//如果IG 继承了IH 接口，而Teacher 类实现了IG 接口</span></span><br><span class="line">        <span class="comment">//那么，实际上就相当于Teacher 类也实现了IH 接口.</span></span><br><span class="line">        <span class="comment">//这就是所谓的接口多态传递现象.</span></span><br><span class="line">        <span class="type">IH</span> <span class="variable">ih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IH</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IG</span> <span class="keyword">extends</span> <span class="title class_">IH</span>&#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">IG</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类被称为 内部类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;<span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123;<span class="comment">//外部其他类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内部类的最大特点是可以直接访问私有属性，并且可以体现类与类之间的包含关系。</li><li><strong>类的五大成员</strong>：属性、方法、构造器、代码块、内部类</li></ul><h3 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h3><ul><li>定义在外部类的局部位置上<ul><li>局部内部类：有 类名</li><li><strong>匿名内部类：无 类名</strong>（重点）</li></ul></li><li>定义在外部类的成员位置上<ul><li>成员内部类：无 <code>static</code> 修饰</li><li>静态内部类： <code>static</code> 修饰的类</li></ul></li></ul><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ul><li>定义在外部类的局部位置上(通常在方法中)，且有类名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;&#125;<span class="comment">//私有成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tools</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">                m1();<span class="comment">//直接访问私有成员</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner2</span> extend Inner &#123;<span class="comment">//若Inner含final则不能继承</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    inner.f1();<span class="comment">//创建实例后调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节-6"><a href="#细节-6" class="headerlink" title="细节"></a>细节</h4><ol><li><p>可以访问外部类的所有成员，包含私有成员</p></li><li><p>局部内部类可以 直接访问 外部类的成员。</p></li><li><p>不能添加 访问修饰符，因为其地位相当于局部变量。但，可以使用 <code>final</code>，因为局部变量也能用 <code>final</code></p></li><li><p>作用域 仅仅在定义它的方法或代码块中</p></li><li><p>外部类 在方法中，可以创建 局部内部类 的对象实例，然后调用内部类的方法。</p></li><li><p>外部其他类 不能访问 局部内部类（其地位是一个局部变量）</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则。那个场合，访问外部类成员使用 <code>外部类名.this.变量名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtterTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.tools01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tools01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(n1);<span class="comment">//输出800</span></span><br><span class="line">                System.out.println(Outer.<span class="built_in">this</span>.n1);<span class="comment">//输出100</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>外部类名.this</code> 本质就是 外部类的对象。即，调用了该方法（上例的 <code>tools01</code> ）的对象</p></li></ol><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ul><li>匿名内部类：定义在外部类的局部位置，且没有类名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类/接口 (参数列表) &#123;</span><br><span class="line">   <span class="comment">//类体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类本质是没有名字的类，而且是内部类。同时，还是一个对象。</li><li>可以用匿名内部类简化开发</li><li>基于接口的匿名内部类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//如果类只是使用一次，后面再不使用</span></span><br><span class="line">        <span class="comment">//可以使用匿名内部类来简化开发</span></span><br><span class="line">        <span class="type">IA</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎叫唤...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//tiger 的编译类型? IA</span></span><br><span class="line">        <span class="comment">//tiger 的运行类型? 就是匿名内部类Outer04$1</span></span><br><span class="line">        <span class="comment">//jdk 底层在创建匿名内部类Outer04$1,立即就创建了Outer04$1 实例，</span></span><br><span class="line">        <span class="comment">// 并且把地址返回给tiger</span></span><br><span class="line">        <span class="comment">//匿名内部类使用一次，就不能再使用,对象可以多次使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tiger 的运行类型=&quot;</span> + tiger.getClass());</span><br><span class="line">        tiger.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span>&#123;<span class="comment">//基于接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于类的匿名内部类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="comment">//1. father 编译类型Father</span></span><br><span class="line">    <span class="comment">//2. father 运行类型Outer$1</span></span><br><span class="line">    <span class="comment">//3. 底层会创建匿名内部类、</span></span><br><span class="line">    <span class="comment">//4. 同时也直接返回了匿名内部类Outer$1 的对象</span></span><br><span class="line">    <span class="comment">//5. 注意(&quot;jack&quot;) 参数列表会传递给构造器</span></span><br><span class="line">    <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匿名内部类重写了test 方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;<span class="comment">//基于类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;<span class="comment">//构造器，接收jack参数列表</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="细节-7"><a href="#细节-7" class="headerlink" title="细节"></a>细节</h4><ol><li><p>匿名内部类语法比较独特。其既是一个类的定义，也是一个对象。因此，从语法上看，其既有 定义类的特征，也有 创建对象的特征。</p><p>两种调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部类内</span></span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.cry();<span class="comment">//使用a接收,体现类的特征</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">A</span>()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.cry();<span class="comment">//体现对象的特征</span></span><br></pre></td></tr></table></figure></li><li><p>可以访问外部类的所有成员，包括私有的。</p></li><li><p>局部内部类可以 直接访问 外部类的成员。</p></li><li><p>不能添加 访问修饰符，因为其地位相当于局部变量。但，可以使用 <code>final</code>，因为局部变量也能用 <code>final</code></p></li><li><p>作用域：仅仅在定义它的方法或方法快中</p></li><li><p>外部其他类 不能访问 匿名内部类</p></li><li><p>如果外部类和匿名内部类的成员重名时，默认遵循就近原则。那个场合，访问外部类成员使用 <code>外部类名.this.变量名</code>（同上)</p></li></ol><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ul><li>当作实参直接传递，简洁高效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Cellphone</span>().clock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;<span class="comment">//实现了Bell接口的匿名内部类作为参数</span></span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">//参数传递给了clock方法</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ringing</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小懒猪起床了！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span> &#123;<span class="comment">//接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ringing</span><span class="params">()</span>;<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cellphone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clock</span><span class="params">(Bell bell)</span>&#123;</span><br><span class="line">        bell.ringing();<span class="comment">//动态绑定，回到重写的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><ul><li><p>定义在外部类的成员位置，并且没有 <code>static</code> 修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="细节-8"><a href="#细节-8" class="headerlink" title="细节"></a>细节</h3><ol><li><p>可以直接访问外部类的所有成员，包括私有的</p></li><li><p>可以添加任意访问修饰符。因为，成员内部类的地位就是一个成员。</p></li><li><p>作用域 和外部类其他成员相同，为整个类体。</p></li><li><p>局部内部类可以 直接访问 外部类的成员。</p></li><li><p>外部类可以通过创建对象的方式访问成员内部类</p></li><li><p>外部其他类访问成员内部类</p><ul><li><p><code>Outer.Inner inner = Outer.new Inner(); </code>将new Inner()看作Outer的成员，为下个方法的缩写</p></li><li><p><code>Outer.Inner name = new Outer().new Inner();</code></p></li><li><p>在外部类中编写一个方法，返回一个 <code>Inner</code> 的对象实例（就是对象的 getter）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部其他类内</span></span><br><span class="line"><span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">Outer.<span class="type">Inner</span> <span class="variable">innerInstance</span> <span class="operator">=</span> outer.getInnerInstance();</span><br><span class="line"><span class="comment">//外部类内</span></span><br><span class="line"><span class="keyword">public</span> Inner <span class="title function_">getInnerInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();<span class="comment">//返回一个实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果外部类和匿名内部类的成员重名时，默认遵循就近原则。那个场合，访问外部类成员使用 <code>外部类名.this.变量名</code></p></li></ol><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ul><li><p>静态内部类：定义在外部类的成员位置，经由 <code>static</code> 修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="细节-9"><a href="#细节-9" class="headerlink" title="细节"></a>细节</h4><ol><li>可以直接访问外部类的所有 <strong>静态</strong> 成员，包括私有的。但不能访问非静态成员</li><li>可以添加访问修饰符。因为，静态内部类的地位就是一个成员。</li><li>作用域 和其他成员相同，为整个类体。</li><li>静态内部类可以 直接访问 外部类的成员。</li><li>外部类可以通过创建对象的方式访问静态内部类</li><li>外部其他类访问静态内部类<ul><li><code>Outer.Inner name = new Outer.Inner();</code> 即通过类名直接访问</li><li>在外部类中编写一个方法，返回一个 <code>Inner</code> 的对象实例</li></ul></li><li>如果外部类和匿名内部类的成员重名时，默认遵循就近原则。访问外部类成员使用 <code>外部类名.变量名</code>。<em>（没有了this：因为静态内部类访问的都是静态成员）</em></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·房屋出租系统</title>
      <link href="/2024/09/14/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/09/14/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="程序框架图"><a href="#程序框架图" class="headerlink" title="程序框架图"></a>程序框架图</h2><ol><li>系统有哪些类</li><li>明确类与类的调用关系</li></ol><p><img src="/img/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%B3%BB%E7%BB%9F.jpg" alt="屋出租系"></p><p><img src="/img/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E6%96%87%E4%BB%B6.png" alt="屋出租文"></p><h2 id="准备工具类Utility"><a href="#准备工具类Utility" class="headerlink" title="准备工具类Utility"></a>准备工具类Utility</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> renting_system.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">工具类的作用:</span></span><br><span class="line"><span class="comment">处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line"><span class="comment">//静态属性。。。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1——5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readMenuSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">false</span>);<span class="comment">//包含一个字符的字符串</span></span><br><span class="line">            c = str.charAt(<span class="number">0</span>);<span class="comment">//将字符串转换成字符char类型</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp; </span><br><span class="line">                c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：读取键盘输入的一个字符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 一个字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readChar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">false</span>);<span class="comment">//就是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 默认值或输入的字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readChar</span><span class="params">(<span class="type">char</span> defaultValue)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">true</span>);<span class="comment">//要么是空字符串，要么是一个字符</span></span><br><span class="line">        <span class="keyword">return</span> (str.length() == <span class="number">0</span>) ? defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的整型，长度小于2位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readInt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">10</span>, <span class="literal">false</span>);<span class="comment">//一个整数，长度&lt;=10位</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);<span class="comment">//将字符串转换成整数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 整数或默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readInt</span><span class="params">(<span class="type">int</span> defaultValue)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理...</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">(<span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 限制的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue 指定的默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定长度的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">(<span class="type">int</span> limit, String defaultValue)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(limit, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;&quot;</span>)? defaultValue : str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：读取键盘输入的确认选项，Y或N</span></span><br><span class="line"><span class="comment"> * 将小的功能，封装到一个方法中.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Y或N</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readConfirmSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;确认是否预订(Y/N): &quot;</span>);</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">        <span class="comment">//在这里，将接受到字符，转成了大写字母</span></span><br><span class="line">        <span class="comment">//y =&gt; Y n=&gt;N</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>, <span class="literal">false</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能： 读取一个字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit 读取的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。 </span></span><br><span class="line"><span class="comment">     *   如果为false表示 不能读空字符串。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment"> *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readKeyBoard</span><span class="params">(<span class="type">int</span> limit, <span class="type">boolean</span> blankReturn)</span> &#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//定义了字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//scanner.hasNextLine() 判断有没有下一行</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            line = scanner.nextLine();<span class="comment">//读取这一行</span></span><br><span class="line">           </span><br><span class="line"><span class="comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span></span><br><span class="line"><span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) <span class="keyword">return</span> line;<span class="comment">//如果blankReturn=true,可以返回空串</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>; <span class="comment">//如果blankReturn=false,不接受空串，必须输入内容</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户输入的内容大于了 limit，就提示重写输入  </span></span><br><span class="line"><span class="comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span></span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="程序入口RentingSystemApp"><a href="#程序入口RentingSystemApp" class="headerlink" title="程序入口RentingSystemApp"></a>程序入口RentingSystemApp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> renting_system.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> renting_system.view.HouseView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentingSystemApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HouseView</span>().mainManu();</span><br><span class="line">        System.out.println(<span class="string">&quot;====你退出了系统====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="界面HouseView"><a href="#界面HouseView" class="headerlink" title="界面HouseView"></a>界面HouseView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> renting_system.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> renting_system.domain.House;</span><br><span class="line"><span class="keyword">import</span> renting_system.service.HouseService;</span><br><span class="line"><span class="keyword">import</span> renting_system.utils.Utility;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.显示界面</span></span><br><span class="line"><span class="comment">//2.接收用户输入</span></span><br><span class="line"><span class="comment">//3.调用HouseService完成对房屋的各种操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseView</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//控制显示菜单</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;<span class="comment">//接收用户选择</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HouseService</span> <span class="variable">houseService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HouseService</span>(<span class="number">10</span>);<span class="comment">//设置数组大小为10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收输入，创建House对象，调用add方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========Adding house==========&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Utility.readString(<span class="number">8</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;电话：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> Utility.readString(<span class="number">12</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;地址：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> Utility.readString(<span class="number">8</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;月租：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rent</span> <span class="operator">=</span> Utility.readInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;状态：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> Utility.readString(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">//创建对象，id自增长</span></span><br><span class="line">        <span class="type">House</span> <span class="variable">newHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">House</span>(<span class="number">0</span>,name,phone,address,rent,state);</span><br><span class="line">        <span class="keyword">if</span> (houseService.add(newHouse)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============添加房屋成功============&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============添加房屋失败============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========Finding house==========&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要查找的id：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Utility.readInt(<span class="number">8</span>);</span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> houseService.findById(id);</span><br><span class="line">        <span class="keyword">if</span> (house != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(house);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;==========未查找到===========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========Deling house==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待删除房屋的编号（-1退出）&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">delId</span> <span class="operator">=</span> Utility.readInt(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span>(delId == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;==========放弃删除房屋信息==========&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">choice</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (houseService.del(delId)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=============删除房屋信息成功=============&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(choice == <span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========Changeing house==========&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择待修改房屋id：（-1表示退出）&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">updatedId</span> <span class="operator">=</span> Utility.readInt(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span> (updatedId == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=================已放弃================&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> houseService.findById(updatedId);<span class="comment">//返回的是引用类型，修改可以影响</span></span><br><span class="line">            <span class="keyword">if</span> (house == <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;房屋信息不存在&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;姓名(&quot;</span> + house.getHouse_name() + <span class="string">&quot;): &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Utility.readString(<span class="number">8</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//这里如果用户直接回车表示不修改该信息,默认&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(name)) &#123;<span class="comment">//修改</span></span><br><span class="line">                house.setHouse_name(name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;电话(&quot;</span> + house.getHouse_phone() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> Utility.readString(<span class="number">12</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(phone)) &#123;</span><br><span class="line">                house.setHouse_phone(phone);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;地址(&quot;</span> + house.getHouse_address() + <span class="string">&quot;): &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> Utility.readString(<span class="number">18</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(address)) &#123;</span><br><span class="line">                house.setHouse_address(address);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;租金(&quot;</span> + house.getRent() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rent</span> <span class="operator">=</span> Utility.readInt(-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (rent != -<span class="number">1</span>) &#123;</span><br><span class="line">                house.setRent(rent);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;状态(&quot;</span> + house.getState() + <span class="string">&quot;):&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">state</span> <span class="operator">=</span> Utility.readString(<span class="number">10</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(state)) &#123;</span><br><span class="line">                house.setState(state);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============修改房屋信息成功============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示房屋列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========房屋列表=============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态（已出租/未出租）&quot;</span>);</span><br><span class="line">        House[] houses = houseService.list();<span class="comment">//得到所有房屋信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; houses.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(houses[i] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(houses[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========房屋列表显示完毕=============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">            loop = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        loop = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示主菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mainManu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;===========房屋出租系统菜单=============&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1. 新 增 房 源&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2. 查 找 房 屋&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3. 删 除 房 屋 信 息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4. 修 改 房 屋 信 息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t5. 房 屋 列 表&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t6. 退       出&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入您的选择：&quot;</span>);</span><br><span class="line">            key = Utility.readChar();</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    addHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    findHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    delHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    changeHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    listHouse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                    exit();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(loop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="业务层HouseService"><a href="#业务层HouseService" class="headerlink" title="业务层HouseService"></a>业务层HouseService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> renting_system.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> renting_system.domain.House;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> House[] houses;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">houseNums</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//注意数组里初始没有测试项目要改成0，记录当前有多少个房屋信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">idCounter</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//记录当前的id增长到哪个值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseService</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        houses = <span class="keyword">new</span> <span class="title class_">House</span>[size];<span class="comment">//创建对象时指定数组大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list方法返回houses数组</span></span><br><span class="line">    <span class="keyword">public</span> House[] list() &#123;</span><br><span class="line">        <span class="keyword">return</span> houses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add方法，添加新对象,返回boolean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(House newHouse)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否还可以继续添加(我们暂时不考虑数组扩容的问题) =&gt; 能否自己加入数组扩容机制(~~)</span></span><br><span class="line">        <span class="keyword">if</span>(houseNums == houses.length) &#123;<span class="comment">//不能再添加</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数组已满，不能再添加了...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把newHouse对象加入到，新增加了一个房屋</span></span><br><span class="line">        houses[houseNums++] = newHouse;</span><br><span class="line">        <span class="comment">//我们程序员需要设计一个id自增长的机制, 然后更新newHouse的id</span></span><br><span class="line">        newHouse.setHouse_id(idCounter++);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> House <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; houseNums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id == houses[i].getHouse_id()) &#123;</span><br><span class="line">                <span class="keyword">return</span> houses[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//del方法，删除一个房屋信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> delId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//应当先找到要删除的房屋信息对应的下标</span></span><br><span class="line">        <span class="comment">//一定要搞清楚 下标和房屋的编号不是一回事</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; houseNums; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(delId == houses[i].getHouse_id()) &#123;<span class="comment">//要删除的房屋(id),是数组下标为i的元素</span></span><br><span class="line">                index = i;<span class="comment">//就使用index记录i</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;<span class="comment">//说明delId在数组中不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; houseNums - <span class="number">1</span>; i++) &#123;<span class="comment">//把index后一位依次往前移</span></span><br><span class="line">            houses[i] = houses[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先减减：把当有存在的房屋信息的最后一个 设置null</span></span><br><span class="line">        houses[--houseNums] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据层House"><a href="#数据层House" class="headerlink" title="数据层House"></a>数据层House</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> renting_system.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">//House类对象表示一个房屋信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line">    <span class="comment">//编号 房主 电话 地址 月租 状态（已出租/未出租）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> house_id;</span><br><span class="line">    <span class="keyword">private</span> String house_name;</span><br><span class="line">    <span class="keyword">private</span> String house_phone;</span><br><span class="line">    <span class="keyword">private</span> String house_address;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rent;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器与getter、setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">House</span><span class="params">(<span class="type">int</span> house_id, String house_name, String house_phone, String house_address, <span class="type">int</span> rent, String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.house_id = house_id;</span><br><span class="line">        <span class="built_in">this</span>.house_name = house_name;</span><br><span class="line">        <span class="built_in">this</span>.house_phone = house_phone;</span><br><span class="line">        <span class="built_in">this</span>.house_address = house_address;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHouse_id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> house_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHouse_id</span><span class="params">(<span class="type">int</span> house_id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.house_id = house_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHouse_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> house_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHouse_name</span><span class="params">(String house_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.house_name = house_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHouse_phone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> house_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHouse_phone</span><span class="params">(String house_phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.house_phone = house_phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHouse_address</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> house_address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHouse_address</span><span class="params">(String house_address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.house_address = house_address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(<span class="type">int</span> rent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了方便输出对象信息，实现toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> house_id +</span><br><span class="line">                <span class="string">&quot;\t\t&quot;</span> + house_name +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + house_phone +</span><br><span class="line">                <span class="string">&quot;\t\t&quot;</span> + house_address +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + rent +</span><br><span class="line">                <span class="string">&quot;\t&quot;</span> + state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·面向对象编程（中级）</title>
      <link href="/2024/09/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(%E4%B8%AD%E7%BA%A7)/"/>
      <url>/2024/09/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(%E4%B8%AD%E7%BA%A7)/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>删除当前行：<code>ctrl + Y</code></li><li>复制当前行：<code>ctrl + D</code></li><li>补全代码：<code>alt + /</code></li><li>添加 &#x2F; 取消注释：<code>ctrl + /</code></li><li>导入该行需要的类：<code>alt + enter</code></li><li>快速格式化代码：<code>ctrl + alt + L</code></li><li>快速运行程序：<code>shift + F10</code>（自设<code>alt + R</code>）</li><li>生成构造器：<code>alt + insert</code></li><li>查看一个类的层级关系：<code>ctrl + H</code></li><li>定位一个方法：把光标放在一个方法上，按 <code>ctrl + B</code></li><li>自动分配变量名：在后面加上 <code>.var</code></li><li>查看模板快捷键：<code>ctrl + J</code></li><li>快速环绕代码：<code>ctrl + alt + T</code></li></ul><h3 id="模板快捷键"><a href="#模板快捷键" class="headerlink" title="模板快捷键"></a>模板快捷键</h3><ul><li><code>main</code>：<code>public static void main(String[] args) &#123;&#125;</code></li><li><code>sout</code>：<code>System.out.println();</code></li><li><code>fori</code>：<code>for (int i = 0; i &lt; ; i++) &#123;&#125;</code></li><li><code>xxx.for</code>：<code>for(int i = 0; i &lt; xxx; i++) &#123;&#125;</code></li></ul><p>更多的请在 File - Settings - Editor - Live template 中查看或添加</p><p>或者，通过下列快捷键查看</p><ul><li><code>ctrl + J</code>：查看模板快捷键</li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>包的作用：</li><li><ol><li>区分相同名字的类 </li><li>当类很多时，便于管理 </li><li>控制访问范围</li></ol></li><li>语法：<code>package com.name</code> 其中 <code>com</code> <code>name</code> 分别是 一级 和 二级目录，用 <code>.</code> 分隔</li><li>包的本质：就是创建不同 文件夹&#x2F;目录 来保存 类 文件</li></ul><p><img src="/img/%E5%8C%85.png" alt="包"></p><p>如何使用包中的对象：</p><ol><li><p>先引入包，之后创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.name.T;</span><br><span class="line">...</span><br><span class="line"><span class="type">T</span> <span class="variable">tools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br></pre></td></tr></table></figure></li><li><p>不引入包，而在创建对象时写全路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.name.<span class="type">T</span> <span class="variable">tools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.name.T();</span><br></pre></td></tr></table></figure></li></ol><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul><li>只能包含 数字 <code>1 2 3</code>、字母 <code>a b A b</code>、下划线 <code>_</code>、小圆点 <code>.</code></li><li>不能用 数字 开头。每级目录都不能。</li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>全小写字母 + 小圆点</li><li><code>com.公司名.项目名.业务模块名</code></li></ul><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><p><code>java.lang</code>：基本包，默认引入，不需要再引入</p><p><code>java.util</code>：系统提供的工具包。工具类。</p><p><code>java.net</code>：网络包，网络开发。</p><p><code>java.awt</code>：Java 的界面开发，GUI。</p><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><ul><li>只引入该包下的一个类：<code>import java.util.Scanner</code>(用哪些引用哪些)</li><li>引入该包的所有内容（不建议）：<code>import java.util.*</code></li></ul><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><code>Package</code> 关键字的作用是声明当前类所在的包，要放在 类 的 最上面。一个 类 中最多有一句 <code>package</code></li><li><code>import</code> 放在 <code>package</code> 下面，类定义 前面。可以有多条语句，且没有顺序要求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> ...</span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><ul><li>Java 提供 4 种 访问控制修饰符号，用于控制方法和属性（成员变量）的访问权限（范围）<ul><li>公开级别：<code>public</code>，对外公开。</li><li>受保护级别：<code>protected</code>，对 子类 和 同一个包中的类 公开。</li><li>默认级别：没有修饰符号，向 同一个包的类 公开。</li><li>私有级别：<code>private</code>，只有 同类 可以访问，不对外公开。</li></ul></li></ul><table><thead><tr><th>访问级别</th><th>访问控制修饰符</th><th align="center">同类</th><th align="center">同包</th><th align="center">子类</th><th align="center">不同包</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td>受保护</td><td>protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td>默认</td><td>无修饰符</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td>私有</td><td>private</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>修饰符可以修饰类中的 <code>属性</code>、<code>成员方法</code> 及 <code>类</code></li><li>只有 <code>默认</code> 和 <code>public</code> 才能修饰 类，并遵循上述访问权限特点</li><li>成员方法 的访问规则和 属性 相同</li></ol><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><p>面向对象三大特征：封装、继承、多态</p></li><li><p>封装（encapsulation）就是把抽象出的 数据 [属性] 和对数据的 操作 [方法] 封装在一起。数据 被保护在内部，程序的其他部分只有通过被授权的 操作 [方法]，才能对数据进行操作。</p></li><li><p>封装的好处：</p><ul><li>隐藏实现细节</li><li>可以对数据进行验证，保证安全合理</li></ul></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>将属性私有化 <code>private</code></li><li>提供一个公共的 <code>set</code> 方法，用于对属性判断并赋值</li><li>提供一个公共的 <code>get</code> 方法，用于获取属性的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encapsulation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//提供两个构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Encapsulation</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Encapsulation</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setName(name);</span><br><span class="line">        <span class="built_in">this</span>.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以在set中对输入的数据进行限制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="comment">//进行账户创建的测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEncapsulation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Encapsulation</span> <span class="variable">encapsulation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Encapsulation</span>();</span><br><span class="line">        encapsulation.setName(<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        encapsulation.setAge(<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将构造器和setXxx 结合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">    <span class="comment">// this.name = name;</span></span><br><span class="line">    <span class="comment">// this.age = age;</span></span><br><span class="line">    <span class="comment">// this.salary = salary;</span></span><br><span class="line">    <span class="comment">//我们可以将set 方法写在构造器中，这样仍然可以对数据进行验证</span></span><br><span class="line">    setName(name);</span><br><span class="line">    setAge(age);</span><br><span class="line">    setSalary(salary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>继承：当多个类存在相同的 属性（变量）和 方法 时，可以从这些类中抽象出 <strong>父类（基类&#x2F;超类）</strong>。在 父类 中定义这些属性·方法，只需要通过 <code>extends</code> 来声明继承父类，所有的<strong>子类（派生类）</strong>自动拥有父类的属性和方法。</li><li>父类与子类是相对的，子类也可以是其它类的父类。</li><li>通过继承的方法，代码的复用性提高了，代码的维护性和拓展性也提高了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;&#125;;<span class="comment">// Son 类继承了 Father 类</span></span><br></pre></td></tr></table></figure><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li><p>子类 继承了所有属性和方法，但私有（<code>private</code>）的 属性和方法 不能在 子类 直接访问。要调用父类提供的 公共（<code>public</code>）等方法 访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"><span class="comment">//父类提供一个public 的方法,在子类调用时就返回n4</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN4</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test400</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;test400&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//call</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callTest400</span><span class="params">()</span> &#123;</span><br><span class="line">test400();</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>子类 必须先调用 父类 的 构造器，完成 父类 的 初始化。</p></li><li><p>当创建 子类对象 时，不管使用 子类的哪个构造器，默认情况下总会调用 父类的<strong>无参构造器</strong>。如果 父类 没有提供 无参构造器（比如被其它有参构造器覆盖），则必须在 子类的构造器 中用 <code>super</code> 去指定使用 父类的哪个构造器 完成 对父类的初始化。否则编译不能通过。</p></li><li><p>如果希望指定调用 父类的某构造器，则显式地调用一下：<code>super(形参列表);</code></p></li><li><p><code>super</code> 在使用时，必须放在构造器第一行。<code>super</code> 只能在构造器中使用。</p></li><li><p>由于 <code>super</code> 与 <code>this</code> 都要求放在第一行，所以此两个方法不能同时存在于同一构造器。</p></li><li><p>Java 所有的类都是 <code>Object</code> 的子类。换言之，<code>Object</code> 是所有类的父类。</p></li><li><p>父类构造器的调用不限于直接父类，将<strong>持续向上</strong>直至追溯到顶级父类 <code>Object</code>，才开始调用</p></li><li><p>子类 最多只能直接继承 一个 父类。即，Java 中是 单继承机制。</p></li><li><p>不能滥用继承。子类 和 父类 之间必须满足 is - a 的逻辑关系。</p></li></ol><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3><ul><li>内存布局：<ol><li>在 方法区，自顶级父类起，依次加载 类信息。</li><li>在 堆 中开辟一个空间，自顶级父类起，依次创建并初始化各个类包含的所有属性信息。</li><li>在 栈 中存放该空间的 地址。</li></ol></li><li>根据以下查找关系在访问子类时返回信息：<ol><li>查看该子类是否有该属性。如果该子类有这个属性且可以访问，则返回信息。</li><li>子类没有该属性的场合，查看父类是否有该属性。如有且可访问，则返回信息。如不可访问，则报错。</li><li>父类也没有该属性的场合，继续查找上级父类，直到顶级父类（Object）。</li><li>如需调用某个特定类包含的特定信息，可以调用该类提供的方法。</li></ol></li></ul><h3 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h3><ul><li><code>super</code> 代表父类的引用。用于访问父类的 属性、方法、构造器。</li></ul><h4 id="super-的使用"><a href="#super-的使用" class="headerlink" title="super 的使用"></a>super 的使用</h4><ul><li><code>super.属性名</code>：访问父类的属性。不能访问父类的私有（private）属性。</li><li><code>super.方法名(形参列表)</code>：访问父类的方法。不能访问父类的私有（private）方法。</li><li><code>super(参数列表);</code>：访问父类的构造器。此时，super 语句必须放在第一句。</li></ul><h4 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>调用父类构造器，好处是分工明确。父类属性由父类初始化，子类由子类初始化。</p></li><li><p>子类中由和父类中成员（属性和方法）重名时，要调用父类成员必须用 <code>super</code>。没有重名的场合，<code>super</code>、<code>this</code> 及直接调用的效果相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A 类的cal() 方法...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 类的cal() 方法...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;B 类的sum()&quot;</span>);</span><br><span class="line">    <span class="comment">//希望调用父类-A 的cal 方法</span></span><br><span class="line">    <span class="comment">//若子类B 没有cal 方法，因此我可以使用下面三种方式</span></span><br><span class="line">    <span class="comment">//找cal 方法顺序是:</span></span><br><span class="line">    <span class="comment">// (1)先找本类，如果有，则调用</span></span><br><span class="line">    <span class="comment">// (2)如果没有，则找父类(如果有，并可以调用，则调用)</span></span><br><span class="line">    <span class="comment">// (3)如果父类没有，则继续找父类的父类,直到Object 类</span></span><br><span class="line">    <span class="comment">// 提示：如果查找方法的过程中，找到了，但是不能访问， 则报错</span></span><br><span class="line">    <span class="comment">// 如果查找方法的过程中，没有找到，则提示方法不存在</span></span><br><span class="line">    cal();</span><br><span class="line">    <span class="built_in">this</span>.cal(); <span class="comment">//等价cal</span></span><br><span class="line">    <span class="comment">//找cal 方法(super.call()) 的顺序是直接查找父类</span></span><br><span class="line">    <span class="comment">//若子类有cal方法则效果与其它两种不同</span></span><br><span class="line">    <span class="built_in">super</span>.cal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p><code>super</code> 的访问不限于直接父类。如果爷爷类和本类中都有同名成员也能使用。如果多个基类（上级类）中都有同名成员，则遵循就近原则（先查到谁就是谁），也遵守访问权限。</p></li></ol><h4 id="super和this的比较"><a href="#super和this的比较" class="headerlink" title="super和this的比较"></a>super和this的比较</h4><table><thead><tr><th>No.</th><th>区别点</th><th>this</th><th>super</th></tr></thead><tbody><tr><td>1</td><td>访问属性</td><td>访问本类中的属性, 如果本类没有此属性则从父类中继续查找</td><td>从父类开始查找属性</td></tr><tr><td>2</td><td>调用方法</td><td>访问本类中的方法,如果本类没有此方法则从父类继续查找</td><td>从父类开始查找方法</td></tr><tr><td>3</td><td>调用构造器</td><td>调用本类构造器，必须放在构造器的首行</td><td>调用父类构造器，必须放在子类构造器的首行</td></tr><tr><td>4</td><td>特殊</td><td>表示当前对象</td><td>子类中访问父类对象</td></tr></tbody></table><h3 id="方法重写-覆盖-override"><a href="#方法重写-覆盖-override" class="headerlink" title="方法重写 &#x2F; 覆盖(override)"></a>方法重写 &#x2F; 覆盖(override)</h3><ul><li>方法重写&#x2F;覆盖（Override）：如若子类有一个方法，和父类的某方法的 <strong>名称、返回类型、参数</strong> 一样，那么我们就说该子类方法 覆盖 了那个父类方法。</li></ul><p><strong>使用细节：</strong></p><ol><li><p>子类方法的<strong>参数，方法名称</strong>，要和父类方法完全一致。</p></li><li><p>子类方法的返回类型需和父类方法 一致，或者是父类返回类型的<strong>子类</strong>。</p><p><code>public Object getInfo()&#123;&#125;</code> <code>public String getInfo()&#123;&#125;</code>中String为Object子类。   </p></li><li><p>子类方法 <strong>不能缩小</strong> 父类方法的访问范围（访问修饰符），子类大于父类。</p><p>public &gt; protected &gt; 默认&gt;private</p></li></ol><p><strong>方法重写与方法重载</strong></p><table><thead><tr><th>名称</th><th>发生范围</th><th>方法名</th><th>形参列表</th><th>返回类型</th><th>修饰符</th></tr></thead><tbody><tr><td>重载（overload）</td><td>本类</td><td>必须一样</td><td>类型，个数或者顺序至少有一个不同</td><td>无要求</td><td>无要求</td></tr><tr><td>重写（override）</td><td>父子类</td><td>必须一样</td><td>相同</td><td>子类重写的方法，返回的类型和父类返回的类型一致，或者是其子类</td><td>子类方法不能缩小父类方法的访问范围.</td></tr></tbody></table><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>方法 或 对象 有多种形态。多态 是面向对象的第三大特征，是建立在 封装 和 继承 的基础之上的</li><li>解决代码复用性不高，不利于代码维护的问题</li></ul><h3 id="多态的体现"><a href="#多态的体现" class="headerlink" title="多态的体现"></a>多态的体现</h3><ol><li><p>方法的多态：重写和重载</p><p>重载：传入不同的参数来调用不同的方法</p><p>重写：方法同名，调用的对象不一样，方法不一样</p></li><li><p><strong>对象的多态：</strong></p><ul><li><p>一个对象的 编译类型 和 运行类型 可以不一致。</p><p><code>Animal animal = new Dog();</code></p><p>上例，编译类型是父类 <code>Animal</code>，运行类型是子类 <code>Dog</code>。运行时调用方法以运行类型为主</p></li><li><p>编译类型在定义对象时就确定了，不能改变。</p></li><li><p>运行类型是可以变化的。</p><p>上例中，再让 <code>animal = new Cat();</code>，这样，运行类型变为了 <code>Cat</code></p></li><li><p>编译类型看定义时 <code>=</code> 的左边，运行类型看 <code>=</code> 的右边。</p></li></ul></li></ol><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li><p>多态的前提：两个对象 &#x2F; 类存在继承关系。</p></li><li><p>多态的向上转型：</p><ul><li><p>本质：父类的引用指向了子类的对象。</p></li><li><p>语法：<code>父类类型 引用名 = new 子类类型(参数列表);</code></p></li><li><p>编译类型看左边，运行类型看右边。</p></li><li><p>编译器在编译时使用编译类型来确定可以调用的方法和属性。运行时，JVM会根据对象的实际类型来调用相应的方法。</p></li><li><p>可以调用父类中的所有成员，但不能调用子类特有的成员，而且需要遵守访问权限。因为在编译阶段，能调用哪些成员是由编译类型决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Some sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Catching mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">// 向上转型</span></span><br><span class="line">        animal.sound(); <span class="comment">// 输出: Meow，调用子类的sound方法</span></span><br><span class="line">        <span class="comment">// animal.catchMouse(); // 编译错误，因为catchMouse不是Animal类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><p>如<code>animal.catchMouse();</code>会报错，因为是运行类型Cat特有的方法</p></li><li><p>最终的运行结果要看子类的具体实现。即运行时从子类起向上查找方法调用。</p><p>​</p></li></ul></li><li><p>多态的向下转型：</p><ul><li>向下转型是将一个父类引用转换成子类引用的过程。进行向上转型之后，为了访问子类特有的成员而进行</li></ul><ul><li><p>语法：<code>子类类型 引用名 = (子类类型)父类引用;</code></p><p>这个语法和强制类型转换很像。</p><p><code>Cat cat = (Cat)animal;</code></p></li><li><p>只能强转父类的引用，不能强转父类的对象。</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象。即上例中的 <code>animal</code> 运行类型需是 <code>Cat</code></p></li><li><p>向下转型后，可以调用子类类型中的所有成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 父类方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Catching mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">// 向上转型</span></span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123; <span class="comment">// 检查运行类型是否为Cat</span></span><br><span class="line">            <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat)animal; <span class="comment">// 向下转型</span></span><br><span class="line">            cat.catchMouse(); <span class="comment">// 调用子类特有方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul></li><li><p>属性没有重写一说。<strong>和 方法 不同，属性的值 看编译类型。</strong></p></li><li><p><code>instanceof</code> 比较操作符。用于判断对象类型是否是某类型或其子类型。此时判断的是 <strong>运行类型</strong>。</p></li></ol><h3 id="多态的应用"><a href="#多态的应用" class="headerlink" title="多态的应用"></a>多态的应用</h3><ol><li><p>多态数组: 数组的定义类型为父类类型，里面保存的实际元素类型为子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Some animal sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The cat is catching a mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Woof&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">barkLoudly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The dog is barking loudly&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="comment">// 创建一个Animal类型的数组，可以存储任何Animal的子类对象</span></span><br><span class="line">        Animal[] animals = <span class="keyword">new</span> <span class="title class_">Animal</span>[<span class="number">2</span>];</span><br><span class="line">        animals[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">// 向上转型</span></span><br><span class="line">        animals[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 向上转型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; animals.length;i++) &#123;</span><br><span class="line">            animals[i].makeSound(); <span class="comment">// 遍历数组，调用父类方法，多态行为</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查是否是Cat的实例</span></span><br><span class="line">            <span class="keyword">if</span> (animals[i] <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">                <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animals[i]; <span class="comment">// 向下转型</span></span><br><span class="line">                cat.catchMouse(); <span class="comment">// 调用Cat特有的方法</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 检查是否是Dog的实例</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (animals[i] <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">                <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animals[i]; <span class="comment">// 向下转型</span></span><br><span class="line">                dog.barkLoudly(); <span class="comment">// 调用Dog特有的方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多态参数: 方法定义的形参类型为父类类型，实参类型允许为子类类型。即，它允许方法接收一个父类类型的参数，但是调用该方法时可以传递任何子类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">playWithYarn</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat is playing with yarn&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">chaseTail</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is chasing its tail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 方法定义形参类型为父类类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">feedAnimal</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.eat(); <span class="comment">// 调用父类或子类中重写的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实参类型允许为子类类型</span></span><br><span class="line">        feedAnimal(cat); <span class="comment">// 输出: Cat is eating</span></span><br><span class="line">        feedAnimal(dog); <span class="comment">// 输出: Dog is eating</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="Java的动态绑定机制"><a href="#Java的动态绑定机制" class="headerlink" title="Java的动态绑定机制"></a>Java的动态绑定机制</h2><ul><li>当调用对象<strong>方法</strong>的时候，该方法和该对象（隐式参数）的内存地址&#x2F;运行类型绑定。也就是看运行类型对应的方法</li><li>当调用对象<strong>属性</strong>时，没有动态绑定机制。于是哪里声明，哪里调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//a 的编译类型A, 运行类型B</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(a.sum());<span class="comment">//?40 -&gt; 30</span></span><br><span class="line">        System.out.println(a.sum1());<span class="comment">//?30-&gt; 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//动态绑定机制:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;<span class="comment">//父类sum()</span></span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;<span class="comment">//20 + 10，此时getI()调用的是子类的</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;<span class="comment">//父类sum1()</span></span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">10</span>;<span class="comment">//10 + 10，此时i输入的是父类的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//父类getI</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// public int sum() &#123;</span></span><br><span class="line">        <span class="comment">// return i + 20;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//子类getI()</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public int sum1() &#123;</span></span><br><span class="line">        <span class="comment">// return i + 10;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><ul><li>Object 类是所有类的超类。Java 中所有类默认继承该类。</li></ul><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h3><ul><li><code>boolean equals(Object obj)</code></li><li>用于检测一个对象是否等于另一对象。</li></ul><p><strong>与 &#x3D;&#x3D; 的区别：</strong></p><ul><li><p><code>==</code>：是一个比较运算符，既可以判断基本类型，也可以判断引用类型。</p><p>如果判断基本类型，判断的是值是否相等。</p><p>如果判断引用类型，判断的是地址是否相等。</p></li><li><p>equals 方法：是 Object 中的方法，只能判断<strong>引用类型，</strong>默认判断<strong>地址</strong>是否相等，但<code>String</code> 类和 <code>Integer</code> 类都重写了 <code>equals()</code> 方法，以便比较字符串或整数的内容是否相等</p><p>在子类中定义 equals 方法时，首先调用超类的 equals 方法。那个一致时，再比较子类中的字段。</p><p><strong>重写equals方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode 方法"></a>hashCode 方法</h3><ul><li><code>int hashCode()</code></li><li>返回对象的 哈希码值。</li></ul><p><strong>散列码的作用：</strong></p><ol><li>提高哈希结构的容器的效率。</li><li>两个引用，若是指向同一对象，则哈希值一般相同。</li><li>哈希值是根据地址生成的，因而，哈希值不能等同于地址</li></ol><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><p><code>String toString()</code></p><p>默认返回：全类名（包名+类名）+@+哈希值的十六进制。<br>子类往往重写toString 方法，用于返回对象的属性信息Object 的默认实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>重写toString（）：<code>Alt+insert</code>  –&gt;  <code>toString</code></p></li><li><p>当直接输出一个对象时， toString 方法会被默认的调用</p><p>如：<code>System.out.println(obj) ;</code>等价于<code>obj.toString();</code></p></li></ul><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize 方法"></a>finalize 方法</h3><ol><li><p>当对象被回收时，系统会自动调用该对象的 <code>finalize</code> 方法。子类可以重写该方法，做一些释放资源的操作。</p></li><li><p>何时被回收：当某对象没有任何引用时，JVM 就认为该对象是一个垃圾对象，就会（在算法决定的某个时刻）使用垃圾回收机制来销毁该对象。在销毁该对象前，会调用 <code>finalize</code> 方法。</p></li><li><p>垃圾回收机制的调用，是由系统决定。也可以通过 <code>System.gc();</code> 主动触发垃圾回收机制。这个方法一经调用就会继续执行余下代码，而不会等待回收完毕。</p></li><li><p>实际开发中，几乎不会运用该方法。</p></li><li><p>重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><ul><li>在程序某一行设置一个断点，调试时，代码运行至此就会停住，然后可以一步一步往下调试。调试过程中可以看各个变量当前的值。如若出错，则测试到该出错代码行即显示错误并停下。进行分析从而找到这个 Bug。</li><li>调试过程中是运行状态，所以，是以对象的 运行类型 执行。</li><li>断点调试是程序员必须掌握的技能，能帮助我们查看 Java 底层源代码的执行过程，提高 Java 水平。</li><li>快捷键如下<ul><li>跳入：<code>F7</code></li><li>跳过：<code>F8</code></li><li>跳出：<code>shift + F8</code></li><li>resume，执行到下一个断点：<code>F9</code></li></ul></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="查看JDK源码"><a href="#查看JDK源码" class="headerlink" title="查看JDK源码"></a>查看JDK源码</h3><ul><li>需要查看方法原码时：光标放在该方法，输入<code>Ctrl+B</code></li></ul><h3 id="零钱通程序"><a href="#零钱通程序" class="headerlink" title="零钱通程序"></a>零钱通程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smallchange.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该类是完成零钱通的各个功能的类</span></span><br><span class="line"><span class="comment"> * 使用OOP(面向对象编程)</span></span><br><span class="line"><span class="comment"> * 将各个功能对应一个方法.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallChangeSysOOP</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性..</span></span><br><span class="line">    <span class="comment">//定义相关的变量</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 完成零钱通明细</span></span><br><span class="line">    <span class="comment">//思路:(1) 可以把收益入账和消费，保存到数组 (2) 可以使用对象 (3) 简单的话可以使用String拼接</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> <span class="string">&quot;-----------------零钱通明细------------------&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 完成收益入账  完成功能驱动程序员增加新的变化和代码</span></span><br><span class="line">    <span class="comment">// 定义新的变量</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// date 是 java.util.Date 类型，表示日期</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>); <span class="comment">//可以用于日期格式化的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 消费</span></span><br><span class="line">    <span class="comment">//定义新变量，保存消费的原因</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">note</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先完成显示菜单，并可以选择</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mainMenu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;\n================零钱通菜单(OOP)===============&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t1 零钱通明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t2 收益入账&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t3 消费&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t\t4 退     出&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;请选择(1-4): &quot;</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用switch 分支控制</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.detail();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.income();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.pay();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    <span class="built_in">this</span>.exit();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;选择有误，请重新选择&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> (loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成零钱通明细</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detail</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(details);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//完成收益入账</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">income</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;收益入账金额:&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line">        <span class="comment">//money 的值范围应该校验 -》 一会在完善</span></span><br><span class="line">        <span class="comment">//老师思路, 编程思想</span></span><br><span class="line">        <span class="comment">//找出不正确的金额条件，然后给出提示, 就直接return</span></span><br><span class="line">        <span class="keyword">if</span>(money &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收益入账金额 需要 大于 0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//退出方法，不在执行后面的代码。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找出正确金额的条件</span></span><br><span class="line">        balance += money;</span><br><span class="line">        <span class="comment">//拼接收益入账信息到 details</span></span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//获取当前日期</span></span><br><span class="line">        details += <span class="string">&quot;\n收益入账\t+&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;消费金额:&quot;</span>);</span><br><span class="line">        money = scanner.nextDouble();</span><br><span class="line">        <span class="comment">//money 的值范围应该校验 -》 一会在完善</span></span><br><span class="line">        <span class="comment">//找出金额不正确的情况</span></span><br><span class="line">        <span class="comment">//过关斩将 校验方式.</span></span><br><span class="line">        <span class="keyword">if</span>(money &lt;= <span class="number">0</span> || money &gt; balance) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的消费金额 应该在 0-&quot;</span> + balance);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;消费说明:&quot;</span>);</span><br><span class="line">        note = scanner.next();</span><br><span class="line">        balance -= money;</span><br><span class="line">        <span class="comment">//拼接消费信息到 details</span></span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//获取当前日期</span></span><br><span class="line">        details += <span class="string">&quot;\n&quot;</span> + note + <span class="string">&quot;\t-&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + sdf.format(date) + <span class="string">&quot;\t&quot;</span> + balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//用户输入4退出时，给出提示&quot;你确定要退出吗? y/n&quot;，必须输入正确的y/n ，</span></span><br><span class="line">        <span class="comment">// 否则循环输入指令，直到输入y 或者 n</span></span><br><span class="line">        <span class="comment">// 老韩思路分析</span></span><br><span class="line">        <span class="comment">// (1) 定义一个变量 choice, 接收用户的输入</span></span><br><span class="line">        <span class="comment">// (2) 使用 while + break, 来处理接收到的输入时 y 或者 n</span></span><br><span class="line">        <span class="comment">// (3) 退出while后，再判断choice是y还是n ,就可以决定是否退出</span></span><br><span class="line">        <span class="comment">// (4) 建议一段代码，完成一个小功能，尽量不要混在一起</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">//要求用户必须输入y/n ,否则就一直循环</span></span><br><span class="line">            System.out.println(<span class="string">&quot;你确定要退出吗? y/n&quot;</span>);</span><br><span class="line">            choice = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;y&quot;</span>.equals(choice) || <span class="string">&quot;n&quot;</span>.equals(choice)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第二个方案</span></span><br><span class="line"><span class="comment">//                        if(&quot;y&quot;.equals(choice)) &#123;</span></span><br><span class="line"><span class="comment">//                            loop = false;</span></span><br><span class="line"><span class="comment">//                            break;</span></span><br><span class="line"><span class="comment">//                        &#125; else if (&quot;n&quot;.equals(choice)) &#123;</span></span><br><span class="line"><span class="comment">//                            break;</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当用户退出while ,进行判断</span></span><br><span class="line">        <span class="keyword">if</span> (choice.equals(<span class="string">&quot;y&quot;</span>)) &#123;</span><br><span class="line">            loop = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smallchange.oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里我们直接调用SmallChangeSysOOP 对象，显示主菜单即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallChangeSysApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====hello公司====&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SmallChangeSysOOP</span>().mainMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·面向对象编程（基础）</title>
      <link href="/2024/09/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
      <url>/2024/09/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul><li><strong>类</strong> 是一个蓝图或者模板，用于创建对象。它定义了一组具有相同<strong>属性（变量&#x2F;成员变量&#x2F;field字段）</strong>和<strong>行为（方法）</strong>的对象。类是抽象的，它本身并不代表一个具体的实体。 </li><li><strong>对象</strong> 就是其中具体的实例，数据类型为<strong>引用类型</strong>。当你创建一个对象时，你实际上是以类为模板创建了一个具体的实体。对象拥有类定义中的属性（变量）和行为（方法）。</li><li>从 类 到 对象，可以称为 创建一个对象，也可以说 <strong>实例化</strong>一个对象，或者 把对象实例化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//实例化，cat是Cat的其中一个对象</span></span><br><span class="line">cat.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">cat.age = <span class="number">2</span>;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//实例化</span></span><br><span class="line">cat2.name = <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">cat2.age = <span class="number">1</span>;</span><br><span class="line">System.out.println(cat.name);<span class="comment">//访问属性</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;<span class="comment">//Cat是一个类</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性（变量-成员变量-field字段）"><a href="#属性（变量-成员变量-field字段）" class="headerlink" title="属性（变量&#x2F;成员变量&#x2F;field字段）"></a>属性（变量&#x2F;成员变量&#x2F;field字段）</h3><ul><li>属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)。</li><li>属性的定义语法同变量，示例：<strong>访问修饰符</strong>    属性类型   属性名;（控制属性的访问范围<br>有四种访问修饰符public, proctected, 默认, private ）</li><li>属性如果不赋值，有默认值，规则和数组一致。int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null</li></ul><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ol><li><p>先声明再创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat cat;<span class="comment">//声明对象</span></span><br><span class="line">cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//创建</span></span><br></pre></td></tr></table></figure></li><li><p>直接创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure></li></ol><h3 id="对象在内存中的存在形式"><a href="#对象在内存中的存在形式" class="headerlink" title="对象在内存中的存在形式"></a>对象在内存中的存在形式</h3><ul><li><p>在 <code>栈</code> 中cat指向一个地址，该地址对应 <code>堆</code> 中一个对应空间，若对象的属性属于<strong>基本数据类型</strong>则直接存储在该空间，若不属于（如String属于Class）则在该空间存储一个地址，对应指向<code>方法区</code>的<code>常量池</code>的对应空间。</p></li><li><p>Java内存结构</p><ul><li><p>栈：一般存放基本数据类型（局部变量）</p><p>堆：存放对象（如<code>Cat cat1 = new Cat()</code>，是在这里开辟的空间）</p><p>方法区：常量池（常量，比如字符串），类加载信息</p></li></ul></li><li><p>创建对象时，先加载类信息到<code>方法区</code>(属性和方法信息, 只会加载一次)</p></li><li><p>然后根据数据类型在<code>堆</code>中分配空间，进行<strong>默认初始化</strong>，</p></li><li><p>最后将地址赋给<strong>对象名&#x2F;对象引用</strong>cat，cat就指向对象</p></li><li><p>进行<strong>指定初始化</strong>， 比如<code>cat.name =”jack”</code>  <code>cat.age = 10</code></p></li></ul><p><img src="/img/%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E7%9A%84%E5%AD%98%E5%9C%A8%E5%BD%A2%E5%BC%8F.png" alt="象在内存的存在形"></p><ul><li>实际真正的对象是在堆中的内存空间及其相关数据</li><li>若把 cat赋给cat3&#x2F;让cat3指向cat <code>Cat cat3 = cat</code>，此时cat3指向相同的地址，也就有同一个对象空间</li></ul><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><ul><li>在某些情况下，我们要需要定义成员方法(简称方法)。比如人类:除了有一些属性外( 年龄，姓名..),我们人类还有一些行为比如:说话、跑步、学习。这时就要用成员方法才能完成。</li><li>方法不去调用就不会输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回数据类型 方法名(形参列表)&#123;<span class="comment">//参数列表是传递给方法的参数表。各个元素间以 , 分隔。</span></span><br><span class="line">方法体语句;<span class="comment">//为了实现某一功能的代码块</span></span><br><span class="line">returen 返回值;<span class="comment">//返回数据类型是 void 的场合，return语句不是必须的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法名必须是一个合法的标识符</span></span><br><span class="line"><span class="comment">//返回类型即返回值的类型。如果方法没有返回值，应声明为 void</span></span><br><span class="line"><span class="comment">//修饰符段可以有几个不同的修饰符。</span></span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>访问修饰符：作用是控制方法的使用范围。</p><ul><li>不写（默认访问控制范围）</li><li>public：公共</li><li>protected：受保护</li><li>private：私有</li></ul></li><li><p>返回数据类型：</p><ul><li><p>一个方法最多有一个返回值。要返回多个结果可以使用 <strong>数组</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] getSumAndSub(<span class="type">int</span> n1, <span class="type">int</span> n2)&#123;</span><br><span class="line">    <span class="type">int</span>[] resArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];<span class="comment">//创建一个数组</span></span><br><span class="line">    res[<span class="number">0</span>] = n1 + n2;</span><br><span class="line">    res[<span class="number">1</span>] = n1 - n2;</span><br><span class="line">    <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回类型为任意类型。包括 基本数据类型 和 引用数据类型。</p></li><li><p>如果方法要求有返回数据类型，则方法体中最后的执行语句必为 <code>return 值</code>，且返回类型必须和 return 的值一致或兼容（指可以转化）</p></li><li><p>如果 返回数据类型 为 <code>void</code>，则可以不写 <code>return</code> 语句</p></li></ul></li><li><p>方法名：</p><ul><li>遵循驼峰命名法，最好见名知意，表达出该功能的意思。</li></ul></li><li><p>参数列表（形参列表）：</p><ul><li>一个方法可以有 0 个参数，也可以有多个参数。参数间用 <code>,</code> 间隔。</li><li>参数类型可以为任意类型，包含 基本类型 和 引用类型。</li><li>调用带参数的方法时，一定对应着 参数列表 传入 相同类型 或 兼容类型 的参数。</li><li>方法定义时的参数称为 形式参数 ，简称 形参；方法调用时的参数（传入的参数）称为 实际参数，简称 实参。实参 与 形参 的类型、个数、顺序必须一致。</li></ul></li><li><p>方法体：</p><ul><li>写完成功能的具体语句。方法中不能再定义方法。即：方法不能嵌套定义。</li></ul></li><li><p>调用细节：</p><ul><li><p>同一个类中的方法调用，可以直接调用。</p></li><li><p>跨类的方法调用，需要创建新对象，然后再调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">       m1();<span class="comment">//同一个类中的方法调用，可以直接调用。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">C1</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C1</span>();</span><br><span class="line">   c.m2();<span class="comment">//跨类的方法调用，需要创建新对象，然后再调用方法。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="成员方法的作用"><a href="#成员方法的作用" class="headerlink" title="成员方法的作用"></a>成员方法的作用</h3><ol><li>提高代码的复用性</li><li>可以将实现的细节封装起来，然后供其他用户来调用即可</li></ol><h3 id="方法的调用机制"><a href="#方法的调用机制" class="headerlink" title="方法的调用机制"></a>方法的调用机制</h3><ol><li>程序执行到方法时，开辟一个独立的栈空间</li><li>方法执行完毕&#x2F;执行到return，就会返回到调用方法的地方，继续执行后面的代码</li><li>当main方法（栈）执行完毕，整个程序退出</li></ol><h3 id="成员方法传参机制"><a href="#成员方法传参机制" class="headerlink" title="成员方法传参机制"></a>成员方法传参机制</h3><p>Java 语言对对象采用的是 <strong>值传递</strong>，方法得到的总是那个传入对象的副本。</p><ul><li><p>方法不能修改<strong>基本数据类型</strong>的参数。基本数据类型传递的是一个值，形参不影响实参。</p></li><li><p>方法可以改变对象参数的状态。</p><p><strong>引用数据类型</strong>传递的是一个地址（引用传递），形参和实参指向同一空间，可以通过形参修改实参。</p><p>但改变那个形参地址指向的场合，实参的指向不会改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p.name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    p.age = <span class="number">10</span>;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    b.test(p);</span><br><span class="line">    System.out.println(p.age);<span class="comment">//输出10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Person p)</span>&#123;<span class="comment">//形参为Person类的对象</span></span><br><span class="line">    p = <span class="literal">null</span>;<span class="comment">//形参名对应的传入地址指向空，不影响本来的实参仍指向原位</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Copy</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p.name = <span class="string">&quot;Milan&quot;</span>;</span><br><span class="line">    p.age = <span class="number">100</span>;</span><br><span class="line">    <span class="type">MyTool</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTool</span>();</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> tool.copyPerson(p);<span class="comment">//将地址返回</span></span><br><span class="line">    <span class="comment">//p与p2是两个独立对象，属性相同</span></span><br><span class="line">    System.out.println(p == p2);<span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTool</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> Person <span class="title function_">copyPerson</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p2.name = p.name;</span><br><span class="line">    p2.age = p.age;</span><br><span class="line">    <span class="keyword">return</span> p2;<span class="comment">//返回类型为引用类型</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h2><ul><li>递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂问题,同时可以让代码变简洁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>&#123;<span class="comment">//斐波那契数列</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> (fib(n - <span class="number">1</span>)) + (feb(n - <span class="number">2</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>执行一个方法时，就创建一个新的受保护的独立 栈空间。</li><li>方法的局部变量是独立的，不会相互影响。</li><li>如果方法中使用的是引用变量，传递的是地址，就会共享数据。</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，会提示 <code>StackOverflowError</code> </li><li>当一个方法执行完毕，或遇到 <code>return</code> 就会返回。遵守谁调用就返回给谁。同时当方法执行完毕或返回时，该方法也执行完毕。</li></ol><h3 id="老鼠走迷宫"><a href="#老鼠走迷宫" class="headerlink" title="老鼠走迷宫"></a>老鼠走迷宫</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> Melody</span></span><br><span class="line"><span class="comment">*<span class="doctag">@version</span> v1.2.6</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//迷宫</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MazeOut</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//tools 方便后面调用方法。 inP 可以接收用户输入</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">tools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">inP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//提示并接收用户输入信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n输入迷宫宽度（至少为6）：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> inP.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n输入迷宫长度（至少为6）：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> inP.nextInt();  </span><br><span class="line">        <span class="comment">//若用户输入的长或宽超出范围，则将其重置为正常值</span></span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">6</span>)&#123;</span><br><span class="line">            x = <span class="number">6</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; <span class="number">110</span>)&#123;</span><br><span class="line">        x = <span class="number">110</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y &lt; <span class="number">6</span>)&#123;</span><br><span class="line">            y = <span class="number">6</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(y &gt; <span class="number">60</span>)&#123;</span><br><span class="line">        y = <span class="number">60</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n输入迷宫的困难度（请输入1 - 6的数字，数字越高越不容易获胜）：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">hard</span> <span class="operator">=</span> inP.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(hard == <span class="number">7</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n\n您选择了找点麻烦&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hard == <span class="number">8</span> || hard == <span class="number">9</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n\n您选择了给自己添堵&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n\t迷宫生产完毕\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置一个 count 值，记录步数。设为数组，以便数据通用。第一位记录当前值，第二位为最大值。</span></span><br><span class="line">        <span class="type">int</span>[] count = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">//调用方法，生成迷宫</span></span><br><span class="line">        <span class="type">char</span>[][] maze =<span class="keyword">new</span> <span class="title class_">char</span>[y][x];</span><br><span class="line">        tools.newMaze(maze.length, maze[<span class="number">0</span>].length, maze, hard);</span><br><span class="line">        <span class="comment">//调用方法，展示迷宫</span></span><br><span class="line">        tools.showMaze(maze);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//提示用户开始游戏</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n召唤一个探索者，来探索迷宫吧（随便输点什么吧）&quot;</span>);</span><br><span class="line">        <span class="comment">//输入 r 或 c 则采用递归方法，其余采用爬墙方法</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">inC</span> <span class="operator">=</span> inP.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(inC == <span class="string">&#x27;c&#x27;</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n您触发了迷宫之神的眷顾。&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(hard &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n迷宫之神眉头一皱，发现事情并不简单。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; <span class="number">12</span> || y &gt; <span class="number">12</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;看到地图这么大，迷宫之神悻悻而归。他只喜欢12格以下的地图。&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(inC == <span class="string">&#x27;r&#x27;</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n您引来了一群无畏小黄鸡。他们视死如归，一心想着寻找出口&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n我们找来了一只小蜘蛛。试试看吧。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//调用方法，解密</span></span><br><span class="line">        <span class="keyword">if</span>(inC == <span class="string">&#x27;r&#x27;</span> || inC == <span class="string">&#x27;c&#x27;</span>)&#123;</span><br><span class="line">            tools.outMazeRec(maze, inC, count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tools.outMaze(maze, count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>&#123;   </span><br><span class="line">    <span class="comment">//=======================================================================================    </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法 newMaze：让 n3 生成随机的 长 * 宽 = n1 * n2 的迷宫，其困难度为 n4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newMaze</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2, <span class="type">char</span>[][] n3, <span class="type">int</span> n4)</span>&#123;</span><br><span class="line">        <span class="comment">//构建迷宫墙壁，以&#x27;#&#x27;表示。并随机向其中填充石块，以&#x27;O&#x27;表示</span></span><br><span class="line">        <span class="comment">////墙壁是迷宫的 开头和结尾行 以及 每行的开头和结尾</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n2; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || i == n1 - <span class="number">1</span> ||j == <span class="number">0</span> || j == n2 - <span class="number">1</span>)&#123;</span><br><span class="line">                    n3[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//ran 是一个随机值，此处是概率生成挡路的石块&#x27;O&#x27;。其概率与 n4 值的大小正相关</span></span><br><span class="line">                    <span class="comment">//此外，若 n4（即用户输入的难度值 hard）超过范围，则按照 难度6 计算</span></span><br><span class="line">                    <span class="type">int</span> ran;</span><br><span class="line">                    <span class="keyword">if</span>(n4 &lt;= <span class="number">9</span> &amp;&amp; n4 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        ran = (<span class="type">int</span>)(Math.random() * (<span class="number">9</span> - n4) + <span class="number">1</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        ran = (<span class="type">int</span>)(Math.random() * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    n3[i][j] = (ran == <span class="number">1</span>) ? <span class="string">&#x27;O&#x27;</span> : <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成起点、终点，优化地形</span></span><br><span class="line">        n3[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        n3[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        n3[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        n3[n1 - <span class="number">2</span>][n2 - <span class="number">2</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        n3[n1 - <span class="number">3</span>][n2 - <span class="number">2</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        n3[n1 - <span class="number">2</span>][n2 - <span class="number">3</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法 showMaze：展示一个迷宫</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMaze</span><span class="params">(<span class="type">char</span>[][] n1)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n1[i].length; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span> + n1[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//=======================================================================================   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=======================================================================================</span></span><br><span class="line">    <span class="comment">//方法 outMazeRec：递归方法迷宫游戏入口。可以接入普通递归方法，或最短路径方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outMazeRec</span><span class="params">(<span class="type">char</span>[][] n1, <span class="type">char</span> n2, <span class="type">int</span>[] count)</span>&#123;</span><br><span class="line">        <span class="comment">//out：是否走出迷宫</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//将迷宫的起止位置记为通路</span></span><br><span class="line">        n1[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        n1[n1.length - <span class="number">2</span>][n1[<span class="number">0</span>].length -<span class="number">2</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="comment">//如果输入的是&#x27;c&#x27;，则采用最短路径法。反之采用普通递归方法</span></span><br><span class="line">        <span class="keyword">if</span>(n2 == <span class="string">&#x27;c&#x27;</span>)&#123;</span><br><span class="line">            out = outCountMaze(<span class="number">1</span>, <span class="number">1</span>, n1, count);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out = outMazeRecursion(<span class="number">1</span>, <span class="number">1</span>, n1, count);           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把迷宫起始位置重新标注出来</span></span><br><span class="line">        n1[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="comment">//判断是否解谜成功。如果成功，迷宫终点显示&#x27;V&#x27;，并展示步数，否则显示&#x27;F&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(out)&#123;</span><br><span class="line">            n1[n1.length - <span class="number">2</span>][n1[<span class="number">0</span>].length -<span class="number">2</span>] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">            showMaze(n1);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t YOU WIN！！！&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;通过路径为 &quot;</span> + count[<span class="number">1</span>] + <span class="string">&quot; 格&quot;</span>);    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n1[n1.length - <span class="number">2</span>][n1[<span class="number">0</span>].length -<span class="number">2</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">            showMaze(n1);</span><br><span class="line">            System.out.println(<span class="string">&quot;\t YOU LOSE&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//=======================================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=======================================================================================</span></span><br><span class="line">    <span class="comment">//方法 outMazeRecursion：迷宫游戏，普通递归方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">outMazeRecursion</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span>[][] n3, <span class="type">int</span>[] count)</span>&#123;</span><br><span class="line">        count[<span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(n3[n3.length - <span class="number">2</span>][n3[<span class="number">0</span>].length - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n3[y][x] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            n3[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(outMazeRecursion(y, x + <span class="number">1</span>, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outMazeRecursion(y + <span class="number">1</span>, x, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outMazeRecursion(y, x - <span class="number">1</span>, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outMazeRecursion(y - <span class="number">1</span>, x, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                count[<span class="number">1</span>]--;</span><br><span class="line">                n3[y][x] = <span class="string">&#x27;+&#x27;</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count[<span class="number">1</span>]--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count[<span class="number">1</span>]--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//=======================================================================================    </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=======================================================================================</span></span><br><span class="line">    <span class="comment">//方法 outCountMaze：迷宫游戏，最短路径法的入口。这个入口由普通递归法接入。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">outCountMaze</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span>[][] n, <span class="type">int</span>[] count)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先，创建一个里数组。该数组用于 part1，原数组用于 part2。</span></span><br><span class="line">        <span class="comment">//似乎没必要作此设计。但我还是予以保留。</span></span><br><span class="line">        <span class="type">char</span>[][] inMaze = <span class="keyword">new</span> <span class="title class_">char</span>[n.length][n[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                inMaze[i][j] = n[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先进行 part1，然后必定进行 part2。因为 part1 总会返回一个 false</span></span><br><span class="line">        <span class="keyword">if</span>(countMazeRec(y, x, inMaze, count) || <span class="literal">true</span>)&#123;</span><br><span class="line">            count[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> outMazeRecC(y, x, n, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 countMazeRec：迷宫游戏，最短路径法，part1</span></span><br><span class="line">    <span class="comment">//该方法是先统计最短路径。最终总会返回 false</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">countMazeRec</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span>[][] n3, <span class="type">int</span>[] count)</span>&#123;</span><br><span class="line">        count[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(y == n3.length - <span class="number">2</span> &amp;&amp; x == n3[<span class="number">0</span>].length - <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[<span class="number">0</span>] &lt; count[<span class="number">1</span>] || count[<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                count[<span class="number">1</span>] = count[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n3[y][x] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            n3[y][x] = <span class="string">&#x27;.&#x27;</span>;           </span><br><span class="line">            <span class="keyword">if</span>(countMazeRec(y, x + <span class="number">1</span>, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(countMazeRec(y + <span class="number">1</span>, x, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(countMazeRec(y, x - <span class="number">1</span>, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(countMazeRec(y - <span class="number">1</span>, x, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                n3[y][x] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                count[<span class="number">0</span>]--;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count[<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count[<span class="number">0</span>]--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法 outMazeRecC：迷宫游戏，最短路径法，part2</span></span><br><span class="line">    <span class="comment">//该方法是在 part1 统计完最短路径后，按最短路径走出迷宫，并绘制路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">outMazeRecC</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span>[][] n3, <span class="type">int</span>[] count)</span>&#123;</span><br><span class="line">        count[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(y == n3.length - <span class="number">2</span> &amp;&amp; x == n3[<span class="number">0</span>].length - <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[<span class="number">0</span>] &lt;= count[<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n3[n3.length - <span class="number">2</span>][n3[<span class="number">0</span>].length - <span class="number">2</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                count[<span class="number">0</span>]--;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n3[y][x] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            n3[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(outMazeRecC(y, x + <span class="number">1</span>, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outMazeRecC(y + <span class="number">1</span>, x, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outMazeRecC(y, x - <span class="number">1</span>, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(outMazeRecC(y - <span class="number">1</span>, x, n3, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                n3[y][x] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                count[<span class="number">0</span>]--;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count[<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//=======================================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=======================================================================================</span></span><br><span class="line">    <span class="comment">//方法 outMaze：爬墙方法迷宫游戏入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outMaze</span><span class="params">(<span class="type">char</span>[][] n1, <span class="type">int</span>[] count)</span>&#123;</span><br><span class="line">        <span class="comment">//boolean out：记录是否走出迷宫</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//角色光标 m</span></span><br><span class="line">        n1[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一系列变量，后面解释用法</span></span><br><span class="line">        <span class="comment">//创建 角色坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//创建 辅助坐标 及 方向字符。初始方向为右。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">xi</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">yi</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="string">&#x27;r&#x27;</span>;  </span><br><span class="line">        <span class="comment">//创建 里迷宫，标记起止点。</span></span><br><span class="line">        <span class="type">char</span>[][] inMaze = <span class="keyword">new</span> <span class="title class_">char</span>[n1.length][n1[<span class="number">0</span>].length];</span><br><span class="line">        inMaze[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        inMaze[n1.length - <span class="number">2</span>][n1[<span class="number">0</span>].length - <span class="number">2</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//开始走迷宫。</span></span><br><span class="line">        <span class="comment">//如果一个迷宫有出路，则沿着一侧的墙壁走就一定能走到出路。以下方法就是基于这个原理。</span></span><br><span class="line">        <span class="comment">//角色坐标 y,x 是角色所在的位置坐标。辅助坐标 yi，xi 是角色靠近的墙壁坐标。</span></span><br><span class="line">        <span class="comment">//dir 代表角色此时的朝向。只要角色按照墙壁延申的方向向前，就一定不会迷路。</span></span><br><span class="line">        <span class="comment">//里迷宫的大小和真迷宫相同，坐标也一一对应。目的是为了记录数据，这些数据不会被用户看到。</span></span><br><span class="line">        <span class="comment">//里迷宫记载了 起始点 和 终点 的位置。如角色回到起点，则必定失败。到达终点则成功。</span></span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断 是否走出迷宫。如若是，则展示迷宫，记录脱出为真，并退出寻路</span></span><br><span class="line">            <span class="keyword">if</span>(inMaze[y][x] == <span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">                n1[y][x] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">                n1[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                showMaze(n1);</span><br><span class="line">                out = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过爬墙方式试图走出迷宫</span></span><br><span class="line">            <span class="comment">//这是方向朝右时的情况</span></span><br><span class="line">            <span class="keyword">if</span>(dir == <span class="string">&#x27;r&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//如果角色面对墙壁，意味着走到了墙角，则角色坐标不变，调整墙壁坐标，并转向</span></span><br><span class="line">                <span class="keyword">if</span>(n1[y][x + <span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span> || n1[y][x + <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    dir = yi &gt; y ? <span class="string">&#x27;u&#x27;</span> : <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                    yi = y;</span><br><span class="line">                    xi = x + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//如果面前有路，且墙壁延伸，则前进</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n1[yi][xi + <span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span> || n1[yi][xi + <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    x++;</span><br><span class="line">                    xi++;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>]++;</span><br><span class="line">                <span class="comment">//如果面前有路，但墙壁不延伸，则是遇到了转角。角色移动，转向，但墙壁坐标不变</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dir = yi &gt; y ? <span class="string">&#x27;d&#x27;</span> : <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    n1[y][x + <span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    y = yi;</span><br><span class="line">                    x = xi + <span class="number">1</span>;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>] += <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//这是方向朝左的情况</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dir == <span class="string">&#x27;l&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n1[y][x - <span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span> || n1[y][x - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    dir = yi &gt; y ? <span class="string">&#x27;u&#x27;</span> : <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">                    yi = y;</span><br><span class="line">                    xi = x - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n1[yi][xi - <span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span> || n1[yi][xi - <span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    x--;</span><br><span class="line">                    xi--;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>]++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dir = yi &gt; y ? <span class="string">&#x27;d&#x27;</span> : <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    n1[y][x - <span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    y = yi;</span><br><span class="line">                    x = xi - <span class="number">1</span>;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>] += <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//这是方向朝下的情况</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dir == <span class="string">&#x27;d&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n1[y + <span class="number">1</span>][x] == <span class="string">&#x27;#&#x27;</span> || n1[y + <span class="number">1</span>][x] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    dir = xi &lt; x ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">                    yi = y + <span class="number">1</span>;</span><br><span class="line">                    xi = x;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n1[yi + <span class="number">1</span>][xi] == <span class="string">&#x27;#&#x27;</span> || n1[yi + <span class="number">1</span>][xi] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    y++;</span><br><span class="line">                    yi++;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>]++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dir = xi &lt; x ? <span class="string">&#x27;l&#x27;</span> : <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    n1[y + <span class="number">1</span>][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    y = yi + <span class="number">1</span>;</span><br><span class="line">                    x = xi;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>] += <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//这是方向朝上的情况</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dir == <span class="string">&#x27;u&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(n1[y - <span class="number">1</span>][x] == <span class="string">&#x27;#&#x27;</span> || n1[y - <span class="number">1</span>][x] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    dir = xi &lt; x ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">                    yi = y - <span class="number">1</span>;</span><br><span class="line">                    xi = x;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n1[yi - <span class="number">1</span>][xi] == <span class="string">&#x27;#&#x27;</span> || n1[yi - <span class="number">1</span>][xi] == <span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    y--;</span><br><span class="line">                    yi--;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>]++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dir = xi &lt; x ? <span class="string">&#x27;l&#x27;</span> : <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    n1[y - <span class="number">1</span>][x] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    y = yi - <span class="number">1</span>;</span><br><span class="line">                    x = xi;</span><br><span class="line">                    n1[y][x] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    count[<span class="number">1</span>] += <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断 是否回到起点。如若是，则一定是迷宫无解。展示迷宫并退出寻路</span></span><br><span class="line">            <span class="keyword">if</span>(inMaze[y][x] == <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">                showMaze(n1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="keyword">if</span>(out)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t YOU WIN！！！\n\t您的步数为：&quot;</span> + count[<span class="number">1</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t YOU LOSE&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八皇后"><a href="#八皇后" class="headerlink" title="八皇后"></a>八皇后</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EightQueen</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">tools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        <span class="type">char</span>[][] chess = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//调用方法，建立棋盘</span></span><br><span class="line">        tools.buildChess(chess);</span><br><span class="line">        <span class="comment">//调用方法，开始游戏</span></span><br><span class="line">        tools.eightQueen(chess);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="comment">//buildChess：建立一个新棋盘。该棋盘白色格子用&#x27; &#x27;表示，黑色格子用&#x27;#&#x27;表示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildChess</span><span class="params">(<span class="type">char</span>[][] chess)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chess.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; chess[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                chess[i][j] = ((i + j) % <span class="number">2</span> == <span class="number">0</span>) ? <span class="string">&#x27; &#x27;</span> : <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//eightQueen：八皇后游戏的接入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eightQueen</span><span class="params">(<span class="type">char</span>[][] chess)</span>&#123;</span><br><span class="line">    <span class="comment">//建立 里棋盘 inward 及 计数数组 count。里棋盘用于计算问题，原棋盘输出给用户看。</span></span><br><span class="line">    <span class="comment">//计数 count 使用数组，这样其数据在所有方法都能通用</span></span><br><span class="line">        <span class="type">char</span>[][] inward = <span class="keyword">new</span> <span class="title class_">char</span>[chess.length][chess[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">int</span>[] count = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line">        <span class="comment">//进行游戏。因为穷举所有方法，最后返回的一定是 false。反正我们不在意。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFinished</span> <span class="operator">=</span> gameEQS(<span class="number">0</span>, <span class="number">0</span>, chess, inward, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//gameEQS：八皇后游戏的基本方法</span></span><br><span class="line">    <span class="comment">//八皇后游戏方法。y 代表当前位置的纵坐标，x 是横坐标。chess 是棋盘，inward 是里棋盘，count 是计数数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">gameEQS</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span>[][] chess, <span class="type">char</span>[][] inward, <span class="type">int</span>[] count)</span>&#123;</span><br><span class="line">        <span class="comment">//当 y 超出棋盘 时，显然已经完成八皇后。</span></span><br><span class="line">        <span class="comment">//由于要进行穷举，此时我们计数并输出棋盘，然后返回 false 使其继续计算</span></span><br><span class="line">        <span class="keyword">if</span>(y == inward.length)&#123;</span><br><span class="line">            count[<span class="number">0</span>]++;</span><br><span class="line">            System.out.println();</span><br><span class="line">            gameEQS2(chess, inward, count);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//当 x 超出棋盘 时，显然棋盘该列已经无合法放置位置。我们返回 false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x == inward[<span class="number">0</span>].length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//gameEQS1，这个方法是查看该格子是否是合法放置位置。如若是，返回 true，而且在该位置放置棋子&#x27;Q&#x27;</span></span><br><span class="line">        <span class="comment">//当这个位置合法，我们进入下一行，从头开始判断。</span></span><br><span class="line">        <span class="comment">//如果后面的判断为 false，我们就拿掉这枚棋子。如果后面判断为 true 说明我们找到了一个方法。</span></span><br><span class="line">        <span class="comment">//特别地，由于代码目前是穷举模式，我想我们永远不会在此输出 true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(gameEQS1(y, x, inward))&#123;</span><br><span class="line">            <span class="keyword">if</span>(gameEQS(y + <span class="number">1</span>, <span class="number">0</span>, chess, inward, count))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                inward[y][x] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果代码进行到这个位置，证明我们所在的格子不适合放置棋子。我们只好去看看下一格如何。</span></span><br><span class="line">        <span class="keyword">return</span> gameEQS(y, x + <span class="number">1</span>, chess, inward, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//gameEQS1：该方法是输入一个坐标，并输入里棋盘地址，在里棋盘上查看该位置是否合法</span></span><br><span class="line">    <span class="comment">//什么是合法的位置：就是该坐标的 同列、同行、同斜线 没有别的棋子</span></span><br><span class="line">    <span class="comment">//如果是合法位置，我们放置一个棋子，并返回 true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">gameEQS1</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> x, <span class="type">char</span>[][] inward)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inward.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; inward[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == x || i == y || i - j == y - x || i + j == y + x)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(inward[i][j] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        inward[y][x] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//gameEQS2：这个方法是把当前 里棋盘 的棋子放置到棋盘上，输出棋盘 并 输出计数。</span></span><br><span class="line">    <span class="comment">//在输出完成后，会清空棋盘。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gameEQS2</span><span class="params">(<span class="type">char</span>[][] chess, <span class="type">char</span>[][] inward,<span class="type">int</span>[] count)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chess.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; chess[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(inward[i][j] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                    chess[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span> + chess[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span> + count[<span class="number">0</span>] + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        buildChess(chess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//gameEQSDebug</span></span><br><span class="line">    <span class="comment">//输出里棋盘。测试用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gameEQSDebug</span><span class="params">(<span class="type">char</span>[][] inward)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inward.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; inward[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span> + inward[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载overload"><a href="#重载overload" class="headerlink" title="重载overload"></a>重载overload</h2><ul><li>Java 中允许同一类中，多个同名方法的存在，但要求 形参列表 不一致。</li><li>减轻了起名和记名的麻烦。</li></ul><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li>方法名：必须相同</li><li>形参列表：必须不同（参数的类型、个数、顺序，这其中至少一个不同）</li><li>返回值：无要求</li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li><p>Java 允许将同一个类中多个 同名 同功能 但 参数个数不同 的方法，封装成一个方法。</p></li><li><p>语法：<code>访问修饰符 返回类型 方法名（数据类型... 形参名）&#123;代码块;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameter01</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int...接收可变参数，类型为int，使用是当作数组使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;接收的参数个数：&quot;</span> + nums.length);</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      res += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h3><ol><li><p>可变参数的实参可以为0或任意多个</p></li><li><p>可变参数的实参可以为数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameterDetail</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">    <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">    t1.f1(arr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;长度=&quot;</span> + nums.length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可变参数的本质为数组</p></li><li><p>可变参数可以和普通类型的参数一起放在形参列表，但要放在最后</p></li><li><p>一个形参列表中只能出现一个可变参数</p></li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li><p>在 Java 编程中，主要的变量就是 属性（成员变量）和 局部变量。</p></li><li><p>我们说的 局部变量 一般是指在成员方法中定义的变量。</p></li><li><p>作用域的分类</p><ul><li>全局变量：也就是 属性，作用域为整个类体</li><li>局部变量：除了属性外的其他变量。作用域为定义它的代码块中</li></ul></li><li><p>全局变量（属性）可以不赋值直接使用，因为有默认值。局部变量必须赋值使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="comment">//全局变量：也就是属性，作用域为整个类体Cat 类：cry eat 等方法使用属性</span></span><br><span class="line">    <span class="comment">//属性在定义时，可以直接赋值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//指定的值是10</span></span><br><span class="line">    <span class="comment">//全局变量(属性)可以不赋值，直接使用，因为有默认值，</span></span><br><span class="line">    <span class="type">double</span> weight; <span class="comment">//默认值是0.0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//局部变量必须赋值后，才能使用，因为没有默认值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;北京的猫&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;num=&quot;</span> + num);</span><br><span class="line">        System.out.println(<span class="string">&quot;address=&quot;</span> + address);</span><br><span class="line">        System.out.println(<span class="string">&quot;weight=&quot;</span> + weight);<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h3><ol><li><p>属性 和 局部变量 可以重名，访问时遵循就近原则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//细节: 属性可以加修饰符(public protected private..)</span></span><br><span class="line">    <span class="comment">// 局部变量不能加修饰符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//细节属性和局部变量可以重名，访问时遵循就近原则</span></span><br><span class="line">        <span class="comment">//String name = &quot;king&quot;;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;say() name=&quot;</span> + name);<span class="comment">//输出jack，若无上面注释则输出king</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在同一作用域中，两个局部变量不能重名</p></li><li><p>属性 的生命周期较长。其伴随对象的创建而创建，伴随对象的销毁而销毁。</p><p>局部变量 生命周期较短。其伴随代码块的执行而创建，伴随代码块的结束而销毁。</p></li><li><p>全局变量&#x2F;属性 可以被本类使用，也可以被其他类（通过对象）使用。</p><p>局部变量 只能被本类的对应方法中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">    t1.test(); <span class="comment">//第1 种跨类访问对象属性的方式</span></span><br><span class="line">    t1.test2(p1);<span class="comment">//第2 种跨类访问对象属性的方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="comment">//全局变量/属性：可以被本类使用，或其他类使用（通过对象调用)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(p1.name);<span class="comment">//jack</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        System.out.println(p.name);<span class="comment">//jack</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全局变量&#x2F;属性 <strong>可以加</strong> 修饰符</p><p>局部变量 <strong>不能加</strong> 修饰符</p></li></ol><h2 id="构造器-构造方法"><a href="#构造器-构造方法" class="headerlink" title="构造器&#x2F;构造方法"></a>构造器&#x2F;构造方法</h2><ul><li>构造方法又叫构造器（constructor），是类的一种特殊的方法。它的主要作用是完成对新对象的初始化。</li><li>语法：<code>[修饰符] 方法名(形参列表)&#123;方法体&#125;</code><ul><li>构造器的修饰符可以是默认。也可以是别的</li><li>参数列表 规则同 成员方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//(String pName, int pAge) 是构造器形参列表，规则和成员方法一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器被调用~~ 完成对象的属性初始化&quot;</span>);</span><br><span class="line">        name = pName;</span><br><span class="line">        age = pAge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节-5"><a href="#细节-5" class="headerlink" title="细节"></a>细节</h3><ol><li>构造器本质也是方法。所以，可以 构造器重载。</li><li>构造器方法名 和 类名 相同</li><li>构造器无返回值,也不能写void</li><li>构造器是完成<strong>新对象的初始化</strong>，而不是创建</li><li>创建对象时，系统<strong>自动调用</strong>构造器</li><li>如果程序员没有定义构造器，系统会自动给类生成一个无参构造器（默认构造器）</li><li>一旦定义了自己的构造器，就不能用无参构造器了。除非显式的定义一个无参构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;king&quot;</span>, <span class="number">40</span>);<span class="comment">//第1 个构造器</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>);<span class="comment">//第2 个构造器</span></span><br><span class="line">    <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//使用的是默认的无参构造器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="comment">//如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器(也叫默认构造器)</span></span><br><span class="line">    <span class="comment">//一旦定义了自己的构造器,默认的构造器就覆盖了，就不能再使用默认的无参构造器，</span></span><br><span class="line">    <span class="comment">//除非显式的定义一下,即: Dog()&#123;&#125; 写(这点很重要)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String dName)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    Dog() &#123; </span><br><span class="line">        <span class="comment">//显式的定义一下无参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;<span class="comment">//默认0</span></span><br><span class="line">    <span class="comment">//第1 个构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">    name = pName;</span><br><span class="line">    age = pAge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第2 个构造器, 只指定人名，不需要指定年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName)</span> &#123;</span><br><span class="line">    name = pName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象创建的流程再分析"><a href="#对象创建的流程再分析" class="headerlink" title="对象创建的流程再分析"></a>对象创建的流程再分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Amy&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span>&#123;</span><br><span class="line">name = pName;</span><br><span class="line">age = pAge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>加载 类信息（方法区,只会加载一次）</p></li><li><p>在 堆 中开辟空间（地址）</p></li><li><p>完成对象初始化</p><ul><li><p>首先<strong>默认初始化</strong>。<code>age = 0; name = null</code></p></li><li><p>之后<strong>显式初始化</strong>。<code>age = 20; name = null</code></p><p>其中，显式初始化和代码块初始化按编写的先后顺序依次进行。</p></li><li><p>之后构造器的初始化。<code>age = 10; name = &quot;Amy&quot;</code></p></li></ul></li><li><p>把对象在 堆 中的 地址，返回给 <code>p1</code></p></li></ol><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><ul><li>JVM 会给每个对象分配 this 代表当前对象。相当于在 堆 中，this 指向自己（对象）</li><li>在类定义的方法中，Java 会自动用 this 关键字把所有变量和方法引用结合在一起。</li><li>遇到有同名的局部变量的场合，需要程序员加入 this 关键字进行区分。不加入 this 关键字的场合，Java 遵循就近原则。</li><li>this隐藏在堆中对应空间，并指向该空间自己</li></ul><h3 id="细节-6"><a href="#细节-6" class="headerlink" title="细节"></a>细节</h3><ol><li><p><code>this</code> 关键字可以用来访问本类的属性、方法、构造器</p></li><li><p><code>this</code> 用于区分当前类的 属性 和 局部变量</p></li><li><p>访问本类中成员方法的语法：<code>this.方法名</code></p></li><li><p>访问构造器的语法：<code>this(参数列表);</code></p><p>注意：只能在<strong>构造器中</strong>访问另一个构造器。而且，如果有这个语法，必须放置在<strong>第一条语句</strong>。</p><p>如：在默认构造器中<code>this(&quot;jack&quot;,100)</code>,可以在调用默认构造器时赋值</p></li><li><p><code>this</code> 不能在类定义的 外部 使用，只能在类定义的 <strong>方法中</strong> 使用</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·数组、排序和查找</title>
      <link href="/2024/09/11/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%95%B0%E7%BB%84%E3%80%81%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/"/>
      <url>/2024/09/11/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%95%B0%E7%BB%84%E3%80%81%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>数组可以存放多个<strong>同一类型</strong>的数据，实现对数据的统一管理。数组也是一种数据类型，是引用类型。数组型数据是 对象（Object）。</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型与引用类型，但是不能混用。</p></li><li><p>数组创建后，如果没有赋值，有默认值：<code>int(0)</code>，<code>short(0)</code>，<code>byte(0)</code>，<code>long(0L)</code>，<code>float(0.0F)</code>，<code>double(0.0)</code>，<code>char(\u0000)</code>，<code>boolean(false)</code>，<code>String(null)</code>，<code>Object(null)</code>。</p></li><li><p>通过下标来访问数组的元素，下标从0开始。且必须在有效下标范围内使用，最小0，最大长度减一。</p></li><li><p>double nums[], 表示是double类型的数组， 数组名nums。</p></li></ul><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>使用数组的步骤： 1.声明数组并开辟空间 </p><p>​2.给数组各个元素赋值 </p><p>​3.使用数组</p><ul><li><p>构造方式1：动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];<span class="comment">// 创建了数组 name，存放5个int</span></span><br><span class="line"><span class="type">int</span> ints2[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];<span class="comment">// 这种写法也行</span></span><br><span class="line">ints[<span class="number">2</span>] = <span class="number">15</span>;<span class="comment">// 访问数组第3个数</span></span><br></pre></td></tr></table></figure></li><li><p>构造方式2：动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] chars;<span class="comment">// 先声明数组 name，此时数组是 null</span></span><br><span class="line">chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];<span class="comment">// 分配内存空间，可以存放数据了</span></span><br><span class="line">chars[<span class="number">1</span>] = <span class="string">&#x27;\t&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>构造方式3：静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span>[] bools = &#123;<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;;</span><br><span class="line">String[] strs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;第一个String&quot;</span>, <span class="string">&quot;第二个String&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>确切知道数组每个元素的场合可以用这个方法。</p></li></ul><p><strong>数组的使用方法：</strong></p><ul><li><p>访问数组元素：<code>数组名[元素下标]</code></p><p>其中，元素下标从 0 开始编号。如：访问 strs 数组的第一个元素 <code>strs[0]</code></p></li><li><p>数组长度：<code>数组名.length</code></p><p>是一个 int 值。不能通过试图改变该值来改变数组容量</p></li></ul><p><strong>使用for遍历所有元素并求最大值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,-<span class="number">1</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];<span class="comment">//假定第一个元素就是最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;<span class="comment">//从下标1 开始遍历arr</span></span><br><span class="line"><span class="keyword">if</span>(max &lt; arr[i]) &#123;<span class="comment">//如果max &lt; 当前元素</span></span><br><span class="line">max = arr[i]; <span class="comment">//把max 设置成当前元素</span></span><br><span class="line">maxIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们遍历这个数组arr 后, max 就是真正的最大值，maxIndex 最大值下标</span></span><br><span class="line">System.out.println(<span class="string">&quot;max=&quot;</span> + max + <span class="string">&quot; maxIndex=&quot;</span> + maxIndex);</span><br></pre></td></tr></table></figure><h4 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h4><ul><li><p>基本数据类型赋值，赋值方式是<strong>值拷贝</strong>，这个值就是具体的数据。<br><code>int n1 = 2;</code> <code> int n2 = n1;</code>，n2的值不会影响n1的值</p></li><li><p>数组在默认情况下是引用传递，赋的值是地址。（<strong>引用拷贝</strong>）</p><p>因为数组在JVM的<code>栈</code>中指向一个<code>地址</code>，地址对应<code>堆</code>里的一个<code>数据空间</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = arr1;<span class="comment">//此时arr2指向与arr1相同的地址</span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;<span class="comment">//此时arr1[0] = 10</span></span><br></pre></td></tr></table></figure><ul><li>以下方式拷贝则数据空间相互独立，<strong>数组拷贝</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array1 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[array1.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; array1.length;i++) &#123;</span><br><span class="line">    array2[i] = array1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h4><ul><li><p>方式1：在原数组内部反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">//每次交换时，对应的下标是arr[i] 和arr[arr.length - 1 -i]</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length; <span class="comment">//计算数组的长度</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">temp = arr[len - <span class="number">1</span> - i];<span class="comment">//保存</span></span><br><span class="line">arr[len - <span class="number">1</span> - i] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2：逆序赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建一个新的数组arr2 ,大小arr.length</span></span><br><span class="line"><span class="comment">//逆序遍历arr ,将每个元素拷贝到arr2 的元素中</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">arr2[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr2是arr的反转版本，为了让arr本身反转</span></span><br><span class="line"><span class="comment">//让arr 指向arr2 数据空间, 此时arr 原来的数据空间就没有变量引用会被当做垃圾，销毁</span></span><br><span class="line">arr = arr2;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h4 id="数组添加-扩容"><a href="#数组添加-扩容" class="headerlink" title="数组添加&#x2F;扩容"></a>数组添加&#x2F;扩容</h4><ul><li>当数组达到上限时，创建一个容量更大的新数组。将旧数组的元素依次放入，之后替换旧数组。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//遍历arr 数组，依次将arr 的元素拷贝到arrNew 数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arrNew[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入你要添加的元素&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">addNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">    <span class="comment">//把addNum 赋给arrNew 最后一个元素</span></span><br><span class="line">    arrNew[arrNew.length - <span class="number">1</span>] = addNum;</span><br><span class="line">    <span class="comment">//让arr 指向arrNew,</span></span><br><span class="line">    arr = arrNew;</span><br><span class="line">    <span class="comment">//问用户是否继续</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否继续添加y/n&quot;</span>);</span><br><span class="line">    <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>( key == <span class="string">&#x27;n&#x27;</span>) &#123; <span class="comment">//如果输入n ,就结束</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)<span class="comment">//使用dowhile多次扩容</span></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>排序是将多个数据，依指定的顺序进行排列的过程。</li></ul><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><ul><li>指将需要处理的所有数据都加载到内部存储器中进行排序。</li><li>包括(交换式排序法、选择式排序法和插入式排序法)；</li></ul><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3><ul><li>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。</li><li>包括(合并排序法和直接合并排序法)。</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>基本思想是：对<code>待排序序列</code>从后向前（从下标较大的元素开始）遍历，依次比较相邻元素的值，若发现前数大于后数则交换，使值较大的元素逐渐从前移向后部。</li><li>每一轮排序可以确定一个数的位置，一共进行n-1次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>, -<span class="number">1</span>, <span class="number">30</span>, <span class="number">200</span>, -<span class="number">110</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//用于辅助交换的变量</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;<span class="comment">//外层循环是length - 1 次</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;<span class="comment">//4 次比较-3 次-2 次-1 次</span></span><br><span class="line">    <span class="comment">//如果前面的数&gt;后面的数，就交换</span></span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>在 Java 中，常用的查找有 2 种：</p><ul><li>顺序查找（遍历）</li><li>二分查找</li></ul><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>&#125;;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">findName</span> <span class="operator">=</span> myScanner.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组，逐一比较，如果有，则提示信息，并退出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//一个经典的方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">    <span class="comment">//比较字符串比较equals, 如果要找到名字就是当前元素</span></span><br><span class="line">    <span class="keyword">if</span>(findName.equals(names[i])) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜你找到&quot;</span> + findName);</span><br><span class="line">        System.out.println(<span class="string">&quot;下标为= &quot;</span> + i);</span><br><span class="line">        <span class="comment">//把i 保存到index</span></span><br><span class="line">        index = i;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123; <span class="comment">//没有进入到if语句块</span></span><br><span class="line">System.out.println(<span class="string">&quot;sorry ,没有找到&quot;</span> + findName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul><li>定义形式：<code>int[ ][ ]</code></li><li>二维数组实际是由多个一维数组组成的，它的各个元素的长度可以相同，也可以不同，称为列数不等<br>的二维数组。</li><li>数组是一个对象，所以二维数组的元素存放的是一维数组的地址。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] ints;<span class="comment">// 声明一个二维数组</span></span><br><span class="line"><span class="type">int</span>[] ints2[];<span class="comment">// 也能这样声明</span></span><br><span class="line"><span class="type">int</span> ints3[][];<span class="comment">// 这样也行</span></span><br><span class="line"><span class="type">int</span>[] x,y[];<span class="comment">// 声明了两个数组，一个是 int[] x 一个是 int[][] y</span></span><br><span class="line"><span class="comment">// 把 int[] 视作一个类型，就能很好地理解这个写法</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%BD%A2%E5%BC%8F.png" alt="维数组内存形"></p><p><strong>元素遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i][j]; j++)&#123;</span><br><span class="line">        Syatem.out.println(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法</strong></p><ul><li><p>构造方法1：动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] many_ints = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]<span class="comment">// 创建 有3个 包含4个元素的一维数组 的二维数组</span></span><br></pre></td></tr></table></figure></li><li><p>构造方法2：动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span>[][] many_doubles;<span class="comment">// 先声明变量</span></span><br><span class="line">many_doubles = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">3</span>][<span class="number">4</span>];<span class="comment">// 再开辟空间</span></span><br></pre></td></tr></table></figure></li><li><p>构造方法3：动态初始化-列数不确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[][] many_chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">3</span>][];<span class="comment">// 创建一个三行列数不确定的二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    many_chars[i] = <span class="keyword">new</span> <span class="title class_">char</span>[i + <span class="number">1</span>];<span class="comment">// 给每个一维数组依次开辟空间，否则位置上是null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法4：静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] many_many = &#123;&#123;<span class="number">1</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">10</span>, <span class="number">2</span>&#125;, &#123;<span class="number">95</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>二维数组使用方法：</strong></p><ul><li><code>ints.length</code>：该二维数组的长度，这里是 3</li><li><code>ints[0]</code>：该二维数组的第一个子数组</li><li><code>ints[0].length</code>：该二维数组的第一个子数组的长度，这里是 4</li><li><code>ints[1][0]</code>：该二维数组第二个子数组的第一个元素的值，这里是 21</li></ul><p><strong>细节</strong></p><ol><li><p>一维数组的声明方式有:</p><p><code>int[] x</code> 或者<code>int x[]</code></p></li><li><p>二维数组的声明方式有:</p><p><code>int[][] y </code>或者<code>int[] y[] </code>或者<code>int y[][]</code></p></li></ol><p><strong>杨辉三角</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//规律</span><br><span class="line">//1.第一行有1 个元素, 第n 行有n 个元素</span><br><span class="line">//2. 每一行的第一个元素和最后一个元素都是1</span><br><span class="line">//3. 从第三行开始, 对于非第一个元素和最后一个元素的元素的值. arr[i][j]</span><br><span class="line">arr[i][j] = arr[i-1][j] + arr[i-1][j-1]; //必须找到这个规律</span><br><span class="line"></span><br><span class="line">int[][] yangHui = new int[12][];</span><br><span class="line">for(int i = 0; i &lt; yangHui.length; i++) &#123;//遍历yangHui 的每个元素</span><br><span class="line">    //给每个一维数组(行) 开空间</span><br><span class="line">    yangHui[i] = new int[i+1];</span><br><span class="line">    //给每个一维数组(行) 赋值</span><br><span class="line">    for(int j = 0; j &lt; yangHui[i].length; j++)&#123;</span><br><span class="line">        //每一行的第一个元素和最后一个元素都是1</span><br><span class="line">        if(j == 0 || j == yangHui[i].length - 1) &#123;</span><br><span class="line">        yangHui[i][j] = 1;</span><br><span class="line">&#125; else &#123;//中间的元素</span><br><span class="line">yangHui[i][j] = yangHui[i-1][j] + yangHui[i-1][j-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·程序控制结构</title>
      <link href="/2024/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2024/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><ul><li>程序从上到下逐行执行，中间没有任何判断和跳转（默认的控制顺序）</li><li>Java 定义变量时采用合法的前向引用 (先定义再使用)</li></ul><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><h3 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h3><ul><li>基本语法，如果{}内只有一条语句，可省{}（但建议写上）</li><li>条件表达式为Ture时，执行{}内代码，否则反之</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行代码块；（可以有多条语句）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line"> 执行代码块;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> 执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当条件表达式为 <code>ture</code>，就会执行 <code>&#123;执行代码块1;&#125;</code>；如果为 <code>false</code> 则执行 <code>&#123;执行代码块2;&#125;</code>。</li></ul><h3 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line"> 执行代码块;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line"> 执行代码块<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line"> 执行代码块<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"> 执行代码块n；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只有上一个条件不成立时才会判断下一个条件。</li><li>多分支可以没有 <code>else</code>。此时如果条件都不成立，则无执行入口。</li><li>若有<code>else</code>,若所有条件表达式都不成立，则默认执行else中代码块。</li></ul><h3 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h3><ul><li><p>在一个分支结构中又完整的嵌套了另一个完整的分支结构</p></li><li><p>里面的分支的结构称为内层分支，外面的分支结构称为外层分支</p></li><li><p>嵌套不要超过三层</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="comment">//if-else</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//if-else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java 规定，else 子句属于逻辑上距其最近，且没有匹配 else 的 if 语句：</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) n++;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) n++;</span><br><span class="line"><span class="keyword">else</span> n--;<span class="comment">//属于上面这个 if 语句</span></span><br><span class="line">JAVA</span><br></pre></td></tr></table></figure><p>这个场合，这个 else 语句属于上面的 <code>if (n &gt; 1)</code> 这个语句</p></blockquote><ul><li>要想改变那个匹配关系，要使用 <code>&#123; &#125;</code> 改变语句结构：</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    n++;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) n++;  </span><br><span class="line">&#125; <span class="keyword">else</span> n--;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Switch分支结构"><a href="#Switch分支结构" class="headerlink" title="Switch分支结构"></a>Switch分支结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">语句块<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:<span class="comment">//default 语句可选</span></span><br><span class="line"><span class="keyword">default</span>语句块;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//break 语句可选</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>switch</code> 关键字，表示 switch 分支。</li><li><code>表达式</code> 对应一个值，有返回值的就是表达式。<strong>该值必须是 int 或 char</strong>（char 可以转化为 int）。是 byte 或 short 的场合，要提升为 int。不允许 long、double 或 float</li><li><code>case 常量1;</code> 表示：当 <code>表达式</code> 的值等于 <code>常量1</code> ，则执行 <code>语句块1</code>。</li><li><code>break;</code> 表示退出 switch 分支,并非退出程序</li><li>当 <code>表达式</code> 的值匹配 <code>常量1</code> ，则执行 <code>语句块1</code>，如果不匹配，则继续匹配 <code>常量2</code> ，以此类推。</li><li>如果全都不匹配，则执行 <code>default</code>。</li><li>如果不写 <code>break;</code> ，则会发生<strong>穿透</strong>，即不进行判断而继续执行下一语句块。</li></ol><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ol><li><p><code>表达式</code> 数据类型，应和 <code>case</code> 后的 <code>常量</code> 类型一致，或者该<code>常量</code>可以自动转换成可以比较的类型。如：输入的是 <code>char</code> 而 <code>常量</code> 是 <code>int</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">switch</span>(c)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>;<span class="comment">//错误，int无法自动转换为char</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch （ <code>表达式</code> ）中<strong>表达式</strong>的返回值必须是：<code>byte</code> <code>short</code> <code>int</code> <code>char ``enum</code> <code>String</code></p></li><li><p><code>case</code> 语句中的值必须是 常量 或 常量表达式，不能是 变量。</p></li><li><p><code>default</code> 是可选的。没有就不执行。</p></li><li><p><code>break;</code> 用来跳出 switch 分支。如果不写，会持续执行语句，直到分支结束或遇到下一个 <code>break;</code></p></li></ol><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ul><li>穿透的应用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchExercise01</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入月份&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;您输入的信息无效。&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="与if-else的取舍"><a href="#与if-else的取舍" class="headerlink" title="与if-else的取舍"></a>与if-else的取舍</h4><ol><li>如果判断的<strong>具体数值不多</strong>，而且符合byte、short 、int、char, enum[枚举], String 这6 种类型。虽然两个语句都可以使用，建议使用swtich 语句。</li><li>其他情况：对区间判断，对结果为<strong>boolean 类型判断</strong>，使用if，if 的使用范围更广</li></ol><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="for循环控制"><a href="#for循环控制" class="headerlink" title="for循环控制"></a>for循环控制</h3><ul><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (循环变量初始化；循环条件；循环变量迭代)&#123;</span><br><span class="line">    循环操作；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>细节</p><ol><li><p>循环条件是返回一个<strong>布尔值</strong>的表达式</p></li><li><p>for(;循环判断条件;) 中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; i&lt;=<span class="number">10</span> ;)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);<span class="comment">//ok</span></span><br></pre></td></tr></table></figure></li><li><p>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。</p></li></ol></li></ul><h3 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a>while循环控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line"> 循环体(代码块);</span><br><span class="line"> 循环变量迭代;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>循环条件是返回一个布尔值的表达式,不能为空</li><li>while 循环是<strong>先判断再执行</strong>语句</li></ol><h3 id="dowhile循环控制"><a href="#dowhile循环控制" class="headerlink" title="dowhile循环控制"></a>dowhile循环控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体;</span><br><span class="line">循环变量迭代;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure><ul><li>循环条件是返回一个布尔值的表达式</li><li>先执行再判断**，也即至少执行一次</li></ul><h3 id="多重循环控制"><a href="#多重循环控制" class="headerlink" title="多重循环控制"></a>多重循环控制</h3><ul><li><p>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for ,while ,do…while 均可以作为外层循环和内层循环。（一般使用两层，最多不要超过3 层）</p></li><li><p>嵌套循环 是把 内层循环 当成 外层循环 的 循环体。只有内层 <code>false</code> 时才可能结束当层循环。</p></li><li><p>若内层执行 n 次，外层 m 次，则合计会循环 n*m 次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i=&quot;</span>+i + <span class="string">&quot; j=&quot;</span>+j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//i=0 j=0</span></span><br><span class="line"><span class="comment">//i=0 j=1</span></span><br><span class="line"><span class="comment">//i=0 j=2,跳出内循环后因又满足外循环条件，再次进入内循环</span></span><br><span class="line"><span class="comment">//i=1 j=0</span></span><br><span class="line"><span class="comment">//i=1 j=1</span></span><br><span class="line"><span class="comment">//i=1 j=2</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><ul><li><p>用于中止一个语句块的执行</p></li><li><p>break 可以被用在三种场合中</p><ul><li><p>switch 语句中，以跳出判断（结束穿透）</p></li><li><p>for、while、do…while 循环语句中，以跳出循环</p></li><li><p>语句块中，以跳过本块中所有剩余语句</p><p><code>break</code> 语句出现在多层嵌套的语句块中时，可以通过 <strong>标签</strong>(命名随意) 指明要终止的时哪一层语句块。(尽量不要使用标签)没有写标签时默认退出最近的循环体</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    lable1: <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      lable2: <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">break</span> lable1;<span class="comment">// 此时回去执行i++，若直接break等价于break label2, 输出01010101</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(j);<span class="comment">//输出01</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul><li>在循环中出现。用于结束本次循环，跳过剩下的语句，继续下一次循环</li><li>进行下次循环前，仍会判断循环条件是否满足</li><li>在多层嵌套循环中，可以通过标签指出跳出哪次循环（同 <code>break</code>）</li></ul><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><ul><li>用于方法。表示跳出所在的方法</li><li>方法有返回值的场合，将返回值写在 return 后：<code>return 值;</code></li><li>如果写在 主方法 则跳出程序</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ol><li><p>化繁为简: 即将复杂的需求，拆解成简单的需求，逐步完成编程&#x3D; 思想–练习-&gt; 代码</p></li><li><p>先死后活: 先考虑固定的值，然后转成可以灵活变化的值</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·运算符</title>
      <link href="/2024/09/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2024/09/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><ol><li>算术运算符</li><li>赋值运算符</li><li>关系运算符[比较运算符]</li><li>逻辑运算符</li><li>位运算符[需要二进制基础]</li><li>三元运算符</li></ol></li></ul><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul><li>对数值类型的变量进行运算</li></ul><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+7</td><td>7</td></tr><tr><td>-</td><td>负号</td><td>b&#x3D;11;-b</td><td>-11</td></tr><tr><td>+</td><td>加</td><td>9+9</td><td>18</td></tr><tr><td>-</td><td>减</td><td>10-8</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>7*8</td><td>56</td></tr><tr><td>&#x2F;</td><td>除</td><td>9&#x2F;9</td><td>1</td></tr><tr><td>%</td><td>取模(取余)</td><td>11%9</td><td>2</td></tr><tr><td>++</td><td>自增（前）：先运算后取值<br>自增（后）：先取值后运算</td><td>a&#x3D;2;b&#x3D;++a;<br>a&#x3D;2;b&#x3D;a++;</td><td>a&#x3D;3;b&#x3D;3<br>a&#x3D;3;b&#x3D;2</td></tr><tr><td>–</td><td>自减（前）：先运算后取值<br>自减（后）：先取值后运算</td><td>a&#x3D;2;b&#x3D;–a;<br>a&#x3D;2;b&#x3D;a–;</td><td>a&#x3D;1;b&#x3D;1<br>a&#x3D;1;b&#x3D;2</td></tr><tr><td>+</td><td>字符串相加</td><td>“hsp”+”edu”</td><td>“hsp edu”</td></tr></tbody></table><h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">4</span>); <span class="comment">//从数学来看是2.5, java 中10与4都是整数，2</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">4</span>); <span class="comment">//java 是2.5</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4</span>;<span class="comment">//java 中10 / 4 = 2, int--》double，2=&gt;2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// % 取模,取余数</span></span><br><span class="line"><span class="comment">// % 的本质看一个公式!!!! a % b = a - a / b * b</span></span><br><span class="line"><span class="comment">// -10 % -3 = (-10) - (-10) / (-3) * (-3) = -10 + 9 = -1</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">10</span> % <span class="number">3</span>); <span class="comment">// -1</span></span><br><span class="line">System.out.println(<span class="number">10</span> % -<span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">10</span> % -<span class="number">3</span>);<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//++的使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">i++;<span class="comment">//自增等价于i = i + 1; =&gt; i = 11</span></span><br><span class="line">++i;<span class="comment">//自增等价于i = i + 1; =&gt; i = 12，独立使用是相同的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作为表达式使用</span></span><br><span class="line"><span class="comment">前++：++i 先自增后赋值</span></span><br><span class="line"><span class="comment">后++：i++先赋值后自增</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//int k = ++j; //等价j=j+1;k=j;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j++; <span class="comment">// 等价k =j;j=j+1;</span></span><br><span class="line">System.out.println(<span class="string">&quot;k=&quot;</span> + k + <span class="string">&quot;j=&quot;</span> + j);<span class="comment">//8 9</span></span><br></pre></td></tr></table></figure><ul><li><p>面试题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//使用临时变量：(1)temp = i;(2)i = i + 1;(3)i = temp;</span></span><br><span class="line">i = i++;<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//(1)i = i + 1;(2)temp = i;(3)i = temp;</span></span><br><span class="line">i = ++i;<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li>关系运算符的结果都是boolean 型，也就是要么是true，要么是false</li><li>关系表达式经常用在if 结构的条件中或循环结构的条件中</li></ul><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>8&#x3D;&#x3D;7</td><td>false</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>8!&#x3D;7</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>8&lt;7</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>8&gt;7</td><td>true</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>8&lt;&#x3D;7</td><td>false</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>8&gt;&#x3D;7</td><td>true</td></tr><tr><td>instanceof</td><td>检查是否是类的对象</td><td>“hsp” instanceof String</td><td>true</td></tr></tbody></table><h3 id="细节说明-1"><a href="#细节说明-1" class="headerlink" title="细节说明"></a>细节说明</h3><ol><li>关系运算符的结果都是boolean 型，也就是要么是true，要么是false。</li><li>关系运算符组成的表达式，我们称为关系表达式。a &gt; b</li><li>比较运算符”&#x3D;&#x3D;”不能误写成”&#x3D;”</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul><li>用于连接多个条件（多个关系表达式），最终的结果也是一个boolean 值。</li></ul><ol><li>短路与&amp;&amp; ， 短路或||，取反!</li><li>逻辑与&amp;，逻辑或|，^ 逻辑异或</li></ol><p><img src="/img/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.jpg" alt="辑运算"></p><ul><li><p>a&amp;b : &amp; 叫逻辑与：规则：当a 和b 同时为true ,则结果为true, 否则为false</p></li><li><p>a&amp;&amp;b : &amp;&amp; 叫短路与：规则：当a 和b 同时为true ,则结果为true,否则为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">1</span> &amp; ++b &lt; <span class="number">50</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok300&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b);<span class="comment">// 4 10</span></span><br><span class="line"><span class="comment">//对于&amp;&amp;短路与而言，如果第一个条件为false ,后面的条件不再判断</span></span><br><span class="line"><span class="comment">//对于&amp;逻辑与而言，如果第一个条件为false ,后面的条件仍然会判断(++b会执行)</span></span><br><span class="line"><span class="comment">//开发中， 我们使用的基本是使用短路与&amp;&amp;, 效率高</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>a|b : | 叫逻辑或，规则：当a 和b ，有一个为true ,则结果为true,否则为false</p></li><li><p>a||b : || 叫短路或，规则：当a 和b ，有一个为true ,则结果为true,否则为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)||短路或：如果第一个条件为true，则第二个条件不会判断，最终结果为true，效率高</span></span><br><span class="line"><span class="comment">//(2)| 逻辑或：不管第一个条件是否为true，第二个条件都要判断，效率低</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>( a &gt; <span class="number">1</span> || ++b &gt; <span class="number">4</span>) &#123; <span class="comment">// 可以换成| 测试</span></span><br><span class="line">System.out.println(<span class="string">&quot;ok300&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b); <span class="comment">//4 9</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>!a : 叫取反，或者非运算。当a 为true, 则结果为false, 当a 为false 是，结果为true</p></li><li><p>a^b: 叫逻辑异或，当a 和b 不同时，则结果为true, 否则为false</p></li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ul><li>将某个运算后的值，赋给指定的变量。</li></ul><ul><li><p>基本赋值运算符：<code>=</code></p></li><li><p>符合赋值运算符：<code>+=</code> ; <code>-=</code> ; <code>*=</code> ; <code>/=</code> ; <code>%=</code> 等</p><blockquote><p><code>a += b</code> 等价于 <code>a = a + b</code>。其余同理</p></blockquote></li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>运算顺序从右往左。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int num = a + b + c;// 先运行(a + b + c)，再结算int num =</span><br><span class="line">JAVA</span><br></pre></td></tr></table></figure></li><li><p>运算符左边只能是变量，右边可以是变量、表达式、常量值。</p></li><li><p>复合赋值运算符会进行类型转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte b = 2; b += 3;// 此时 b += 3 等价于 b = (byte)(b + 3)</span><br><span class="line">b++;// 同理</span><br></pre></td></tr></table></figure></li></ol><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><ul><li>条件表达式? 表达式1: 表达式2;</li><li>运算规则：<ul><li>如果条件表达式为true，运算后的结果是表达式1；</li><li>如果条件表达式为false，运算后的结果是表达式2；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? a++ : b--;</span><br><span class="line">System.out.println(<span class="string">&quot;result=&quot;</span> + result);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a);<span class="comment">//11</span></span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span> + b);<span class="comment">//99</span></span><br></pre></td></tr></table></figure><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ul><li>表达式1 和表达式2 要为可以赋给接收变量的类型(或可以自动转换)</li><li>三元运算符可以转成if–else 语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b ? <span class="number">1.1</span> : <span class="number">3.4</span>;<span class="comment">//报错，1.1与3.4为double类型</span></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><ol><li>运算符有不同优先级。优先级高的总是优先于低的。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li><li><a href="https://c.biancheng.net/view/794.html">Java运算符优先级 (biancheng.net)</a></li></ol><table><thead><tr><th>运算符（优先级从高到低）</th><th>结核性</th></tr></thead><tbody><tr><td><code>[]</code>、<code>()</code> 方法调用</td><td>从左向右</td></tr><tr><td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code>、<code>+</code>（一元运算）、<code>-</code>（一元运算）、强制类型转换、new</td><td>从右向左</td></tr><tr><td><code>*</code>、<code>/</code>、<code>%</code></td><td>从左向右</td></tr><tr><td><code>+</code>、<code>-</code></td><td>从左向右</td></tr><tr><td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td><td>从左向右</td></tr><tr><td><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、instanceof</td><td>从左向右</td></tr><tr><td><code>==</code>、<code>!=</code></td><td>从左向右</td></tr><tr><td><code>&amp;</code></td><td>从左向右</td></tr><tr><td><code>^</code></td><td>从左向右</td></tr><tr><td>&#96;</td><td>&#96;</td></tr><tr><td><code>&amp;&amp;</code></td><td>从左向右</td></tr><tr><td>&#96;</td><td></td></tr><tr><td><code>?:</code>（三元运算符）</td><td>从右向左</td></tr><tr><td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>&amp;=</code>、<code>%=</code>、<code>^=</code>、&#96;</td><td>&#x3D;<code>、</code>&lt;&lt;&#x3D;<code>、</code>&gt;&gt;&#x3D;<code>、</code>&gt;&gt;&gt;&#x3D;&#96;</td></tr></tbody></table><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>由自己命名的地方都是标识符</li><li>命名规则：<ul><li>标识符由 26 个大、小写英文字母，0 - 9 阿拉伯数字，_ 或 $ 符号组成。</li><li><strong>数字不能开头</strong>。 错误示范：<code>int 3a = 1;</code></li><li>不能使用关键字和保留字（可以包含）。</li><li>严格区分大小写，长度无限制。</li><li>不能包含空格。</li><li>与多数编程语言不同。Java 可以用任何 Unicode 字符（特殊字符除外）作为标识符。但不推荐这么做</li></ul></li><li>命名规范<ul><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc</li><li>类名、接口名：多单词组成时，采用大驼峰法，所有单词的首字母大写：XxxYyyZzz</li><li>变量名、方法名：多单词组成时，采小驼峰法（驼峰法），第一个单词首字母小写，第二个开始每个单词首字母大写：xxxYyyZzz</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul></li></ul><h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><ul><li>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。</li><li><code>Input.java</code> ，需要一个 扫描器（对象），就是 Scanner。</li><li>Scanner 属于 java.util 包。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//[1] 导入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">aScannerName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//[2] new创建 Scanner 对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输入点什么！&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pointSomething</span> <span class="operator">=</span> aScannerName.next();</span><br><span class="line">        <span class="comment">//[3] 接收用户输入，执行到next()时程序暂停等待用户输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的是:&quot;</span> + pointSomething);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><ul><li>对于整数，有四种表示方式：<ul><li>二进制：0,1 ，满2 进1.以0b 或0B 开头。</li><li>十进制：0-9 ，满10 进1。</li><li>八进制：0-7 ，满8 进1. 以数字0 开头表示。</li><li>十六进制：0-9 及A(10)-F(15)，满16 进1. 以0x 或0X 开头表示。此处的A-F 不区分大小写。</li></ul></li></ul><h3 id="进制的转换"><a href="#进制的转换" class="headerlink" title="进制的转换"></a>进制的转换</h3><ul><li>其他进制 转 十进制：从最低位(右边)开始，将每个位上的数提取出来，乘以（进制数）的 (位数-1) 次方，然后求和。</li><li>十进制 转 其他进制：将该数不断除以（对象进制数），直到商为0为止，将每步得到的余数倒过来（从下至上，，第一位为最后计算出来的商，注意16进制把9以上余数转为字母）。</li><li>（二进制） 转 （八进制 或 十六进制）：二进制 从低位开始，每 3 位一组，转成对应的 八进制 即可。十六进制同理（但每 4 位一组）。</li><li>（八进制 或 十六进制） 转 （二进制）：将八进制数每1 位，转成对应的一个3位的二进制数。（位数不够前补零）十六进制同理（但转成对应的一个4位的二进制数）。</li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="原码，反码与补码"><a href="#原码，反码与补码" class="headerlink" title="原码，反码与补码"></a>原码，反码与补码</h3><p>对于有符号的而言:    </p><ol><li>二进制的最高位是符号位：0表示正数,1表示负数</li><li>正数的原码，反码，补码都一样(三码合一)</li><li><strong>负数</strong>的反码&#x3D;它的<strong>原码</strong>符号位不变，其它位取反(0-&gt;1,1-&gt;0)  </li><li><strong>负数</strong>的<strong>补码</strong>&#x3D;它的<strong>反码</strong>+1，负数的反码&#x3D;负数的补码-1  </li><li>0的反码，补码都是0</li><li>java没有无符号数，换言之，java中的数都是<strong>有符号</strong>的</li><li>在计算机运算的时候，都是以<strong>补码的方式来运算</strong>的．</li><li>当我们看运算结果的时候，要看他的<strong>原码</strong></li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li><p>与进制关系密切</p></li><li><p><code>&amp;</code> 按位与：两位都为 1，结果为 1，否则为 0</p></li><li><p><code>|</code> 按位或：两位有一个为 1，结果为 1，否则为 0</p></li><li><p><code>^</code> 按位异或：两位不同，结果为 1，否则为 0</p></li><li><p><code>~</code> 按位取反：把 0 变 1，1 变 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">2 &amp; 3：</span><br><span class="line">2 的原码：00000000 00000000 00000000 00000010</span><br><span class="line">2 的补码：00000000 00000000 00000000 00000010</span><br><span class="line">3 的原码：00000000 00000000 00000000 00000011</span><br><span class="line">3 的补码：00000000 00000000 00000000 00000011</span><br><span class="line"></span><br><span class="line">按位与：</span><br><span class="line">00000000 00000000 00000000 00000010</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">补码运算结果：00000000 00000000 00000000 00000010</span><br><span class="line">结果转成原码：00000000 00000000 00000000 00000010</span><br><span class="line">转成10进制运算结果：2</span><br><span class="line"></span><br><span class="line">~-2：</span><br><span class="line">-2 的原码：10000000 00000000 00000000 00000010</span><br><span class="line">-2 的反码：11111111 11111111 11111111 11111101</span><br><span class="line">-2 的补码：11111111 11111111 11111111 11111110</span><br><span class="line">补码运算结果：00000000 00000000 00000000 00000001</span><br><span class="line">结果转成原码：00000000 00000000 00000000 00000001</span><br><span class="line">运算结果：1</span><br><span class="line"></span><br><span class="line">~2：</span><br><span class="line">2 的原码：00000000 00000000 00000000 00000010</span><br><span class="line">~2运算得补码：11111111 11111111 11111111 11111101 结果要转成原码，但为负数,不是三码合一</span><br><span class="line">转成反码：11111111 11111111 11111111 11111100</span><br><span class="line">2 的补码：00000000 00000000 00000000 00000010</span><br><span class="line">反码转成原码：10000000 00000000 00000000 00000011</span><br><span class="line">运算结果：-3</span><br></pre></td></tr></table></figure><p>​</p></li><li><p><code>&gt;&gt;</code> 算术右移：低位溢出，符号位不变，用符号位补溢出的高位</p></li><li><p><code>&lt;&lt;</code> 算数左移：符号位不变，低位补 0</p></li><li><p><code>&gt;&gt;&gt;</code> 逻辑右移（无符号右移）：低位溢出，高位补 0</p></li><li><p>特别说明：没有&lt;&lt;&lt; 符号</p><p>下面是示例：</p><ul><li><p>将数字 1 算术右移 2 位：<code>int a = 1 &gt;&gt; 2</code></p><blockquote><p>1 的补码：00000000 00000000 00000000 00000001</p><p>补码结果：00000000 00000000 00000000 00000000</p><p>结果：00000000 00000000 00000000 00000000&#x2F;&#x2F;转为10进制为0</p></blockquote></li><li><p>将数字 1 算术左移 2 位：<code>int b = 1 &lt;&lt; 2</code></p><blockquote><p>1 的补码：00000000 00000000 00000000 00000001</p><p>补码结果：00000000 00000000 00000000 00000100</p><p>结果：00000000 00000000 00000000 00000100&#x2F;&#x2F;转为10进制为4</p></blockquote></li></ul><p>也就是说，<code>1 &lt;&lt; 2</code> 本质是 <code>1 * 2 * 2 = 4</code></p><p>而 <code>1 &gt;&gt; 2</code> 本质是 <code>1 / 2 / 2 = 0</code></p><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·变量</title>
      <link href="/2024/09/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%8F%98%E9%87%8F/"/>
      <url>/2024/09/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="变量简介"><a href="#变量简介" class="headerlink" title="变量简介"></a>变量简介</h2><ul><li>变量：变量是程序的基本组成单位</li><li>变量的三个基本要素：类型 + 名称 + 值</li><li>示例：<code>int a = 1;</code> 或<code>int a;a = 1;</code>类型 int 名称 a 值 1</li><li>基本步骤：声明变量（告诉编译器变量的名称和数据类型，但不分配内存。） -&gt; 赋值</li></ul><h3 id="原理与注意事项"><a href="#原理与注意事项" class="headerlink" title="原理与注意事项"></a>原理与注意事项</h3><ul><li>变量在内存中占据一定的空间，这个空间用于存储变量的值。内存分配通常发生在变量声明的时候。</li><li>变量名实际上是内存地址的别名，这使得我们可以通过变量名来访问和操作存储在特定内存地址的数据。（变量名——&gt;储存值的空间）</li><li>变量在同一作用域内不能重名。</li><li>每个变量都有一个数据类型，它决定了变量可以存储哪种类型的值，以及该值在内存中所占用的空间大小。</li></ul><h2 id="号的使用"><a href="#号的使用" class="headerlink" title="+号的使用"></a>+号的使用</h2><ol><li>当左右两边都是数值型，做加法运算</li><li>当左右两边任意一方为字符串，做拼接运算</li><li>运算从左到右</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> + <span class="number">3</span>);<span class="comment">// 输出 hello1003</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="/%5Cimg%5CJava%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="ava数据类"></p><ul><li>[8]表示占用内存空间（字节）</li></ul><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li>即使储存的值相等，数据类型不一样，空间就不一样</li><li>占用存储空间不同，可以存储的数据的范围不同</li></ul><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte [字节]</td><td>1字节</td><td>-128 ~ 127<br>二进制</td></tr><tr><td>short [短整型]</td><td>2字节</td><td>-(2^15) ~ 2^15-1 <br>-32768 ~ 32767</td></tr><tr><td>int [整型]</td><td>4字节</td><td>-2^31 ~ 2^31-1 <br>-2147483648 ~ 2147483647</td></tr><tr><td>long [长整型]</td><td>8字节</td><td>-2^63 ~ 2^63-1</td></tr></tbody></table><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>Java 各整数类型有固定的范围和字符长度，不受具体 OS（操作系统）影响，以保证 Java 程序的可移植性。</p></li><li><p>Java 默认整型常量为 <code>int</code> ，要声明 <code>long</code> 型常量必须后加 <code>l</code> 或 <code>L</code>。除非不足以表示大数字，才使用long。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1L</span></span><br></pre></td></tr></table></figure></li><li><p>bit: 计算机中的最小存储单位。byte(字节)：计算机中的基本存储单元，1byte &#x3D; 8 bit。</p></li></ol><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><p><em>浮点数在机器中存放形式为：浮点数 &#x3D; 符号位 + 指数位 + 尾数位</em></p><p><strong>因此，尾数部分可能丢失，造成精度损失。换言之，小数都是近似值</strong></p><h4 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>与整数类型相似，有固定的范围和字符长度，不受具体 OS（操作系统）影响。</p></li><li><p>Java 默认浮点常量为 <code>double</code> ，要声明 <code>float</code> 型常量必须后加 ”f“ 或 ”F“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1.1</span> <span class="comment">//错误</span></span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1.1F</span> <span class="comment">//正确</span></span><br><span class="line"><span class="type">double</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1.1F</span><span class="comment">//正确，把小的装进大的</span></span><br></pre></td></tr></table></figure></li><li><p>浮点型常量有两种表示形式</p><blockquote><p>十进制数形式：<code>5.13</code>、<code>315.4F</code>（表示为单精度的）、<code>.414</code>（可省略个位数的零）</p><p>科学计数法：<code>5.12e2</code> 即[5.12 × 10^2]、<code>5.12E-2</code> 即[5.12 &#x2F; 10^2]</p></blockquote></li><li><p>通常情况下，应该使用 <code>double</code> 类型，以其更为精确。</p></li><li><p>浮点数使用陷阱：当我们对运算结果是小数的进行相对判断时，要小心。（因为<strong>*小数都是近似值</strong>*）</p><p>正确方法是：<strong>以两个数差值的绝对值，在某个精度范围内判断</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">8.1</span> / <span class="number">3</span> <span class="comment">//输出接近2.7的一个小数</span></span><br><span class="line"><span class="comment">//错误写法</span></span><br><span class="line"><span class="keyword">if</span>( num1 == num2) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;相等&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确的写法</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(num1 - num2) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;插值范围内认为相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="字符类型-char"><a href="#字符类型-char" class="headerlink" title="字符类型(char)"></a>字符类型(char)</h3><ul><li>可以存放单个字符。（可以存放一个数字，因为其字符是数字编号的。输出时会输出数字对应的字符。”编码的概念“）</li><li><code>char c1 = &#39;a&#39;;</code> <code>char c2 = &#39;\t&#39;;</code> <code>char c3 = &#39;字&#39;;</code> <code>char c4 = 99;</code>（而char c5 &#x3D; ‘99’错误，‘99’为字符串）</li></ul><h4 id="使用细节-2"><a href="#使用细节-2" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>字符常量，也被称为字符字面量，是<code>char</code> 类型的具体取值。</p><p>用来直接表示单个字符的值。用<strong>单引号</strong>括起来，若用双引号则表示字符串。</p></li></ol><ul><li><p>以下是几种常见的字符常量类型：</p><p><strong>标准字符常量</strong>：这种字符常量由一个字符组成。例如，’A’ 是一个标准字符常量。</p><p><strong>转义字符常量</strong>：以反斜杠（\）开头的字符序列，用于表示非打印字符或其他具有特定含义的字符。例如，’\n’ 通常代表换行符，而 ‘\t’ 代表制表符。（两个合起来表示一个字符）</p><p><strong>多字符常量</strong>：虽然大多数编程语言只支持单字符常量，但有些语言允许使用多个字符来表示特定的值。这些字符通常具有特殊的含义，如 C 语言中的字符串转换指定符 ‘ll’ 用于 long long int。</p><p><strong>Unicode 字符常量</strong>：在支持 Unicode 的编程语言中，可以使用十六进制或 Unicode 编码来表示字符常量。例如，U+’0041’ 表示拉丁大写字母 A。<br>​</p></li></ul><ol start="2"><li><p><code>char</code> 的本质是一个整数，输出时，输出的是 unicode 码对应的字符。</p><p>要输出那个整数，用 <code>int</code></p><p>可以直接给char赋一个整数，输出时会按照对应的Unicode字符输出。<code>97--&gt;a</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">System.out.println(c1); <span class="comment">//a</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c2); <span class="comment">//97</span></span><br></pre></td></tr></table></figure></li><li><p>char 类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode 码.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>);<span class="comment">//107</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span> + <span class="number">1</span>;<span class="comment">//98+1==&gt; 99</span></span><br><span class="line">System.out.println((<span class="type">int</span>)c5); <span class="comment">//99</span></span><br><span class="line">System.out.println(c5); <span class="comment">//99-&gt;对应的字符-&gt;编码表ASCII(规定好的)=&gt;c</span></span><br></pre></td></tr></table></figure></li><li><p>强烈建议不要在程序中使用char类型，除非确实要处理UTF-16代码单元。最好将字符串作为抽象数据类型处理。</p></li></ol><h3 id="布尔类型（Boolean）"><a href="#布尔类型（Boolean）" class="headerlink" title="布尔类型（Boolean）"></a>布尔类型（Boolean）</h3><ul><li>只允许取值true或false，无null</li><li>占一个字节</li><li>适用于逻辑运算<ul><li>if条件控制语句</li><li>while循环控制语句</li><li>do-while循环控制语句</li><li>for循环控制语句</li></ul></li></ul><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li><p><strong>字符类型的本质</strong>，是把字符对应的码值编程二进制，存储。显示时将二进制代码转化为码值，找到对应的字符。</p></li><li><p>字符与码值的对应关系是字符编码表规定的。</p><blockquote><p>ASCII 编码表，占用 1 byte，共有 128 个字符。(实际一个字节可以表示256个字符)</p><p>Unicode 编码表，占用 2 byte，字母汉字都占用 2 byte，这样可能浪费空间。0 - 127 的字符与 ASCII 相同，所以兼容 ASCII。</p><p>UTF-8 编码表，根据不同符号大小可变（1 - 6 byte），字母占用 1 byte，汉字占用 3 byte。是 Unicode 的改进，是互联网上使用最广的 Unicode 实现方式。</p><p>GBK 编码表，可以表示汉字，字母占用 1 byte，汉字占用 2 byte。</p><p>GB2312 编码表，可以表示汉字（GB2312 &lt; GBK）</p><p>BIG5 编码表，可以存放繁体中文（香港，台湾）</p></blockquote></li></ul><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><ul><li><p>自动类型转换：Java 在进行赋值或运算时，精度（容量）小的类型自动转换为精度（容量）大的类型。</p><p><code>char[2]</code>– &gt; <code>int[4]</code>–&gt; <code>long[8]</code> –&gt; <code>float[4]</code> –&gt; <code>double[8]</code></p><p><code>byte[1]</code> –&gt; <code>short[2]</code> –&gt; <code>int[4]</code>–&gt; <code>long[8]</code> –&gt; <code>float[4]</code> –&gt; <code>double[8]</code></p><p>例子：<code>int a = &#39;c&#39;</code> 或者 <code>double b = 80</code></p></li></ul><h3 id="自动类型转换细节"><a href="#自动类型转换细节" class="headerlink" title="自动类型转换细节"></a>自动类型转换细节</h3><ol><li><p>有多种类型数据混合运算时，系统会将所有数据转换成容量最大的那种，再进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="comment">//float d1 = n1 + 1.1;//错误n1 + 1.1 =&gt; 1.1默认为double类型，结果类型是double</span></span><br><span class="line"><span class="comment">//double d1 = n1 + 1.1;//对</span></span><br><span class="line"><span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> n1 + <span class="number">1.1F</span>;<span class="comment">//对n1 + 1.1 =&gt; 结果类型是float</span></span><br></pre></td></tr></table></figure></li><li><p>如若把大精度（容量）数据赋值给小精度（容量）类型，就会报错（小数由于精度原因，大赋小会丢失精度，必不可用。<code>int n2 = 1.1;//错误double -&gt; int</code></p><p>但整数大赋小时：</p><p>1.赋予具体数值时，判断范围。</p><p>2.变量赋值时，判断类型。反之进行自动类型转换。</p></li><li><p>（<code>byte</code> <code>short</code> ）和<code>char</code> 之间不会自动转换，但可以计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当把具体数赋给byte 时，先判断该数是否在byte 范围内，如果是就可以</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//对, -128-127</span></span><br><span class="line"><span class="comment">// int n2 = 1; //n2 是int</span></span><br><span class="line"><span class="comment">// byte b2 = n2; //错误，原因： 如果是变量赋值，会判断类型，而byte和int不能转换</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// char c1 = b1; //错误， 原因byte 不能自动转成char</span></span><br></pre></td></tr></table></figure><p>三者参与计算时首先转化为 <code>int</code>。</p><blockquote><p><code>byte a = 1;</code></p><p><code>byte b = 1;</code></p><p><code>a + b</code> 结果是 <code>int</code> 类型</p></blockquote></li><li><p><code>boolean</code> 类型不参与自动转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num100</span> <span class="operator">=</span> pass;<span class="comment">//报错， boolean 不参与类型的自动转换</span></span><br></pre></td></tr></table></figure></li><li><p>自动提升原则：表达式结果的类型自动提升为(取决于)<strong>操作数中最大的类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num200</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">num300</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num500</span> <span class="operator">=</span> b4 + s3 + num200 + num300; <span class="comment">//float -&gt; double</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul><li>自动类型转换的逆过程，将容量大的转换为容量小的</li><li>使用时加强制转换符</li><li>注意后果是精度降低或溢出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1.9</span>;</span><br><span class="line">System.out.println(i);<span class="comment">//1，精度降低</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> (<span class="type">byte</span>)j;</span><br><span class="line">System.out.println(b1);<span class="comment">//造成数据溢出</span></span><br></pre></td></tr></table></figure><h3 id="强制类型转换细节"><a href="#强制类型转换细节" class="headerlink" title="强制类型转换细节"></a>强制类型转换细节</h3><ol><li><p>强转符号只对最近的操作数有效，使用小括号提升优先级(先把括号内计算完毕，再应用强转，否则只对3有效)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">3</span> * <span class="number">2.5</span> + <span class="number">1.1</span> * <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>char</code> 可以保留 <code>int</code> 的常量值，但不能保存其变量值。此时需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> m;<span class="comment">//错误</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m;</span><br><span class="line">System.out.println(c3);<span class="comment">//输出100对应的字符，d</span></span><br></pre></td></tr></table></figure></li><li><p><code>byte</code> <code>short</code> <code>char</code> 在进行运算时，当作 <code>int</code> 处理。</p></li></ol><h3 id="String（字符串，属于Class）和基本类型转换"><a href="#String（字符串，属于Class）和基本类型转换" class="headerlink" title="String（字符串，属于Class）和基本类型转换"></a>String（字符串，属于Class）和基本类型转换</h3><ul><li><p>基本数据类型转字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot; &quot;</span> + s3 + <span class="string">&quot; &quot;</span> + s4);</span><br></pre></td></tr></table></figure></li><li><p>字符串转基本数据类型（体验）,通过基本数据类型的包装类调用 <code>parseXX</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会在OOP 讲对象和方法的时候回详细</span></span><br><span class="line"><span class="comment">//解读使用基本数据类型对应的包装类，的相应方法，得到基本数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);<span class="comment">//123</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Double.parseDouble(s5);<span class="comment">//123.0</span></span><br><span class="line"><span class="type">float</span> <span class="variable">num3</span> <span class="operator">=</span> Float.parseFloat(s5);<span class="comment">//123.0</span></span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);<span class="comment">//123</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);<span class="comment">//123</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);<span class="comment">//123</span></span><br><span class="line"><span class="comment">//怎么把字符串转成字符char -&gt; 含义是得到字符串的第一个字符</span></span><br><span class="line"><span class="comment">//解读s5.charAt(0) 得到s5 字符串的第一个字符&#x27;1&#x27;</span></span><br><span class="line">System.out.println(s5.charAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>将 <code>String</code> 转成基本数据类型时，要保证其能转换为有效数据。即不能把 <code>&quot;Hello&quot;</code> 转换成 <code>int</code>。</li><li>如果格式不正确，会抛出<a href="https://i-melody.github.io/2021/12/18/Java/%E5%85%A5%E9%97%A8%E9%98%B6%E6%AE%B5/11%20%E5%BC%82%E5%B8%B8/">异常</a>，程序会中止。</li></ol><h2 id="API文档-Application-Programming-Interface"><a href="#API文档-Application-Programming-Interface" class="headerlink" title="API文档(Application Programming Interface)"></a>API文档(Application Programming Interface)</h2><p><a href="https://www,matools.com/">中文在线文档</a></p><ul><li>包–&gt;类–&gt;方法</li><li>直接索引</li></ul><p><img src="/img/Java%E7%B1%BB%E7%9A%84%E7%BB%84%E7%BB%87%E5%BD%A2%E5%BC%8F.jpg" alt="ava类的组织形"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记·概述</title>
      <link href="/2024/09/07/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/09/07/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%C2%B7%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>内容整理自：韩顺平 零基础30天学会Java</li><li>程序：为了让计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合</li></ul><h2 id="Java特性"><a href="#Java特性" class="headerlink" title="Java特性"></a>Java特性</h2><ol><li><p>Java 语言是<strong>面向对象的（oop）</strong>，将重点放在对象及其接口上</p></li><li><p>Java 语言是<strong>健壮的</strong>。其强类型机制、异常处理、垃圾自动收集是健壮性的保证。</p></li><li><p>Java 语言是<strong>解释型</strong>的：解释型语言编译后需要解释器才能运行。相对的，编译型语言可以被直接执行。</p><p>Java 解释器能在任何移植了解释器的机器上直接执行 Java 字节码。</p></li></ol><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><ul><li>JDK &#x3D; JRE + 开发工具集（例如Javac,java 编译工具等) —— 编写Java程序的程序员使用的软件</li><li>JRE &#x3D; JVM + Java SE 标准类库（java 核心类库）—— 运行Java程序的用户使用的软件</li></ul><h3 id="JDK（Java-Development-Kit－-Java-开发工具包）"><a href="#JDK（Java-Development-Kit－-Java-开发工具包）" class="headerlink" title="JDK（Java Development Kit－ Java 开发工具包）"></a>JDK（Java Development Kit－ Java 开发工具包）</h3><ul><li>供开发人员使用</li></ul><h3 id="JRE（Java-Runtime-Environment-－Java-运行环境-）"><a href="#JRE（Java-Runtime-Environment-－Java-运行环境-）" class="headerlink" title="JRE（Java Runtime Environment －Java 运行环境)）"></a>JRE（Java Runtime Environment －Java 运行环境)）</h3><ul><li>如果想要运行一个开发好的Java 程序，计算机中只需要安装JRE 即可</li></ul><h3 id="Java-核心机制-JVM-java-virtual-machine-Java-虚拟机"><a href="#Java-核心机制-JVM-java-virtual-machine-Java-虚拟机" class="headerlink" title="Java 核心机制-JVM(java virtual machine - Java 虚拟机)"></a>Java 核心机制-JVM(java virtual machine - Java 虚拟机)</h3><ul><li>一个虚拟的计算机，负责执行指令，管理数据、内存、寄存器，包含在JDK 中</li><li>不同平台有不同虚拟机</li><li>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ul><h3 id="环境变量path配置及其作用"><a href="#环境变量path配置及其作用" class="headerlink" title="环境变量path配置及其作用"></a>环境变量path配置及其作用</h3><ol><li>环境变量的作用是为了在dos的任意目录，可以去使用java 和 javac命令</li><li>先配置 JAVA_HOME &#x3D; 指向jdk安装的主目录</li><li>编辑path环境变量，增加 %JAVA_HOME%\bin</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>开发步骤：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  编码GBK的不可映射字符且修改为GBK无用：用记事本打开并另存为ANSI编码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello, world.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发细节"><a href="#开发细节" class="headerlink" title="开发细节"></a>开发细节</h2><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><ul><li><code>.java</code> 称为源文件， <code>.class</code>称为字节码文件</li></ul><h3 id="注意事项及细节说明"><a href="#注意事项及细节说明" class="headerlink" title="注意事项及细节说明"></a>注意事项及细节说明</h3><ol><li><p>源文件以 <code>.java</code> 为扩展名，源文件的基本组成部分是类（class），程序的所有内容都必须放置在类中</p></li><li><p>Java 应用程序的执行入口是 <code>main()</code> 方法。其有固定的<strong>书写格式：</strong></p><p><code>public static void main(string[]args)&#123;…&#125;</code></p></li><li><p>Java 语言<strong>严格区分大小写</strong>。</p></li><li><p>Java 方法由一条条语句构成，<strong>每个语句都以 ; 结束</strong>。</p></li><li><p><strong>大括号 { } 是成对出现的</strong>，缺一不可。习惯先写 <code>&#123;&#125;</code> 再写代码</p></li><li><p>一个源文件中<strong>最多只有一个 public 类</strong>，其余类不限。</p></li><li><p><strong>如果文件中包含 public 类，则文件名必须按该类命名。</strong></p></li><li><p>也可以把 main 方法写在非 public 类中，然后运行指定非 public 类，这样入口方法是非 public 类的主方法。</p></li><li><p><strong>在控制台按 tab 可以实现代码补齐。按方向键 ↑ 或 ↓ 可以调用历史代码。</strong></p></li></ol><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ol><li><p>类、方法的注释要以 Javadoc 的方式来写（使用特定标签）</p></li><li><p>非 Javadoc 的注释，往往是给维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题等。</p></li><li><p>不要用 <code>a</code> <code>b</code>，这种名称命名变量，尽量写得清楚 <code>int age = 10;</code></p><p>另外，<strong>Java 源代码使用的是 Unicode 码，因此汉语也能作为标识符</strong>。但不推荐使用汉语做标识符。</p></li><li><p>使用 tab 键操作，使代码右移。使用 shift+tab 键，使代码左移。</p></li><li><p>运算符两边各加入空格。注意排版规范。</p></li><li><p>源文件使用 UTF-8 编码。</p></li><li><p>代码行宽度不要超过 80 个字符。超过时通过换行保持简洁。</p></li><li><p>代码编写<strong>次行风格</strong>及<strong>行尾风格</strong></p><blockquote><p>次行风格：换行输入<code>&#123;</code> <code>&#125;</code>，使其总在行头</p><p>行尾风格：在一行的末尾输入 <code>&#123;</code>，换行输入 <code>&#125;</code></p></blockquote></li><li><p>一段代码完成一个小功能，尽量不要混合。这样更加灵活。</p></li></ol><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeChar</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// \t ：一个制表位，让文本间有固定的空白</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京\t天津\t上海&quot;</span>);</span><br><span class="line"><span class="comment">// \n ：换行符</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京\n天津\n上海&quot;</span>);</span><br><span class="line"><span class="comment">// \\ ：一个\（需要两个\则要写四个\）</span></span><br><span class="line">System.out.println(<span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>);</span><br><span class="line"><span class="comment">// \&quot; :一个&quot;(表明引号为字符串的一部分)</span></span><br><span class="line"><span class="comment">// \&#x27; ：一个&#x27;</span></span><br><span class="line"><span class="comment">// \. :一个圆点</span></span><br><span class="line"><span class="comment">// \r :一个回车（区分回车与换行：回车后光标停在回车前一行的开头，然后用后一行从头开始一一替换）</span></span><br><span class="line">System.out.println(<span class="string">&quot;回车前一行\r 后一行\r再&quot;</span>);<span class="comment">//输出：再一行一行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/* 多</span></span><br><span class="line"><span class="comment">   行*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@auther</span> Cloris</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><ul><li>选中文字按 <code>ctrl</code> + <code>/</code></li></ul><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><ul><li>选中文字按 <code>ctrl</code> + <code>shift</code> +<code>/</code></li></ul><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><ul><li><p>文档注释的注释内容可被 JDK 中的 Javadoc 工具解析，生成一套以 HTML 形式体现的说明文档。（每句前不写星号也合法）</p></li><li><p>抽取注释：<code>javadoc -d 生成目录 -author -..（一系列标签） 文档名.java</code></p></li><li><p>以下是一些常用的 Javadoc 标签及其示例：</p><ul><li><p><strong>@author</strong> - 指定类的作者。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@author</span> Your Name</span><br></pre></td></tr></table></figure></li><li><p><strong>@version</strong> - 指定类的版本号。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@version</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure></li><li><p><strong>@param</strong> - 描述方法或构造函数的参数。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@param</span> name 描述参数</span><br></pre></td></tr></table></figure></li><li><p><strong>@return</strong> - 描述方法或构造函数的返回值。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@return</span> 描述返回值</span><br></pre></td></tr></table></figure></li><li><p><strong>@throws</strong> - 描述方法可能抛出的异常。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@throws</span> Exception 描述可能抛出的异常</span><br></pre></td></tr></table></figure></li><li><p><strong>@see</strong> - 参考其他类、方法或字段。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@see</span> ClassName#methodName</span><br></pre></td></tr></table></figure></li><li><p><strong>@since</strong> - 指定一个方法或类从哪个版本开始存在。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@since</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure></li><li><p><strong>@deprecated</strong> - 标记一个类、方法或字段为过时的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@deprecated</span> 描述为什么过时</span><br></pre></td></tr></table></figure></li><li><p><strong>@inheritDoc</strong> - 表示当前方法的文档应该与父类的方法文档相同。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@inheritDoc</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="DOS（了解）"><a href="#DOS（了解）" class="headerlink" title="DOS（了解）"></a>DOS（了解）</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>控制台将指令发送至DOS系统</li><li>DOS系统接受、解析并执行指令，体现在Windows文件系统</li></ul><h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><ul><li>相对路径：相对当前目录进行移动查找<code>./</code> 表示从当前目录开始，<code>../</code>表示返回上一级</li><li>绝对路径：从盘符出发<code>d:\Program\JDK8\jre\bin</code></li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><p>查看帮助：<code>help</code> 或 <code>help cd</code> 等</p></li><li><p>查看目录内容：<code>dir</code> 查看当前目录 或 <code>dir d:\Program\JDK8\bin</code> 查看指定目录</p></li><li><p>切换到其他盘：<code>cd /D d:</code> 从 C盘 切换至 D盘</p></li><li><p>切换到当前盘的其他目录：<code>cd d:\Program\JDK8\jre\bin</code></p></li><li><p>返回上级目录：<code>cd ..</code></p></li><li><p>切换至根目录：<code>cd \</code></p></li><li><p>查看子集目录：<code>tree</code> 当前目录 或 <code>tree d:/Program</code> 指定目录</p></li><li><p>清屏：<code>cls</code></p></li><li><p>退出：<code>exit</code></p></li><li><p>创建&#x2F;删除目录：<code>md 目录名</code> <code>rd 目录名</code></p></li><li><p>拷贝&#x2F;删除文件：<code>copy 文件名 目录</code> <code>del 文件名</code></p></li><li><p>移动文件：<code>move 文件名 目录</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS总结笔记（补充）</title>
      <link href="/2024/09/06/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0(%E8%A1%A5%E5%85%85)/"/>
      <url>/2024/09/06/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0(%E8%A1%A5%E5%85%85)/</url>
      
        <content type="html"><![CDATA[<h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="CSS精灵"><a href="#CSS精灵" class="headerlink" title="CSS精灵"></a>CSS精灵</h3><ul><li><p>CSS 精灵，也叫 <strong>CSS Sprites</strong>，是一种网页<strong>图片应用处理方式</strong>。把网页中<strong>一些背景图片</strong>整合到<strong>一张图片</strong>文件中，再<strong>background-position</strong> 精确的定位出背景图片的位置。</p></li><li><p>优点：减少服务器被请求次数，减轻服务器的压力，提高页面加载速度</p></li><li><p>实现步骤：</p><ul><li><p>创建盒子，<strong>盒子尺寸</strong>与<strong>小图</strong>尺寸<strong>相同</strong></p></li><li><p>设置盒子<strong>背景图</strong>为精灵图</p></li><li><p>添加 <strong>background-position</strong> 属性，改变<strong>背景图位置</strong></p><p>​       1. 测量小图片<strong>左上角坐标</strong></p><p>​       2. 取<strong>负数</strong>坐标为 background-position 属性值（向左上移动图片位置）</p></li></ul></li></ul><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><ul><li>字体图标：<strong>展示的是图标，本质是字体</strong></li><li>作用：在网页中添加<strong>简单的、颜色单一</strong>的小图标</li><li>优点<ul><li><strong>灵活性</strong>：灵活地修改样式，例如：尺寸、颜色等</li><li><strong>轻量级</strong>：体积小、渲染快、降低服务器请求次数</li><li><strong>兼容性</strong>：几乎兼容所有主流浏览器</li><li><strong>使用方便</strong>：先下载再使用</li></ul></li></ul><h4 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h4><p>iconfont 图标库：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a> </p><p>登录 → 素材库 → 官方图标库 → 进入图标库 → 选图标，加入购物车 → 购物车，添加至项目，确定 → 下载至本地 </p><p><img src="/heo/themes/butterfly/source/img/%E4%B8%8A%E4%BC%A0%20(2).png" alt="1680340665988"></p><h4 id="使用字体"><a href="#使用字体" class="headerlink" title="使用字体"></a>使用字体</h4><ol><li><p>引入字体样式表（iconfont.css） </p></li><li><p>标签使用字体图标类名</p></li></ol><ul><li>iconfont：字体图标基本样式（字体名，字体大小等等）</li><li>icon-xxx：图标对应的类名</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 如果要调整字体大小，注意 选择器的优先级 要高于 iconfont 类，因为其带默认样式 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.icon-icon-test3</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-icon-test3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上传矢量图"><a href="#上传矢量图" class="headerlink" title="上传矢量图"></a>上传矢量图</h4><p>作用：项目特有的图标上传到 iconfont 图标库，生成字体</p><p><img src="/heo/themes/butterfly/source/img/%E4%B8%8A%E4%BC%A0%20(1).png" alt="1680340775611"></p><p>上传步骤：上传 → 上传图标 → 选择 svg 矢量图，打开 → 提交 → 系统审核</p><h2 id="CSS修饰属性"><a href="#CSS修饰属性" class="headerlink" title="CSS修饰属性"></a>CSS修饰属性</h2><h3 id="垂直对齐方式"><a href="#垂直对齐方式" class="headerlink" title="垂直对齐方式"></a>垂直对齐方式</h3><p><img src="/heo/themes/butterfly/source/img/%E5%AF%B9%E9%BD%90.png" alt="1680340838945"></p><ul><li>属性名：vertical-align</li><li>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。此时可以给图片、表单这些行内块元素的 vertical-align 属性设置为 middle 就可以让文字和图片垂直居中对齐了。</li></ul><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>baseline</td><td>基线对齐（默认）</td></tr><tr><td>top</td><td>顶部对齐</td></tr><tr><td><strong>middle</strong></td><td><strong>居中对齐</strong></td></tr><tr><td>bottom</td><td>底部对齐</td></tr></tbody></table><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>作用：可以为一个元素在不同状态之间切换的时候添加<strong>过渡效果</strong></p><p>属性名：<strong>transition（复合属性）</strong></p><p>属性值：<strong>过渡的属性  花费时间 (s)</strong></p><p>提示：</p><ul><li>过渡的属性可以是具体的 CSS 属性</li><li>也可以为 all（两个状态属性值不同的所有属性，都产生过渡效果）</li><li>transition 设置给元素本身</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="透明度opacity"><a href="#透明度opacity" class="headerlink" title="透明度opacity"></a>透明度opacity</h3><p>作用：设置<strong>整个元素的透明度</strong>（包含背景和内容）</p><p>属性名：opacity</p><p>属性值：0 – 1</p><ul><li>0：完全透明（元素不可见）</li><li>1：不透明</li><li>0-1之间小数：半透明</li></ul><h3 id="光标类型cursor"><a href="#光标类型cursor" class="headerlink" title="光标类型cursor"></a>光标类型cursor</h3><p>作用：鼠标悬停在元素上时指针显示样式</p><p>属性名：cursor</p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>default</td><td>默认值，通常是箭头</td></tr><tr><td>pointer</td><td>小手效果，提示用户可以点击</td></tr><tr><td>text</td><td>工字型，提示用户可以选择文字</td></tr><tr><td>move</td><td>十字光标，提示用户可以移动</td></tr></tbody></table><h2 id="平面转换"><a href="#平面转换" class="headerlink" title="平面转换"></a>平面转换</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>作用：为元素添加动态效果，一般与过渡配合使用</p><p>概念：改变盒子在平面内的形态（位移、旋转、缩放、倾斜）</p><p>平面转换也叫 2D 转换，属性是 <strong>transform</strong></p><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(X轴移动距离, Y轴移动距离);</span><br></pre></td></tr></table></figure><ul><li>取值<ul><li>像素单位数值</li><li>百分比（参照<strong>盒子自身尺寸</strong>计算结果）</li><li><strong>正负</strong>均可</li></ul></li><li>技巧<ul><li>translate() <strong>只写一个值</strong>，表示沿着 <strong>X</strong> 轴移动</li><li>单独设置 X 或 Y 轴移动距离：translateX() 或 translateY()</li></ul></li></ul><h3 id="定位居中"><a href="#定位居中" class="headerlink" title="定位居中"></a>定位居中</h3><ul><li>方法一：margin</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="comment">/* margin */</span></span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">100px</span>; </span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">50px</span>; </span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br></pre></td></tr></table></figure><ul><li>方法二：平移 → 百分比参照盒子自身尺寸计算结果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>; <span class="comment">/* 左侧距离视口50% */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>; <span class="comment">/* 上方距离视口50% */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/* 平移自身宽度和高度的各一半以居中 */</span></span><br></pre></td></tr></table></figure><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(旋转角度);</span><br></pre></td></tr></table></figure><ul><li>取值：角度单位是 <strong>deg</strong> </li><li>技巧<ul><li>取值正负均可</li><li>取值为正，顺时针旋转</li><li>取值为负，逆时针旋转</li></ul></li></ul><h3 id="转换原点"><a href="#转换原点" class="headerlink" title="转换原点"></a>转换原点</h3><blockquote><p>默认情况下，转换原点是盒子中心点 </p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: 水平原点位置 垂直原点位置;</span><br></pre></td></tr></table></figure><p>取值：</p><ul><li><strong>方位名词</strong>（left、top、right、bottom、center）</li><li>像素单位数值</li><li>百分比</li></ul><h3 id="多重转换"><a href="#多重转换" class="headerlink" title="多重转换"></a>多重转换</h3><p>多重转换技巧：先平移再旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>() <span class="built_in">rotate</span>();</span><br></pre></td></tr></table></figure><ul><li>多重转换原理：以第一种转换方式坐标轴为准转换形态<ul><li>旋转会改变网页元素的坐标轴向</li><li>先写旋转，则后面的转换效果的轴向以旋转后的轴向为准，会影响转换结果</li></ul></li></ul><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(缩放倍数);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(X轴缩放倍数, Y轴缩放倍数);</span><br></pre></td></tr></table></figure><p>技巧</p><ul><li>通常，只为 scale() 设置一个值，表示 X 轴和 Y 轴等比例缩放</li><li>取值大于1表示放大，取值小于1表示缩小</li></ul><h3 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">skew</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">30deg</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(-<span class="number">30deg</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>取值：角度度数 deg</p><h2 id="空间转换"><a href="#空间转换" class="headerlink" title="空间转换"></a>空间转换</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>空间：是从坐标轴角度定义的 X 、Y 和 Z 三条坐标轴构成了一个立体空间，Z 轴位置与视线方向相同。</li><li>空间转换也叫 3D转换</li><li>属性：transform</li></ul><h3 id="平移-1"><a href="#平移-1" class="headerlink" title="平移"></a>平移</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="comment">/* 电脑是平面，默认无法观察 Z 轴平移效果 */</span></span><br><span class="line">      <span class="comment">/* transform: translate3d(100px, 200px, 300px); */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 3d 小括号里面必须逗号隔开 三个数 */</span></span><br><span class="line">      <span class="comment">/* transform: translate3d(100px, 200px); */</span></span><br><span class="line"></span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100%</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>取值与平面转换相同</li><li>默认情况下，Z 轴平移没有效果，原因：电脑屏幕默认是平面，无法显示 Z 轴平移效果</li></ul><h3 id="视距"><a href="#视距" class="headerlink" title="视距"></a>视距</h3><ul><li>作用：指定了观察者与 Z&#x3D;0 平面的距离，为元素添加透视效果</li><li>透视效果：近大远小、近实远虚</li><li>属性：(添加给父级，取值范围 800-1200)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 视距属性（表示人眼与屏幕距离）必须添加给 直接父级 建议取值800至1200*/</span></span><br><span class="line">    <span class="selector-class">.father</span> &#123;</span><br><span class="line">      <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">      <span class="comment">/* perspective: 10000px;</span></span><br><span class="line"><span class="comment">      perspective: 100px; */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.son</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">      <span class="attribute">background-color</span>: pink;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.son</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">300px</span>);</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="旋转-1"><a href="#旋转-1" class="headerlink" title="旋转"></a>旋转</h3><ul><li>Z 轴：rotateZ()</li><li>X 轴：rotateX()</li><li>Y 轴：rotateY()</li></ul><h3 id="左手法则"><a href="#左手法则" class="headerlink" title="左手法则"></a>左手法则</h3><ul><li>作用：根据旋转方向确定取值正负</li><li>使用：左手握住旋转轴, 拇指指向正值方向, 其他四个手指弯曲方向为旋转正值方向</li></ul><h3 id="rotate3d"><a href="#rotate3d" class="headerlink" title="rotate3d"></a>rotate3d</h3><ul><li>rotate3d(x, y, z, 角度度数) ：用来设置自定义旋转轴的位置及旋转的角度</li><li>x，y，z 取值为0-1之间的数字</li></ul><h3 id="立体呈现"><a href="#立体呈现" class="headerlink" title="立体呈现"></a>立体呈现</h3><ul><li>作用：设置元素的子元素是位于 3D 空间中还是平面中</li><li>属性名：transform-style</li><li>属性值：<ul><li>flat：子级处于平面中</li><li>preserve-3d：子级处于 3D 空间</li></ul></li></ul><h3 id="缩放-1"><a href="#缩放-1" class="headerlink" title="缩放"></a>缩放</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale3d</span>(x, y, z);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleX</span>();</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleY</span>();</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scaleZ</span>();</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li>过渡：实现两个状态间的变化过程</li><li>动画：实现多个状态间的变化过程，动画过程可控（重复播放、最终画面、是否暂停）</li></ul><h3 id="动画实现步骤"><a href="#动画实现步骤" class="headerlink" title="动画实现步骤"></a>动画实现步骤</h3><ol><li>定义动画</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方式一 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 方式二 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line"><span class="number">0%</span> &#123;&#125;</span><br><span class="line"><span class="number">10%</span> &#123;&#125;</span><br><span class="line">......</span><br><span class="line"><span class="number">100%</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用动画</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">animation</span>: change <span class="number">1s</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="复合写法"><a href="#复合写法" class="headerlink" title="复合写法"></a>复合写法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation: 动画名称 动画时长 速度曲线 延迟时间 重复次数 动画方向 执行完毕时状态；</span><br></pre></td></tr></table></figure><ul><li>动画名称和动画时长必须赋值</li><li>取值不分先后顺序</li><li>如果有两个时间值，第一个时间表示动画时长，第二个时间表示延迟时间</li></ul><h3 id="拆分写法"><a href="#拆分写法" class="headerlink" title="拆分写法"></a>拆分写法</h3><table><thead><tr><th>属性</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>animation-name</td><td>动画名称</td><td></td></tr><tr><td>animation-duration</td><td>动画时长</td><td></td></tr><tr><td>animation-delay</td><td>延迟时间</td><td></td></tr><tr><td>animation-fill-mode</td><td>动画执行完毕时状态</td><td>forwards：最后一帧状态<br>backwards：第一帧状态</td></tr><tr><td>animation-timing-function</td><td>速度曲线</td><td>steps(数字)：逐帧动画</td></tr><tr><td>animation-iteration-count</td><td>重复次数</td><td>infinite为无限循环</td></tr><tr><td>animation-direction</td><td>动画执行方向</td><td>alternate为反向</td></tr><tr><td>animation-play-state</td><td>暂停动画</td><td>paused为暂停，通常配合:hover使用</td></tr></tbody></table><h3 id="精灵动画"><a href="#精灵动画" class="headerlink" title="精灵动画"></a>精灵动画</h3><ul><li><p>制作步骤</p><p>1.准备显示区域<br>盒子尺寸与一张精灵小图尺寸相同<br>2.定义动画<br>移动背景图（移动距离 &#x3D; 精灵图宽度）<br>3.使用动画<br>steps(N)，N 与精灵小图个数相同</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/bg.png</span>);</span><br><span class="line">  <span class="attribute">animation</span>: run <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">12</span>) infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> run &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">1680px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多组动画"><a href="#多组动画" class="headerlink" title="多组动画"></a>多组动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>:</span><br><span class="line">动画一,</span><br><span class="line">动画二,</span><br><span class="line">... ...</span><br><span class="line">;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="comment">/* border: 1px solid #000; */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/bg.png</span>);</span><br><span class="line">  <span class="attribute">animation</span>: </span><br><span class="line">    run <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">12</span>) infinite,</span><br><span class="line">    move <span class="number">3s</span> forwards</span><br><span class="line">  ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当动画的开始状态样式 跟 盒子默认样式相同，可以省略动画开始状态的代码 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> run &#123;</span><br><span class="line">  <span class="comment">/* from &#123;</span></span><br><span class="line"><span class="comment">    background-position: 0 0;</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">1680px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="comment">/* 0% &#123;</span></span><br><span class="line"><span class="comment">    transform: translate(0);</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">800px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>渐变是多个颜色逐渐变化的效果，一般用于设置盒子背景 </p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">  渐变方向,</span><br><span class="line">  颜色<span class="number">1</span> 终点位置,</span><br><span class="line">  颜色<span class="number">2</span> 终点位置,</span><br><span class="line">  ......</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">          red,</span><br><span class="line">          green</span><br><span class="line">        );</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">          to right,</span><br><span class="line">          red,</span><br><span class="line">          green</span><br><span class="line">        );</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">          <span class="number">45deg</span>,</span><br><span class="line">          red,</span><br><span class="line">          green</span><br><span class="line">        );</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">          red <span class="number">80%</span>,</span><br><span class="line">          green</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>取值：</p><ul><li>渐变方向：可选<ul><li>to 方位名词</li><li>角度度数</li></ul></li><li>终点位置：可选<ul><li>百分比</li></ul></li></ul><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">  半径 at 圆心位置,</span><br><span class="line">  颜色<span class="number">1</span> 终点位置,</span><br><span class="line">  颜色<span class="number">2</span> 终点位置,</span><br><span class="line">  ......</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: pink; </span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">        <span class="number">50px</span> at center center,</span><br><span class="line">        red,</span><br><span class="line">        pink</span><br><span class="line">      );</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">        <span class="number">50px</span> <span class="number">20px</span> at center center,</span><br><span class="line">        red,</span><br><span class="line">        pink</span><br><span class="line">      );</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">        <span class="number">50px</span> at <span class="number">50px</span> <span class="number">30px</span>,</span><br><span class="line">        red,</span><br><span class="line">        pink <span class="number">50%</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">button</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: green;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">        <span class="number">30px</span> at <span class="number">30px</span> <span class="number">20px</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>),</span><br><span class="line">        transparent</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>取值：</p><ul><li>半径可以是2条，则为椭圆</li><li>圆心位置取值：像素单位数值 &#x2F; 百分比 &#x2F; 方位名词</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS总结笔记（下）</title>
      <link href="/2024/09/05/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0(%E4%B8%8B)/"/>
      <url>/2024/09/05/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<h2 id="布局方式"><a href="#布局方式" class="headerlink" title="布局方式"></a>布局方式</h2><ul><li>标准流&#x2F;文档流：指标签在页面中默认的排布规则</li><li>改变数据流：float&#x2F;flex&#x2F;定位布局 </li><li>遵循以下规则:<ol><li><strong>块级元素（Block-level Elements）</strong>：<ul><li>在垂直方向上一个接一个地排列。</li><li>每个块级元素都会独占一行，从上到下依次排列。</li><li>宽度默认为父元素的100%，高度由内容决定。</li><li>可以设置宽度和高度。</li></ul></li><li><strong>行内元素（Inline Elements）</strong>：<ul><li>在水平方向上一个接一个地排列，直到行宽不足以容纳下一个元素，然后换行继续。</li><li>宽度和高度通常由内容决定，不能设置宽度和高度。</li><li>行内元素的高度通常不会影响行高。</li></ul></li><li><strong>行内块元素（Inline-block Elements）</strong>：<ul><li>结合了块级元素和行内元素的特性，可以在一行内排列，同时可以设置宽度和高度。</li></ul></li></ol></li></ul><h3 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>作用：让块元素水平排列。</p><p>属性名：<strong>float</strong></p><p>属性值 :</p><ul><li><strong>left</strong>：左对齐</li><li><strong>right</strong>：右对齐</li></ul><p>特点：</p><ul><li>浮动后的盒子<strong>顶对齐</strong></li><li>浮动后的盒子具备<strong>行内块</strong>特点 (在一行显示的盒子都要设置浮动属性)</li><li>浮动后的盒子<strong>脱标</strong>，<strong>不占用标准流的位置</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 特点：顶对齐，具备行内块显示模式 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 脱标现象：只给.one加float，浮动后盒子不占数据流，.two为第一个盒子，两盒重合 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>场景：浮动元素会脱标，如果<strong>父级没有高度</strong>，<strong>子级无法撑开父级高度</strong>（可能导致页面布局错乱）</p><p>解决方法：清除浮动带来的影响</p><h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>设置方式：给<strong>父</strong>元素设置 <strong>display: flex</strong>，子元素可以自动挤压或拉伸</p><p>组成部分：</p><ul><li>弹性容器</li><li>弹性盒子</li><li>主轴：默认在<strong>水平</strong>方向, 向右为正方向</li><li>侧轴 &#x2F; 交叉轴：默认在<strong>垂直</strong>方向, 向下为正方向</li></ul><p><img src="/img/flex%E7%BB%84%E6%88%90.png" alt="img"></p><h4 id="主轴对齐方式"><a href="#主轴对齐方式" class="headerlink" title="主轴对齐方式"></a>主轴对齐方式</h4><p>属性名：<strong>justify-content</strong></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，弹性盒子从起点开始依次排列</td></tr><tr><td>flex-end</td><td>弹性盒子从终点开始依次排列</td></tr><tr><td>center</td><td>弹性盒子沿主轴居中排列</td></tr><tr><td>space-between</td><td>弹性盒子沿主轴均匀排列，空白间距均分在弹性盒子之间</td></tr><tr><td>space-around</td><td>弹性盒子沿主轴均匀排列，空白间距均分在弹性盒子两侧</td></tr><tr><td>space-evenly</td><td>弹性盒子沿主轴均匀排列，弹性盒子与容器之间间距相等</td></tr></tbody></table><h4 id="侧轴对齐方式"><a href="#侧轴对齐方式" class="headerlink" title="侧轴对齐方式"></a>侧轴对齐方式</h4><ul><li>align-items：当前弹性容器内<strong>所有</strong>弹性盒子的侧轴对齐方式（给<strong>弹性容器</strong>设置）</li><li>align-self：单独控制<strong>某个弹性盒子</strong>的侧轴对齐方式（给<strong>弹性盒子</strong>设置）</li></ul><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>stretch</td><td>弹性盒子沿着侧轴线被拉伸至铺满容器（弹性盒子没有设置侧轴方向尺寸则默认拉伸）</td></tr><tr><td>center</td><td>弹性盒子沿侧轴居中对齐</td></tr><tr><td>flex-start</td><td>弹性盒子从起点开始依次排列</td></tr><tr><td>flex-end</td><td>弹性盒子从终点开始依次排列</td></tr></tbody></table><h4 id="修改主轴方向"><a href="#修改主轴方向" class="headerlink" title="修改主轴方向"></a>修改主轴方向</h4><p><strong>主轴默认在水平方向，侧轴默认在垂直方向</strong></p><p>属性名：<strong>flex-direction</strong></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>row</td><td>水平方向，从左到右（默认）</td></tr><tr><td>column</td><td>垂直方向，从上到下</td></tr><tr><td>row-reverse</td><td>水平方向，从右到左</td></tr><tr><td>column-reverse</td><td>垂直方向，从下到上</td></tr></tbody></table><h4 id="弹性伸缩比"><a href="#弹性伸缩比" class="headerlink" title="弹性伸缩比"></a>弹性伸缩比</h4><p>作用：控制弹性盒子的主轴方向的尺寸。</p><p>属性名：<strong>flex</strong></p><p>属性值：整数数字，表示占用<strong>父级剩余尺寸的份数</strong>。</p><h4 id="弹性盒子换行"><a href="#弹性盒子换行" class="headerlink" title="弹性盒子换行"></a>弹性盒子换行</h4><p>弹性盒子可以自动挤压或拉伸，默认情况下，所有弹性盒子都在一行显示。</p><p>属性名：<strong>flex-wrap</strong></p><p>属性值</p><ul><li>wrap：换行</li><li>nowrap：不换行（默认）</li></ul><h4 id="行内对齐方式"><a href="#行内对齐方式" class="headerlink" title="行内对齐方式"></a>行内对齐方式</h4><p>属性名：<strong>align-content</strong> </p><blockquote><p>注意：用于控制多行的对齐方式，如果只有一行则不会起作用。</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>stretch</td><td>默认。各行将会伸展以占用剩余的空间。</td></tr><tr><td>flex-start</td><td>各行向弹性盒容器的起始位置堆叠。</td></tr><tr><td>flex-end</td><td>各行向弹性盒容器的结束位置堆叠。</td></tr><tr><td>center</td><td>各行向弹性盒容器的中间位置堆叠。</td></tr><tr><td>space-between</td><td>各行在弹性盒容器中平均分布。</td></tr><tr><td>space-around</td><td>各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。</td></tr></tbody></table><h3 id="定位布局"><a href="#定位布局" class="headerlink" title="定位布局"></a>定位布局</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>作用：灵活的改变盒子在网页中或某盒子内的位置, 并可以压住其它盒子</p><p>实现：</p><p>1.定位模式：position</p><p>2.边偏移：设置盒子的位置</p><ul><li>left  (左侧偏移量，定义元素相对于其父元素左边线的距离。)</li><li>right</li><li>top</li><li>bottom</li></ul><h4 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h4><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><p><strong>position: relative</strong></p><p>特点：</p><ul><li>不脱标，占用自己原来位置</li><li>显示模式特点保持不变</li><li>设置边偏移则相对自己原来位置移动, 仍然会占据原来的空间</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p><strong>position: absolute</strong></p><p>使用场景：子级绝对定位，父级相对定位（<strong>子绝父相</strong>）</p><p>子级使用绝对定位时，其位置是相对于最近的已定位祖先元素进行偏移的。如果父级元素没有设置任何定位方式，那么子级的绝对定位将会依据document的body来进行，这可能导致一些不可预测的布局问题。</p><p>保持文档流：相对定位的元素会在常规文档流中占据空间，而绝对定位的元素则不会。通过为父级设置相对定位，可以在保持整体布局稳定的同时，灵活调整子级的位置。</p><p>特点：</p><ul><li>脱标，不占位</li><li>显示模式具备行内块特点</li><li>设置边偏移则相对最近的已经定位的祖先元素改变位置</li><li>如果祖先元素都未定位，则相对浏览器可视区改变位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定位居中</li><li>实现步骤：<ul><li>绝对定位</li><li>水平、垂直边偏移为 50%</li><li>子级向左、上移动自身尺寸的一半</li><li>左、上的外边距为 –尺寸的一半</li><li>transform: translate(-50%, -50%)</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* margin-left: -265px;</span></span><br><span class="line"><span class="comment">  margin-top: -127px; */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 方便： 50% 就是自己宽高的一半 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p><strong>position: fixed</strong></p><p>场景：元素的位置在网页滚动时不会改变</p><p>特点：</p><ul><li>脱标，不占位</li><li>显示模式具备行内块特点</li><li>设置边偏移相对浏览器窗口改变位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆叠层级"><a href="#堆叠层级" class="headerlink" title="堆叠层级"></a>堆叠层级</h3><p>默认效果：按照标签书写顺序，后来者居上</p><p>作用：控制盒子的前后次序 (z轴), 只有定位的盒子才有</p><p>属性名：<strong>z-index</strong></p><p>属性值：<strong>整数数字</strong>（默认值为0，取值越大，层级越高）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="comment">/* 取值是整数，默认是0，取值越大显示顺序越靠上 */</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS总结笔记（中）</title>
      <link href="/2024/09/04/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
      <url>/2024/09/04/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="常用CSS属性"><a href="#常用CSS属性" class="headerlink" title="常用CSS属性"></a>常用CSS属性</h2><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><table><thead><tr><th>属性</th><th>意义</th><th>注意点</th></tr></thead><tbody><tr><td>font</td><td>简写属性。把所有针对字体的属性设置在一个声明中</td><td>按顺序用空格隔开,  必须保留 font-size 和 font-family 属性</td></tr><tr><td>font-size</td><td>字号</td><td>必须使用单位:px像素,默认16px; em倍数，相对于父标签字体大小的倍数</td></tr><tr><td>font-family</td><td>字体</td><td>指定多种字体时，用逗号分隔;  字体由多个单词组成时由双引号括起来</td></tr><tr><td>font-weight</td><td>粗细</td><td>Normal 为正常; lighter 为细体; bold 为粗体; bolder 为特粗体</td></tr><tr><td>font-style</td><td>样式(是否倾斜)</td><td>Normal 为正常; italic 为斜体; oblique 为倾斜</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line"> <span class="attribute">font</span>: font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><table><thead><tr><th>属性</th><th>意义</th><th>注意点</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>有四种写法</td></tr><tr><td>line-height</td><td>行高</td><td></td></tr><tr><td>text-align</td><td>水平对齐方式</td><td>取值：left、center、right(属性要设置给内容的父级)</td></tr><tr><td>vertical-align</td><td>垂直对齐方式</td><td>取值：top、middle、bottom(属性要设置给内容的父级)</td></tr><tr><td>text-indent</td><td>首行缩进</td><td>2em（推荐：1em &#x3D; 当前标签的字号大小）</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>取值：underline、overline、line-through</td></tr><tr><td>text-transform</td><td>字母大小写转换</td><td>取值：lowercase、uppercase、capitalize首字母大写</td></tr><tr><td>letter-spacing</td><td>字符间距</td><td></td></tr></tbody></table><h4 id="行内元素的垂直外边距"><a href="#行内元素的垂直外边距" class="headerlink" title="行内元素的垂直外边距"></a>行内元素的垂直外边距</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* margin与padding属性，无法改变垂直位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 行高可以改变垂直位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><table><thead><tr><th>属性</th><th>意义</th><th>注意点</th></tr></thead><tbody><tr><td>background-image</td><td>背景图</td><td>属性值：url(背景图 URL),默认有<strong>平铺（复制）效果</strong>。</td></tr><tr><td>background-repeat</td><td>平铺方式</td><td>repeat(默认)，repeat-x(水平平铺)，repeat-y,   no-repeat</td></tr><tr><td>background-color</td><td>背景颜色</td><td>取值：transparent 透明</td></tr><tr><td>background-position</td><td>背景图位置</td><td><strong>关键字</strong>：top、bottom、left、right、center;  <strong>坐标</strong>：左上角为(0,0)坐标，向右为x正方向,向下为y正方向</td></tr><tr><td>background-size</td><td>背景图缩放</td><td><strong>cover</strong>：等比例缩放背景图片以完全覆盖背景区，可能背景图片部分看不见;  <strong>contain</strong>：等比例缩放背景图片以完全装入背景区，可能背景区部分空白</td></tr><tr><td>background-attachment</td><td>背景图固定</td><td>作用：背景不会随着元素的内容滚动。属性值：fixed</td></tr><tr><td>background</td><td>背景复合属性</td><td>属性值：背景色 背景图 背景图平铺方式 背景图位置&#x2F;背景图缩放  背景图固定（<strong>空格隔开各个属性值，不区分顺序</strong>）</td></tr></tbody></table><h3 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h3><table><thead><tr><th>属性</th><th>意义</th></tr></thead><tbody><tr><td>list-style</td><td>简写属性，用于设置列表项的标志、位置和图像</td></tr><tr><td>list-style-type</td><td>设置列表项的标志类型</td></tr><tr><td>list-style-position</td><td>设置列表项标志的位置</td></tr><tr><td>list-style-image</td><td>设置列表项的图像作为标志</td></tr></tbody></table><h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>border-collapse</td><td>设置是否合并表格边框模型</td></tr><tr><td>border-spacing</td><td>设置相邻单元格边框之间的距离</td></tr><tr><td>caption-side</td><td>设置表格标题的位置</td></tr><tr><td>empty-cells</td><td>设置是否显示表格中的空单元格的边框和背景</td></tr><tr><td>table-layout</td><td>设置表格单元格、行和列的算法</td></tr><tr><td>border</td><td>简写属性，用于设置表格边框的宽度、样式和颜色</td></tr><tr><td>border-width</td><td>设置表格边框的宽度</td></tr><tr><td>border-style</td><td>设置表格边框的样式</td></tr><tr><td>border-color</td><td>设置表格边框的颜色</td></tr><tr><td>border-radius</td><td>设置表格边框圆角</td></tr></tbody></table><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>网页布局过程：</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li><li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li><li>往盒子里面装内容。</li></ol><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>属性</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>设置盒子内容的宽度</td><td></td></tr><tr><td>height</td><td>设置盒子内容的高度</td><td></td></tr><tr><td>padding或padding-方位名词</td><td>设置盒子内边距</td><td>内容与边框之间的距离,添加 padding 会撑大盒子,多值写法:从上开始顺时针赋值，当前方向没有数值则与对面取值相同。</td></tr><tr><td>border或border-方位名词</td><td>设置盒子的边框</td><td>属性值：边框线粗细  线条样式(solid,dashed,dotted)  颜色（不区分顺序）</td></tr><tr><td>margin</td><td>设置盒子外边距</td><td>盒子与盒子之间的距离,与 padding 属性值写法、含义相同</td></tr></tbody></table><p>默认情况：盒子尺寸 &#x3D; 内容尺寸 + border 尺寸 + 内边距尺寸</p><p>结论：给盒子加 border &#x2F; padding 会撑大盒子</p><p>解决：</p><ul><li>手动做减法，减掉 border &#x2F; padding 的尺寸</li><li>內减模式：<strong>box-sizing: border-box</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认：盒子尺寸=内容尺寸+border+内边距（加border与padding会撑大盒子） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 手动减法 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 內减模式：无需手动加减，加border，padding不会撑大盒子 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="版心居中"><a href="#版心居中" class="headerlink" title="版心居中"></a>版心居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 外边距不会撑大盒子，写法与内边距一致 */</span></span><br><span class="line">            <span class="comment">/* 版心居中 margin: 上下距离 auto */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><p>作用：设置元素的外边框为圆角。</p><p>属性名：<strong>border-radius</strong></p><p>属性值：数字+px &#x2F; 百分比</p><p>提示：属性值是圆角半径,多值写法同上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 属性：border-radius：数字px/百分比（圆角半径） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 四值：左上 右上 右下 左下 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">40px</span> <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 三值：左上 右上+左下 右下 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">40px</span> <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 两值：左上+右下 右上+左下 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 常见应用：正圆（设置属性值为宽高的一半/50% */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 胶囊（属性值为高度一半） */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 正圆：头像 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../HTML语言/Quicker_20240401_205250.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 胶囊：按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><p>作用：给元素设置阴影效果</p><p>属性名：<strong>box-shadow</strong></p><p>属性值：X 轴偏移量  Y 轴偏移量  模糊半径  扩散半径  颜色  内外阴影</p><p>注意： </p><ul><li>X 轴偏移量 和 Y 轴偏移量 必须书写</li><li>默认是外阴影，内阴影需要添加 inset</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- box-shadow:x轴偏移量 y轴偏移量 模糊半径 扩散半径 颜色 内外阴影 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- xy必须写，默认外阴影，内阴影要添加inset --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>) inset;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除默认内外边距 */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 清除列表项目符号 */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素溢出"><a href="#元素溢出" class="headerlink" title="元素溢出"></a>元素溢出</h3><p>作用：控制溢出元素的内容的显示方式。</p><p>属性名：<strong>overflow</strong></p><p>属性值:   hidden(溢出隐藏),scroll(溢出滚动,始终显示滚动条),auto(溢出滚动,溢出才显示滚动条)</p><h3 id="外边距问题"><a href="#外边距问题" class="headerlink" title="外边距问题"></a>外边距问题</h3><h4 id="外边距合并现象"><a href="#外边距合并现象" class="headerlink" title="外边距合并现象"></a>外边距合并现象</h4><p>场景：<strong>垂直</strong>排列的兄弟元素，上下 <strong>margin</strong> 会<strong>合并</strong></p><p>现象：取两个 margin 中的<strong>较大值生效</strong></p><h4 id="外边距塌陷问题"><a href="#外边距塌陷问题" class="headerlink" title="外边距塌陷问题"></a>外边距塌陷问题</h4><p>场景：父子级的标签，子级的添加 <strong>上外边距</strong> 会产生<strong>塌陷</strong>问题</p><p>现象：<strong>导致父级一起向下移动</strong></p><p>解决方法：</p><ul><li>取消子级margin，父级设置padding</li><li>父级设置 overflow: hidden</li><li>父级设置 border-top</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS总结笔记（上）</title>
      <link href="/2024/09/03/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2024/09/03/CSS%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><ul><li>选择器：要修饰的对象</li><li>属性名：修饰对象的其中一个属性</li><li>属性值：属性的取值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*CSS代码*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选择器 &#123;CSS属性&#125;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 标签选择器特点：选中同名标签设置相同样式，无法差异化 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 属性名与属性值成对出现：键值对 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 颜色 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: brown;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 字号 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h2><ul><li>层叠性:样式冲突时,哪个样式离结构进,就执行哪个</li><li>继承性:子标签会继承父标签的某些样式(text-,font-,line-,color)</li><li>优先级:见选择器后</li></ul><h2 id="三种CSS引入方式"><a href="#三种CSS引入方式" class="headerlink" title="三种CSS引入方式"></a>三种CSS引入方式</h2><ul><li>内嵌：在<code>&lt;head&gt;</code>内用<code>&lt;style&gt;</code>包裹</li><li>行内：在标签内使用<code>style</code>属性</li><li>外部：使用单独的<code>.css</code>文件，并在HTML中使用<code>link</code>引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./02.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- link引入外部样式表，工作常用 ； rel：关系，样式表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: aquamarine; font-size: 30px;&quot;</span>&gt;</span>这是div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行内，style=“CSS属性”  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="emmet简便写法"><a href="#emmet简便写法" class="headerlink" title="emmet简便写法"></a>emmet简便写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* w500 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* w500+h200+bgc */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- p.box --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- p#box --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- div+p --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- div&gt;p --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- span*3 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- div&#123;111&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.span1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 转换显示模式:inline-block转行内块,block转块,inline转行内(不常用) */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 块block元素,&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;至&lt;h6&gt;等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>div标签1,独占一行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span2&quot;</span>&gt;</span>div标签2,默认与父级body宽度相同,可添加宽高<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 行内inline元素,&lt;span&gt;、&lt;a&gt;、&lt;em&gt;等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签1,一行共存多个<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签2,由内容撑开尺寸,设置宽高不生效,背景色生效<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 行内块inline-block元素,&lt;input&gt;,&lt;img&gt;,&lt;button&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一行共存多个,默认尺寸由内容决定,设置宽高生效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../HTML语言/Quicker_20240401_205250.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../HTML语言/Quicker_20240401_205250.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul><li>直接使用标签名作选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* 颜色 */</span></span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">    <span class="comment">/* 字号 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li>.+自定义名称，在标签内用class属性调用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义类选择器 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.size</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一个类选择器可以给多个标签使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一个标签可使用多个类选择器，用空格隔开 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red size&quot;</span>&gt;</span>33333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><ul><li>以#+自定义名称，id属性调用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* id选择器配合JS使用，很少用来设置样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 定义 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><ul><li>单星号,选所有标签设置相同样式（在工作初期清除默认样式）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基础公共样式：清除默认样式 + 设置通用样式 */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.5</span> <span class="string">&quot;Microsoft Yahei&quot;</span>, <span class="string">&quot;Hiragino Sans GB&quot;</span>, <span class="string">&quot;Heiti SC&quot;</span>, <span class="string">&quot;WenQuanYi Micro Hei&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂选择器"><a href="#复杂选择器" class="headerlink" title="复杂选择器"></a>复杂选择器</h3><h4 id="后代、子代选择器"><a href="#后代、子代选择器" class="headerlink" title="后代、子代选择器"></a>后代、子代选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 后代选择器选择所有后代 用空格隔开*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 使div内span为红色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 子代选择器只选择子代 用大于号隔开*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span>  &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是div的子span<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 变紫 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>div的孙span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 变红 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="并集、交集选择器"><a href="#并集、交集选择器" class="headerlink" title="并集、交集选择器"></a>并集、交集选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 使div,p,span同时为红 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 并集选择器 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 交集选择器:标签选择器和，类选择器或id选择器一起使用,满足两个条件才变化 */</span></span></span><br><span class="line"><span class="language-css"> <span class="comment">/* 只想修改class属性为a的p标签 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span><span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 只想修改id属性为b的和h1标签 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span><span class="selector-id">#b</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>33333<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>p标签,使用类选择器a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>div使用id选择器b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><ul><li>根据不同状态显示不同样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置鼠标悬停时的状态 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* link访问前,visited访问后,hover鼠标悬停,active点击时(按顺序设置) */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 工作时大多标签选择器设置样式再hover特殊设置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: azure;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a标签,测试伪类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><ul><li>在多个相同标签中选择其中一个或多个</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 第一个 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 最后一个 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 任意个 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 公式写法 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 找到第五个及以后的标签 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n+<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 找到第五个及以前的标签 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(-n+<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 必须有content，否则不生效 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 显示模式默认为行内 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 在元素内容最后添加内容 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;mouse &quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: brown;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 在元素内容最前添加内容 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot; rice&quot;</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 为第一个字符添加样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::first-letter</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 为第一行字添加样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::first-line</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: grey;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>lo<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        ve<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><ul><li>原理:后加载的覆盖先加载的</li><li>!important&gt;行内样式&gt;id选择器&gt;类选择器&gt;标签选择器</li><li>相同按照书写顺序加载,后写的最优先</li><li>使用!important可使某样式有最高优先级</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML复习</title>
      <link href="/2024/09/02/HTML%E5%A4%8D%E4%B9%A0/"/>
      <url>/2024/09/02/HTML%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="基本骨架"><a href="#基本骨架" class="headerlink" title="基本骨架"></a>基本骨架</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Ctrl加/生成注释 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 感叹号加enter快速生成基本骨架 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 两种标签间关系：父子关系（嵌套），兄弟关系（并列） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>信号<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- head页面标签内的字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body给用户看的内容 --&gt;</span></span><br><span class="line">听得见吗    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h4 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标题分为六级：一级只用一次（新闻标题，网页logo），其它无 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 段落标签p,换行标签br,水平线标签hr --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本格式化标签：加粗strong，倾斜em，下划线ins，删除线del --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>设计模式（Design pattern）<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的<span class="tag">&lt;<span class="name">em</span>&gt;</span>一般问题的解决方案。<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">        这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span>设计模式（Design pattern）<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的<span class="tag">&lt;<span class="name">del</span>&gt;</span>一般问题的解决方案。<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">        这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充：<code>&lt;sub&gt;下标数字&lt;/sub&gt;</code> <code>&lt;sup&gt;上标数字&lt;/sup&gt;</code></p><h4 id="图像标签及路径"><a href="#图像标签及路径" class="headerlink" title="图像标签及路径"></a>图像标签及路径</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./Quicker_20240401_205250.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./Quicker_20240401_205735.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- alt：图片无法显示时展示的文字；title：鼠标悬停时显示的文字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./Quicker_20240401_205250.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;一张关于代码的图片&quot;</span> <span class="attr">title</span>=<span class="string">&quot;一张关于代码的图片&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>相对路径：使用较多，从当前文件位置出发查找 <code>./</code></li><li>绝对路径：从盘符出发</li></ul><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/&quot;</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 跳转到本地文件：相对路径查找；新窗口跳转页面：target=&quot;_blank&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./01-标签的写法.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>标签的写法<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 空连接：# --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>空链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./塞壬唱片-MSR; Adam Gubman; Abdiel Gonzalez - ALL!!!.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简写：属性名与属性值一致 </span></span><br><span class="line"><span class="comment">    controls添加控制面板</span></span><br><span class="line"><span class="comment">    loop循环播放</span></span><br><span class="line"><span class="comment">    autoplay自动播放，浏览器禁用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./班级形象片.avi&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 增加属性muted静音播放,浏览器支持静音下自动播放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>条目一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>条目二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>条目三<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无序列表ul标签里只能放li标签，li标签可包含任何内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>条目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>条目2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 有序列表ol同上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义列表如上，默认缩进显示，dl内只能包含dt与dd，其它放dtdd内 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表格结构标签：thead，tbody，tfoot --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>总分<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- rowspan跨行合并，保留最左最上，合并几格写几，把对应合并格删去 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>199<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>198<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>全市第一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 不能跨结构标签合并 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- placeholder,占位文本提示信息 --&gt;</span></span><br><span class="line">    文本框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 特点：输入什么就显示什么，不换行 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 输入用点显示 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    单选框：性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">    <span class="comment">&lt;!-- name分到一组，一组只能选一个；checked默认选择 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    多选框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span>选择1</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>选择2</span><br><span class="line">    <span class="comment">&lt;!-- 信息编辑时需要以前选中的现在同样选中 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    上传文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- multiple可上传多个文件 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单-下拉菜单，select嵌套option --&gt;</span></span><br><span class="line">    城市：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- selected 默认选中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单-文本域：多行输入文本（评论功能），textrea双标签，右下角有拖拽功能，以后禁用；用CSS设置尺寸 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">        请输入评论</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单-label标签，增大表单控件的点击范围，点文字也可以 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 写法一： --&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 写法二：用label包裹 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">checked</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单-按钮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- form表单区域，action发送数据的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="div与span布局标签"><a href="#div与span布局标签" class="headerlink" title="div与span布局标签"></a>div与span布局标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div独占一整行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div（大盒子）独占一整行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span不换行<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span不换行<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="另：Markdown与HTML的关系"><a href="#另：Markdown与HTML的关系" class="headerlink" title="另：Markdown与HTML的关系"></a>另：Markdown与HTML的关系</h4><ul><li>md较HTML更易读</li><li>md中可使用HTML，反之不能</li><li>md最终需要转换成HTML才能在网页上显示</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法备忘</title>
      <link href="/2024/09/01/Markdown%E8%AF%AD%E6%B3%95%E5%A4%87%E5%BF%98/"/>
      <url>/2024/09/01/Markdown%E8%AF%AD%E6%B3%95%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line">（以此类推，共六级）</span><br></pre></td></tr></table></figure><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>星号&#x2F;下划线（单斜，双粗，三粗斜）</p><p>快捷键: Ctrl+B 加粗     Ctrl+L斜体</p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>前后双波浪号</p><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h1><p>&#x3D;&#x3D;双等号&#x3D;&#x3D;</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 使用三个反引号<span class="code">```</span></span><br><span class="line"><span class="code">2. 行内对代码使用单反引号</span></span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用使用“&gt;”</span></span><br><span class="line">(使用多个&gt;可嵌套)</span><br></pre></td></tr></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>有序列表<ul><li>*&#x2F;+&#x2F;-  +  空格</li></ul></li><li>无序列表<ul><li>数字.+空格</li></ul></li><li>控制层级<ul><li>Tab&#x2F;Shift+Tab</li></ul></li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|表头1|表头2|表头3|</span><br><span class="line">|---|----|----|（分割表头与单元格）</span><br><span class="line">|单元格1|单元格2|单元格3|</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">表头1</th><th>表头2</th><th>表头3</th></tr></thead><tbody><tr><td align="left">单元格1</td><td>单元格2</td><td>单元格3</td></tr></tbody></table><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分割</span><br><span class="line"><span class="section">（前加空行，否则导致前一行字体放大）</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脚注一[^1]脚注二[^2]</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">脚注一内容</span></span><br><span class="line">[<span class="symbol">^2</span>]: <span class="link">脚注二内容</span></span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="可选的标题">链接文本</a></p><ol><li><strong>链接文本</strong>：这是你希望显示在文档中的文字，它会作为点击的入口。</li><li><strong>链接地址</strong>：这是链接的目标地址，可以是网页的URL，也可以是本地的文件路径。</li><li><strong>可选的标题</strong>：这是鼠标悬停在链接上时显示的文本。这一部分是可选的。</li><li>可在链接文本使用粗斜体</li></ol><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">这是一只猫</span>](<span class="link">https://example.com/images/cat.jpg &quot;猫的图片&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>替代文字</strong>：这是当图片无法显示时出现的文本，同时也有助于搜索引擎优化和屏幕阅读器的可访问性。</li><li><strong>图片地址</strong>：这是图片的URL或者本地文件路径。</li><li><strong>可选的标题</strong>：这是鼠标悬停在图片上时显示的文本。这一部分是可选的。</li></ol><h1 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h1><p>反斜线\ +特殊语法符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\\</span><br><span class="line">\*</span><br><span class="line">\_</span><br><span class="line">\+</span><br><span class="line">\.</span><br></pre></td></tr></table></figure><h5 id="HTML也可用于改变字体、表格样式"><a href="#HTML也可用于改变字体、表格样式" class="headerlink" title="HTML也可用于改变字体、表格样式"></a>HTML也可用于改变字体、表格样式</h5><h1 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h1><h2 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h2><p>使用<code>^</code>符号。将需要上标的文字放在<code>^</code>符号后面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X^2</span><br></pre></td></tr></table></figure><p>渲染后的效果是：X²</p><h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h2><p>要创建下标，您可以使用<code>~</code>符号。将需要下标的文字放在<code>~</code>符号后面。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H~2~O</span><br></pre></td></tr></table></figure><p>渲染后的效果是：H₂O</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>上标和下标只能对紧跟在<code>^</code>或<code>~</code>后面的单个字符或单词生效。</li><li>如果您需要对多个字符或单词应用上标或下标，请将它们用括号<code>()</code>包裹起来。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
